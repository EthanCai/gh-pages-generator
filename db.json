{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/samples/expvarsample.go","path":"samples/expvarsample.go","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"1f7d35b787b1751eef2793a2a8c6171dff51820f","modified":1479572993000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1479572993000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479572993000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1479572993000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479572993000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1479572993000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479572993000},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479572993000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"86f1c9467f6b8b2f54ff773799fabc653366b20a","modified":1479572993000},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479572993000},{"_id":"themes/hexo-theme-next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1479572993000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1479572993000},{"_id":"source/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1479572993000},{"_id":"themes/hexo-theme-next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1479572993000},{"_id":"source/_drafts/build-your-own-container-cluster-for-development-based-on-docker-swarm.md","hash":"a931214380e74960eeb4c3881fa6f522685dc594","modified":1499763324000},{"_id":"source/_posts/a-path-for-expand-mongodb-cluster.md","hash":"895d7d23e50b3d0f5f3a77ee9cab4a048b3161c9","modified":1479572993000},{"_id":"source/_posts/collected-papers.md","hash":"4f16b224343cab27aed9984c94df6d8567ff0205","modified":1479572993000},{"_id":"source/_posts/cracking-the-coding-skill.md","hash":"5c102e838380193b62c7e5f387035f1bd56cbc57","modified":1499844415000},{"_id":"source/_posts/config-smallest-mongodb-cluster-on-ubuntu-14-04.md","hash":"d067913c3636ae10775bb6a9a50dea1622d3f223","modified":1479572993000},{"_id":"source/_posts/bad-parts-about-json-serialization-in-Golang.md","hash":"ba0871231e67f774e0c491482de8347e88235571","modified":1479572993000},{"_id":"source/_posts/configure-smallest-elasticsearch-cluster.md","hash":"abda98d08497142c2bc0ea479a23a6ec2485a203","modified":1479572993000},{"_id":"source/_posts/elastic-basic-concepts.md","hash":"7f57da879323e427244587b9887668ef582fcf28","modified":1495086698000},{"_id":"source/_posts/install-oracle-jdk-on-ubuntu-14-04.md","hash":"539bf770e649fa78cef2c78c32c645831b45a57a","modified":1479572993000},{"_id":"source/_posts/make-php-development-VM-using-Vagrant.md","hash":"31f8ca9bf24b22f43ade044abe1cf80eafabb29a","modified":1497850552000},{"_id":"source/_posts/general-pagination-for-mobile-app.md","hash":"231eda6e11de66452b452b174e232222afbd0e4a","modified":1479572993000},{"_id":"source/_posts/install-elasticsearch-on-ubuntu-14-04.md","hash":"a3d09ab0eb6ecae5947df32590be98400e22d327","modified":1479572993000},{"_id":"source/_posts/experiences-about-develop-dlog.md","hash":"665733432cf6e1e6696f90d759c295b85574eb32","modified":1479572993000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os.md","hash":"74de19d5dc05bb59c85db4e02b7b3454e47dc179","modified":1497347005000},{"_id":"source/_posts/product-design-vs-requirement-analysis.md","hash":"c521367fb053b9f9a3dae238ae896b535d6c3fb0","modified":1479572993000},{"_id":"source/categories/index.md","hash":"344157c3e9b54d9247f213e085e193030ff66def","modified":1479572993000},{"_id":"source/images/avatar.jpg","hash":"c4dd28a263439f83c15ddc069d97642fcf22065f","modified":1479572993000},{"_id":"source/samples/expvarsample.go","hash":"40e471129b2c9c1599977e73955d9ff19ea6f821","modified":1479572993000},{"_id":"source/tags/index.md","hash":"d32085ddec1214e036e7c7e8dbdb105455cf4332","modified":1479572993000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479572993000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"d6047c2afeabe9a329d92eb2a03490ff181616c2","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1479572993000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"b2bba2630b51ec27e3242859e8d4fe3b181742c2","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479572993000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479572993000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1479572993000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479572993000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479572993000},{"_id":"source/_posts/assets/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497262645000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"source/_posts/configure-smallest-elasticsearch-cluster/es-cluster.jpg","hash":"6d4286d8f7f5ec3b89a879c1cb2fed7fdc82a26c","modified":1479572993000},{"_id":"source/_posts/experiences-about-develop-dlog/channel.png","hash":"07fa353dc547212f594f859c2dde0c217eff983b","modified":1479572993000},{"_id":"source/_posts/experiences-about-develop-dlog/use_channel.png","hash":"853e9b256bf1db8aee27f55ec881305eb52d1ab6","modified":1479572993000},{"_id":"source/_posts/elastic-basic-concepts/logo-elastic.png","hash":"875e4b0539a8fa79d1b2fbcd8809170d2247a368","modified":1479572993000},{"_id":"source/_posts/install-elasticsearch-on-ubuntu-14-04/logo-elastic.png","hash":"875e4b0539a8fa79d1b2fbcd8809170d2247a368","modified":1479572993000},{"_id":"source/_posts/install-oracle-jdk-on-ubuntu-14-04/oracle-jdk8-on-Ubuntu.png","hash":"4b6b78a9766974984c5e4993c3dab7326b046f7b","modified":1479572993000},{"_id":"source/_posts/make-php-development-VM-using-Vagrant/make-php-development-VM-using-Vagrant-13489.png","hash":"8344e17e266e1f582e35f79cc62e0ccfbe723474","modified":1497347103000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"379737761f44fb71de997a73192f35b8e568ac58","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"e8e9c986ce1a0b370afd36703d49f1818492cb64","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"0ff291b272808fd471747f66b621822ed1dc8abd","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"a7084dcef03fa0d0c97962ec9828b77c9a73592f","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1479572993000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479572993000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1479572993000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479572993000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-0c6a2.png","hash":"9ea615b35732ba04502467bad76960b562e1820a","modified":1497262366000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-2aa39.png","hash":"7f50b85cb43570f16dea32b7ffb2599169fd740a","modified":1497262624000},{"_id":"source/_posts/experiences-about-develop-dlog/expvarmon_screen.png","hash":"3cf57a3f5a4de25e898ce566770f123a6efb8eb4","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"ce88ec0557b6d765ae38dd5984b178c7fc4d376e","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"bcf8238cf842bbfc8f3ea733889bc4dacf59d3c4","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"23df0070bef4952cc0e669f20fc78a8abba9676e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479572993000},{"_id":"source/_posts/elastic-basic-concepts/Brueghel-tower-of-babel.jpg","hash":"0bc00e82207f52fff6831dbf01919b2a47547a80","modified":1479572993000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-aec25.png","hash":"5e7ff9c57439256f6d11f197baf08acb1f21a9f7","modified":1497266587000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479572993000},{"_id":"source/_posts/experiences-about-develop-dlog/2016-04-21_07-12-40.png","hash":"328e623a575da9a88b9a2cbb058d787e520ece1b","modified":1479572993000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-33b82.png","hash":"1c30145f84f4eb3c92e126acb6b0841689687292","modified":1497266006000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-6c7bd.png","hash":"3093bfb5bd3bff2f396c31160325c0bc73ad5204","modified":1497266365000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1479572993000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"2e829b0a7b6cbc4318672f3eeb7b26249038132d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5522ddf7df5c150d97804584840976daa0e12d63","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479572993000},{"_id":"source/_posts/experiences-about-develop-dlog/2016-04-21_07-12-24.png","hash":"8b2db6e1b6c48cfdb7bf5d6f820d05bf1f5984ea","modified":1479572993000},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-a5831.png","hash":"609ec7c964afcc87ab56e993646eb96f7d03c410","modified":1497260632000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"4c0be672d977ef793c72cf838f1d920f2749dda0","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"12f703e5fea9d8a7ba65c8cea93a5cf5c2b78457","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479572993000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479572993000},{"_id":"source/_posts/cracking-the-coding-skill/cracking_the_coding_skills.png","hash":"322d5a91e01b49b528b87cb8ee079faa2a24ab56","modified":1499844415000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1479572993000}],"Category":[{"name":"软件开发","_id":"cj50onenx0005v7bf42ejp6dw"},{"name":"阅读","_id":"cj50oneog000gv7bfqnlz18e8"},{"name":"大产品","_id":"cj50onep40017v7bfo7i8ba3c"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-11-19T16:29:53.000Z","updated":"2016-11-19T16:29:53.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj50onemk0000v7bfvh57t76t","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"title":"分类","date":"2016-04-23T12:10:41.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-04-23 20:10:41\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-19T16:29:53.000Z","path":"categories/index.html","layout":"page","_id":"cj50onenq0002v7bfkt6f3aby","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有标签","date":"2016-04-23T12:05:07.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ndate: 2016-04-23 20:05:07\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-19T16:29:53.000Z","path":"tags/index.html","layout":"page","_id":"cj50onenv0004v7bf6hgm9cza","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"基于Docker Swarm，构建你自己的开发容器集群环境","_content":"\n# 简介\n\n微服务和容器集群技术，是天生的好搭档。微服务让系统的模块划分更细，而容器集群技术降低了这种模块细分带来部署复杂度。\n\n目前我司的服务端程序主要采用微服务架构，测试、生产环境的服务端程序都部署在基于Docker Swarm搭建的容器集群中。而本地开发微服务，相比以前开发单块应用，开发、运行、调试的复杂度都增加了不少。\n\n本文介绍一种方法，通过开源容器技术搭建本地微服务运行环境，降低开发成本，提高开发效率。\n\n# 总体结构\n\n\n# 搭建步骤\n\n\n# 如何运行应用程序\n\n\n# 如何收集查看程序日志\n\n\n# 参考\n\n- Docker Engine\n  - Install Docker\n    - Mac上安装Docker: https://docs.docker.com/engine/installation/\n    - CentOS上安装Docker Engine:\n      - https://docs.docker.com/engine/installation/linux/centos/\n      - https://docs.docker.com/v1.13/engine/installation/linux/centos/\n    - Config Registry Mirror: https://yq.aliyun.com/articles/29941\n  - User Guide\n    - Build and Manage Image\n      - Best Practices: https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\n    - Network configuration\n      - Docker container networking: https://docs.docker.com/engine/userguide/networking/\n  - Admin Guide\n    - Limit a container's resources: https://docs.docker.com/engine/admin/resource_constraints/\n    - Logging: https://docs.docker.com/engine/admin/logging/view_container_logs/\n    - Using Ansible: https://docs.docker.com/engine/admin/ansible/\n    - Runtime Metrics: https://docs.docker.com/engine/admin/runmetrics/\n- Docker Registry\n  - https://docs.docker.com/v1.13/registry/deploying/\n  - https://hub.docker.com/r/h3nrik/registry-ldap-auth/\n  - https://github.com/kwk/docker-registry-setup\n  - 生成签名证书：\n    - http://www.akadia.com/services/ssh_test_certificate.html\n    - https://my.oschina.net/aiguozhe/blog/121764\n- Docker Swarm\n  - Guides - Manage a Swarm: https://docs.docker.com/engine/swarm/\n  - Superseded products and tools: https://docs.docker.com/swarm/overview/\n- Docker Compose\n  - Overview of Docker Compose: https://docs.docker.com/compose/overview/\n- Docker Machine\n  - Overview: https://docs.docker.com/machine/overview/\n- Docker Security\n","source":"_drafts/build-your-own-container-cluster-for-development-based-on-docker-swarm.md","raw":"---\ntitle: 基于Docker Swarm，构建你自己的开发容器集群环境\ntags:\n  - docker\ncategories:\n  - 软件开发\n---\n\n# 简介\n\n微服务和容器集群技术，是天生的好搭档。微服务让系统的模块划分更细，而容器集群技术降低了这种模块细分带来部署复杂度。\n\n目前我司的服务端程序主要采用微服务架构，测试、生产环境的服务端程序都部署在基于Docker Swarm搭建的容器集群中。而本地开发微服务，相比以前开发单块应用，开发、运行、调试的复杂度都增加了不少。\n\n本文介绍一种方法，通过开源容器技术搭建本地微服务运行环境，降低开发成本，提高开发效率。\n\n# 总体结构\n\n\n# 搭建步骤\n\n\n# 如何运行应用程序\n\n\n# 如何收集查看程序日志\n\n\n# 参考\n\n- Docker Engine\n  - Install Docker\n    - Mac上安装Docker: https://docs.docker.com/engine/installation/\n    - CentOS上安装Docker Engine:\n      - https://docs.docker.com/engine/installation/linux/centos/\n      - https://docs.docker.com/v1.13/engine/installation/linux/centos/\n    - Config Registry Mirror: https://yq.aliyun.com/articles/29941\n  - User Guide\n    - Build and Manage Image\n      - Best Practices: https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\n    - Network configuration\n      - Docker container networking: https://docs.docker.com/engine/userguide/networking/\n  - Admin Guide\n    - Limit a container's resources: https://docs.docker.com/engine/admin/resource_constraints/\n    - Logging: https://docs.docker.com/engine/admin/logging/view_container_logs/\n    - Using Ansible: https://docs.docker.com/engine/admin/ansible/\n    - Runtime Metrics: https://docs.docker.com/engine/admin/runmetrics/\n- Docker Registry\n  - https://docs.docker.com/v1.13/registry/deploying/\n  - https://hub.docker.com/r/h3nrik/registry-ldap-auth/\n  - https://github.com/kwk/docker-registry-setup\n  - 生成签名证书：\n    - http://www.akadia.com/services/ssh_test_certificate.html\n    - https://my.oschina.net/aiguozhe/blog/121764\n- Docker Swarm\n  - Guides - Manage a Swarm: https://docs.docker.com/engine/swarm/\n  - Superseded products and tools: https://docs.docker.com/swarm/overview/\n- Docker Compose\n  - Overview of Docker Compose: https://docs.docker.com/compose/overview/\n- Docker Machine\n  - Overview: https://docs.docker.com/machine/overview/\n- Docker Security\n","slug":"build-your-own-container-cluster-for-development-based-on-docker-swarm","published":0,"date":"2017-07-07T03:27:30.000Z","updated":"2017-07-11T08:55:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50onenl0001v7bfw01ewohk","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>微服务和容器集群技术，是天生的好搭档。微服务让系统的模块划分更细，而容器集群技术降低了这种模块细分带来部署复杂度。</p>\n<p>目前我司的服务端程序主要采用微服务架构，测试、生产环境的服务端程序都部署在基于Docker Swarm搭建的容器集群中。而本地开发微服务，相比以前开发单块应用，开发、运行、调试的复杂度都增加了不少。</p>\n<p>本文介绍一种方法，通过开源容器技术搭建本地微服务运行环境，降低开发成本，提高开发效率。</p>\n<h1 id=\"总体结构\"><a href=\"#总体结构\" class=\"headerlink\" title=\"总体结构\"></a>总体结构</h1><h1 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h1><h1 id=\"如何运行应用程序\"><a href=\"#如何运行应用程序\" class=\"headerlink\" title=\"如何运行应用程序\"></a>如何运行应用程序</h1><h1 id=\"如何收集查看程序日志\"><a href=\"#如何收集查看程序日志\" class=\"headerlink\" title=\"如何收集查看程序日志\"></a>如何收集查看程序日志</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li>Docker Engine<ul>\n<li>Install Docker<ul>\n<li>Mac上安装Docker: <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/</a></li>\n<li>CentOS上安装Docker Engine:<ul>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/centos/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/linux/centos/</a></li>\n<li><a href=\"https://docs.docker.com/v1.13/engine/installation/linux/centos/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/v1.13/engine/installation/linux/centos/</a></li>\n</ul>\n</li>\n<li>Config Registry Mirror: <a href=\"https://yq.aliyun.com/articles/29941\" target=\"_blank\" rel=\"external\">https://yq.aliyun.com/articles/29941</a></li>\n</ul>\n</li>\n<li>User Guide<ul>\n<li>Build and Manage Image<ul>\n<li>Best Practices: <a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\n</ul>\n</li>\n<li>Network configuration<ul>\n<li>Docker container networking: <a href=\"https://docs.docker.com/engine/userguide/networking/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/userguide/networking/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Admin Guide<ul>\n<li>Limit a container’s resources: <a href=\"https://docs.docker.com/engine/admin/resource_constraints/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/resource_constraints/</a></li>\n<li>Logging: <a href=\"https://docs.docker.com/engine/admin/logging/view_container_logs/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/logging/view_container_logs/</a></li>\n<li>Using Ansible: <a href=\"https://docs.docker.com/engine/admin/ansible/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/ansible/</a></li>\n<li>Runtime Metrics: <a href=\"https://docs.docker.com/engine/admin/runmetrics/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/runmetrics/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docker Registry<ul>\n<li><a href=\"https://docs.docker.com/v1.13/registry/deploying/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/v1.13/registry/deploying/</a></li>\n<li><a href=\"https://hub.docker.com/r/h3nrik/registry-ldap-auth/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/r/h3nrik/registry-ldap-auth/</a></li>\n<li><a href=\"https://github.com/kwk/docker-registry-setup\" target=\"_blank\" rel=\"external\">https://github.com/kwk/docker-registry-setup</a></li>\n<li>生成签名证书：<ul>\n<li><a href=\"http://www.akadia.com/services/ssh_test_certificate.html\" target=\"_blank\" rel=\"external\">http://www.akadia.com/services/ssh_test_certificate.html</a></li>\n<li><a href=\"https://my.oschina.net/aiguozhe/blog/121764\" target=\"_blank\" rel=\"external\">https://my.oschina.net/aiguozhe/blog/121764</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docker Swarm<ul>\n<li>Guides - Manage a Swarm: <a href=\"https://docs.docker.com/engine/swarm/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/swarm/</a></li>\n<li>Superseded products and tools: <a href=\"https://docs.docker.com/swarm/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/swarm/overview/</a></li>\n</ul>\n</li>\n<li>Docker Compose<ul>\n<li>Overview of Docker Compose: <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/compose/overview/</a></li>\n</ul>\n</li>\n<li>Docker Machine<ul>\n<li>Overview: <a href=\"https://docs.docker.com/machine/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/machine/overview/</a></li>\n</ul>\n</li>\n<li>Docker Security</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>微服务和容器集群技术，是天生的好搭档。微服务让系统的模块划分更细，而容器集群技术降低了这种模块细分带来部署复杂度。</p>\n<p>目前我司的服务端程序主要采用微服务架构，测试、生产环境的服务端程序都部署在基于Docker Swarm搭建的容器集群中。而本地开发微服务，相比以前开发单块应用，开发、运行、调试的复杂度都增加了不少。</p>\n<p>本文介绍一种方法，通过开源容器技术搭建本地微服务运行环境，降低开发成本，提高开发效率。</p>\n<h1 id=\"总体结构\"><a href=\"#总体结构\" class=\"headerlink\" title=\"总体结构\"></a>总体结构</h1><h1 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h1><h1 id=\"如何运行应用程序\"><a href=\"#如何运行应用程序\" class=\"headerlink\" title=\"如何运行应用程序\"></a>如何运行应用程序</h1><h1 id=\"如何收集查看程序日志\"><a href=\"#如何收集查看程序日志\" class=\"headerlink\" title=\"如何收集查看程序日志\"></a>如何收集查看程序日志</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li>Docker Engine<ul>\n<li>Install Docker<ul>\n<li>Mac上安装Docker: <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/</a></li>\n<li>CentOS上安装Docker Engine:<ul>\n<li><a href=\"https://docs.docker.com/engine/installation/linux/centos/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/linux/centos/</a></li>\n<li><a href=\"https://docs.docker.com/v1.13/engine/installation/linux/centos/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/v1.13/engine/installation/linux/centos/</a></li>\n</ul>\n</li>\n<li>Config Registry Mirror: <a href=\"https://yq.aliyun.com/articles/29941\" target=\"_blank\" rel=\"external\">https://yq.aliyun.com/articles/29941</a></li>\n</ul>\n</li>\n<li>User Guide<ul>\n<li>Build and Manage Image<ul>\n<li>Best Practices: <a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\n</ul>\n</li>\n<li>Network configuration<ul>\n<li>Docker container networking: <a href=\"https://docs.docker.com/engine/userguide/networking/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/userguide/networking/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Admin Guide<ul>\n<li>Limit a container’s resources: <a href=\"https://docs.docker.com/engine/admin/resource_constraints/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/resource_constraints/</a></li>\n<li>Logging: <a href=\"https://docs.docker.com/engine/admin/logging/view_container_logs/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/logging/view_container_logs/</a></li>\n<li>Using Ansible: <a href=\"https://docs.docker.com/engine/admin/ansible/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/ansible/</a></li>\n<li>Runtime Metrics: <a href=\"https://docs.docker.com/engine/admin/runmetrics/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/admin/runmetrics/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docker Registry<ul>\n<li><a href=\"https://docs.docker.com/v1.13/registry/deploying/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/v1.13/registry/deploying/</a></li>\n<li><a href=\"https://hub.docker.com/r/h3nrik/registry-ldap-auth/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/r/h3nrik/registry-ldap-auth/</a></li>\n<li><a href=\"https://github.com/kwk/docker-registry-setup\" target=\"_blank\" rel=\"external\">https://github.com/kwk/docker-registry-setup</a></li>\n<li>生成签名证书：<ul>\n<li><a href=\"http://www.akadia.com/services/ssh_test_certificate.html\" target=\"_blank\" rel=\"external\">http://www.akadia.com/services/ssh_test_certificate.html</a></li>\n<li><a href=\"https://my.oschina.net/aiguozhe/blog/121764\" target=\"_blank\" rel=\"external\">https://my.oschina.net/aiguozhe/blog/121764</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docker Swarm<ul>\n<li>Guides - Manage a Swarm: <a href=\"https://docs.docker.com/engine/swarm/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/swarm/</a></li>\n<li>Superseded products and tools: <a href=\"https://docs.docker.com/swarm/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/swarm/overview/</a></li>\n</ul>\n</li>\n<li>Docker Compose<ul>\n<li>Overview of Docker Compose: <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/compose/overview/</a></li>\n</ul>\n</li>\n<li>Docker Machine<ul>\n<li>Overview: <a href=\"https://docs.docker.com/machine/overview/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/machine/overview/</a></li>\n</ul>\n</li>\n<li>Docker Security</li>\n</ul>\n"},{"title":"应对业务增长，对MongoDB集群进行扩容的一种路径","date":"2016-11-01T05:21:18.000Z","_content":"\n\n> 本文以用户`feed`作为案例\n\n# MongoDB集群结构\n\n## 数据量较小\n\n采用MongoDB三节点副本集的方式构造集群\n\n![replica-set-primary-with-secondary-and-arbiter](https://cloud.githubusercontent.com/assets/286882/15322892/e004e45c-1c71-11e6-8255-c938c1c8e12a.png)\n\n## 数据量较大\n\n使用`sharding`方式扩展单个集群的容量\n\n![shardreplica](https://cloud.githubusercontent.com/assets/286882/15322822/80d4167e-1c71-11e6-996d-725800dd5531.jpg)\n\n## 数据量非常大\n\n不同时期的Feed数据写入到不同的MongoDB Cluster中，避免单个MongoDB集群规模过大带来各种运维上的问题\n\n![multiple_cluster](https://cloud.githubusercontent.com/assets/286882/15310929/c702c694-1c27-11e6-9d4e-f4fbfa4a5abb.jpg)\n\n- 每个MongoDB Cluster保存的数据包括：\n    - 元数据\n        - 时间范围：指定当前cluster保存那一段时间的feed信息\n    - Feed数据\n        - 使用一个collection保存所有用户的feed\n        - 这个collection的根据用户的user_id进行分片，适应写、读扩容场景\n- 客户端程序根据MongoDB Cluster的元数据将收到的Feed消息写入到对应的MongoDB Cluster\n- 客户端程序启动时从所有的MongoDB Cluster中加载元数据\n\n# Feed DB的结构\n\n`metadata`集合\n\n```json\n{\n    \"_id\": \"cluster_1\",\n    \"name\": \"cluster_1\",\n    \"start_date\": new Date(\"2016-05-01\"),\n    \"end_date\": new Date(\"2016-08-01\"),\n    \"creator_name\": \"ethan\",\n    \"created_at\": new Date(\"2016-05-01 00:00:00\")\n}\n```\n\n`feed`集合\n\n```json\n{\n    \"_id\": ObjectId(\"\"),\n    \"data_key\": \"e6755cfae343b6719cc2121e888b0a41\",\n    \"receiver_id\": 1000386,\n    \"sender_id\": 1000765,\n    \"event_time\": new Date(\"2016-05-01 10:00:00\"),\n    \"type\": 1,\n    \"data\": {\n        \"fabula_id\": 1000983\n    }\n}\n```\n\n`feed.data_key`用于根据业务对象查找对应`feed`记录的标识，主要用于删除场景，生成算法如下：\n\n- `feed.data_key = MMH3Hash(\"fabula_\" + $fabulaId)`\n\n`feed._id`的生成算法：\n\n- 同`ObjectID`的生成算法，包含`time`, `machine identifier`, `process id`, `counter`四部分，使用`feed.event_time`作为第一部分\n- `ObjectID`生成算法参考: [https://github.com/go-mgo/mgo/blob/v2/bson/bson.go](https://github.com/go-mgo/mgo/blob/v2/bson/bson.go)\n\n# 参考\n\n- [陌陌：日请求量过亿，谈陌陌的Feed服务优化之路](http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597071&idx=1&sn=cd8df9f8c52dfbfb54e65adbe19fae27&scene=0#wechat_redirect)\n- [几个大型网站的Feeds(Timeline)设计简单对比](http://www.tuicool.com/articles/BJRJja)\n- [新浪微博：大数据时代的feed流架构](http://www.infoq.com/cn/presentations/feed-stream-architecture-in-big-data-era)\n- [新浪微博：Feed架构-我们做错了什么](http://itindex.net/detail/52175-feed-%E6%9E%B6%E6%9E%84)\n- [新浪微博：Feed消息队列架构分析](http://timyang.net/data/feed-message-queue/)\n- [Pinterest：Pinterest的Feed架构与算法](http://ju.outofmemory.cn/entry/223817)\n- [Pinterest：Building a smarter home feed](https://engineering.pinterest.com/blog/building-smarter-home-feed)\n- [Pinterest：Building a scalable and available home feed](https://engineering.pinterest.com/blog/building-scalable-and-available-home-feed)\n- [Pinterest：Pinterest 的 Smart Feed 架构与算法](https://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&mid=2449231037&idx=1&sn=c2fc8a7d2832ea109e2abe4b773ff1f5&scene=1&srcid=0509fzQ02Jubcqnw7WPzp6IO)\n- [Pinterest：Pinnability: Machine learning in the home feed](https://engineering.pinterest.com/blog/pinnability-machine-learning-home-feed)\n","source":"_posts/a-path-for-expand-mongodb-cluster.md","raw":"---\ntitle: 应对业务增长，对MongoDB集群进行扩容的一种路径\ntags:\n  - mongodb\ncategories:\n  - 软件开发\ndate: 2016-11-01 13:21:18\n---\n\n\n> 本文以用户`feed`作为案例\n\n# MongoDB集群结构\n\n## 数据量较小\n\n采用MongoDB三节点副本集的方式构造集群\n\n![replica-set-primary-with-secondary-and-arbiter](https://cloud.githubusercontent.com/assets/286882/15322892/e004e45c-1c71-11e6-8255-c938c1c8e12a.png)\n\n## 数据量较大\n\n使用`sharding`方式扩展单个集群的容量\n\n![shardreplica](https://cloud.githubusercontent.com/assets/286882/15322822/80d4167e-1c71-11e6-996d-725800dd5531.jpg)\n\n## 数据量非常大\n\n不同时期的Feed数据写入到不同的MongoDB Cluster中，避免单个MongoDB集群规模过大带来各种运维上的问题\n\n![multiple_cluster](https://cloud.githubusercontent.com/assets/286882/15310929/c702c694-1c27-11e6-9d4e-f4fbfa4a5abb.jpg)\n\n- 每个MongoDB Cluster保存的数据包括：\n    - 元数据\n        - 时间范围：指定当前cluster保存那一段时间的feed信息\n    - Feed数据\n        - 使用一个collection保存所有用户的feed\n        - 这个collection的根据用户的user_id进行分片，适应写、读扩容场景\n- 客户端程序根据MongoDB Cluster的元数据将收到的Feed消息写入到对应的MongoDB Cluster\n- 客户端程序启动时从所有的MongoDB Cluster中加载元数据\n\n# Feed DB的结构\n\n`metadata`集合\n\n```json\n{\n    \"_id\": \"cluster_1\",\n    \"name\": \"cluster_1\",\n    \"start_date\": new Date(\"2016-05-01\"),\n    \"end_date\": new Date(\"2016-08-01\"),\n    \"creator_name\": \"ethan\",\n    \"created_at\": new Date(\"2016-05-01 00:00:00\")\n}\n```\n\n`feed`集合\n\n```json\n{\n    \"_id\": ObjectId(\"\"),\n    \"data_key\": \"e6755cfae343b6719cc2121e888b0a41\",\n    \"receiver_id\": 1000386,\n    \"sender_id\": 1000765,\n    \"event_time\": new Date(\"2016-05-01 10:00:00\"),\n    \"type\": 1,\n    \"data\": {\n        \"fabula_id\": 1000983\n    }\n}\n```\n\n`feed.data_key`用于根据业务对象查找对应`feed`记录的标识，主要用于删除场景，生成算法如下：\n\n- `feed.data_key = MMH3Hash(\"fabula_\" + $fabulaId)`\n\n`feed._id`的生成算法：\n\n- 同`ObjectID`的生成算法，包含`time`, `machine identifier`, `process id`, `counter`四部分，使用`feed.event_time`作为第一部分\n- `ObjectID`生成算法参考: [https://github.com/go-mgo/mgo/blob/v2/bson/bson.go](https://github.com/go-mgo/mgo/blob/v2/bson/bson.go)\n\n# 参考\n\n- [陌陌：日请求量过亿，谈陌陌的Feed服务优化之路](http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597071&idx=1&sn=cd8df9f8c52dfbfb54e65adbe19fae27&scene=0#wechat_redirect)\n- [几个大型网站的Feeds(Timeline)设计简单对比](http://www.tuicool.com/articles/BJRJja)\n- [新浪微博：大数据时代的feed流架构](http://www.infoq.com/cn/presentations/feed-stream-architecture-in-big-data-era)\n- [新浪微博：Feed架构-我们做错了什么](http://itindex.net/detail/52175-feed-%E6%9E%B6%E6%9E%84)\n- [新浪微博：Feed消息队列架构分析](http://timyang.net/data/feed-message-queue/)\n- [Pinterest：Pinterest的Feed架构与算法](http://ju.outofmemory.cn/entry/223817)\n- [Pinterest：Building a smarter home feed](https://engineering.pinterest.com/blog/building-smarter-home-feed)\n- [Pinterest：Building a scalable and available home feed](https://engineering.pinterest.com/blog/building-scalable-and-available-home-feed)\n- [Pinterest：Pinterest 的 Smart Feed 架构与算法](https://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&mid=2449231037&idx=1&sn=c2fc8a7d2832ea109e2abe4b773ff1f5&scene=1&srcid=0509fzQ02Jubcqnw7WPzp6IO)\n- [Pinterest：Pinnability: Machine learning in the home feed](https://engineering.pinterest.com/blog/pinnability-machine-learning-home-feed)\n","slug":"a-path-for-expand-mongodb-cluster","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50onens0003v7bfhywta6du","content":"<blockquote>\n<p>本文以用户<code>feed</code>作为案例</p>\n</blockquote>\n<h1 id=\"MongoDB集群结构\"><a href=\"#MongoDB集群结构\" class=\"headerlink\" title=\"MongoDB集群结构\"></a>MongoDB集群结构</h1><h2 id=\"数据量较小\"><a href=\"#数据量较小\" class=\"headerlink\" title=\"数据量较小\"></a>数据量较小</h2><p>采用MongoDB三节点副本集的方式构造集群</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15322892/e004e45c-1c71-11e6-8255-c938c1c8e12a.png\" alt=\"replica-set-primary-with-secondary-and-arbiter\"></p>\n<h2 id=\"数据量较大\"><a href=\"#数据量较大\" class=\"headerlink\" title=\"数据量较大\"></a>数据量较大</h2><p>使用<code>sharding</code>方式扩展单个集群的容量</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15322822/80d4167e-1c71-11e6-996d-725800dd5531.jpg\" alt=\"shardreplica\"></p>\n<h2 id=\"数据量非常大\"><a href=\"#数据量非常大\" class=\"headerlink\" title=\"数据量非常大\"></a>数据量非常大</h2><p>不同时期的Feed数据写入到不同的MongoDB Cluster中，避免单个MongoDB集群规模过大带来各种运维上的问题</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15310929/c702c694-1c27-11e6-9d4e-f4fbfa4a5abb.jpg\" alt=\"multiple_cluster\"></p>\n<ul>\n<li>每个MongoDB Cluster保存的数据包括：<ul>\n<li>元数据<ul>\n<li>时间范围：指定当前cluster保存那一段时间的feed信息</li>\n</ul>\n</li>\n<li>Feed数据<ul>\n<li>使用一个collection保存所有用户的feed</li>\n<li>这个collection的根据用户的user_id进行分片，适应写、读扩容场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客户端程序根据MongoDB Cluster的元数据将收到的Feed消息写入到对应的MongoDB Cluster</li>\n<li>客户端程序启动时从所有的MongoDB Cluster中加载元数据</li>\n</ul>\n<h1 id=\"Feed-DB的结构\"><a href=\"#Feed-DB的结构\" class=\"headerlink\" title=\"Feed DB的结构\"></a>Feed DB的结构</h1><p><code>metadata</code>集合</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cluster_1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"cluster_1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"start_date\"</span>: new Date(<span class=\"string\">\"2016-05-01\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"end_date\"</span>: new Date(<span class=\"string\">\"2016-08-01\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"creator_name\"</span>: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"created_at\"</span>: new Date(<span class=\"string\">\"2016-05-01 00:00:00\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>feed</code>集合</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: ObjectId(<span class=\"string\">\"\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"data_key\"</span>: <span class=\"string\">\"e6755cfae343b6719cc2121e888b0a41\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"receiver_id\"</span>: <span class=\"number\">1000386</span>,</div><div class=\"line\">    <span class=\"attr\">\"sender_id\"</span>: <span class=\"number\">1000765</span>,</div><div class=\"line\">    <span class=\"attr\">\"event_time\"</span>: new Date(<span class=\"string\">\"2016-05-01 10:00:00\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"fabula_id\"</span>: <span class=\"number\">1000983</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>feed.data_key</code>用于根据业务对象查找对应<code>feed</code>记录的标识，主要用于删除场景，生成算法如下：</p>\n<ul>\n<li><code>feed.data_key = MMH3Hash(&quot;fabula_&quot; + $fabulaId)</code></li>\n</ul>\n<p><code>feed._id</code>的生成算法：</p>\n<ul>\n<li>同<code>ObjectID</code>的生成算法，包含<code>time</code>, <code>machine identifier</code>, <code>process id</code>, <code>counter</code>四部分，使用<code>feed.event_time</code>作为第一部分</li>\n<li><code>ObjectID</code>生成算法参考: <a href=\"https://github.com/go-mgo/mgo/blob/v2/bson/bson.go\" target=\"_blank\" rel=\"external\">https://github.com/go-mgo/mgo/blob/v2/bson/bson.go</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597071&amp;idx=1&amp;sn=cd8df9f8c52dfbfb54e65adbe19fae27&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">陌陌：日请求量过亿，谈陌陌的Feed服务优化之路</a></li>\n<li><a href=\"http://www.tuicool.com/articles/BJRJja\" target=\"_blank\" rel=\"external\">几个大型网站的Feeds(Timeline)设计简单对比</a></li>\n<li><a href=\"http://www.infoq.com/cn/presentations/feed-stream-architecture-in-big-data-era\" target=\"_blank\" rel=\"external\">新浪微博：大数据时代的feed流架构</a></li>\n<li><a href=\"http://itindex.net/detail/52175-feed-%E6%9E%B6%E6%9E%84\" target=\"_blank\" rel=\"external\">新浪微博：Feed架构-我们做错了什么</a></li>\n<li><a href=\"http://timyang.net/data/feed-message-queue/\" target=\"_blank\" rel=\"external\">新浪微博：Feed消息队列架构分析</a></li>\n<li><a href=\"http://ju.outofmemory.cn/entry/223817\" target=\"_blank\" rel=\"external\">Pinterest：Pinterest的Feed架构与算法</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/building-smarter-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Building a smarter home feed</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/building-scalable-and-available-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Building a scalable and available home feed</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;mid=2449231037&amp;idx=1&amp;sn=c2fc8a7d2832ea109e2abe4b773ff1f5&amp;scene=1&amp;srcid=0509fzQ02Jubcqnw7WPzp6IO\" target=\"_blank\" rel=\"external\">Pinterest：Pinterest 的 Smart Feed 架构与算法</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/pinnability-machine-learning-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Pinnability: Machine learning in the home feed</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文以用户<code>feed</code>作为案例</p>\n</blockquote>\n<h1 id=\"MongoDB集群结构\"><a href=\"#MongoDB集群结构\" class=\"headerlink\" title=\"MongoDB集群结构\"></a>MongoDB集群结构</h1><h2 id=\"数据量较小\"><a href=\"#数据量较小\" class=\"headerlink\" title=\"数据量较小\"></a>数据量较小</h2><p>采用MongoDB三节点副本集的方式构造集群</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15322892/e004e45c-1c71-11e6-8255-c938c1c8e12a.png\" alt=\"replica-set-primary-with-secondary-and-arbiter\"></p>\n<h2 id=\"数据量较大\"><a href=\"#数据量较大\" class=\"headerlink\" title=\"数据量较大\"></a>数据量较大</h2><p>使用<code>sharding</code>方式扩展单个集群的容量</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15322822/80d4167e-1c71-11e6-996d-725800dd5531.jpg\" alt=\"shardreplica\"></p>\n<h2 id=\"数据量非常大\"><a href=\"#数据量非常大\" class=\"headerlink\" title=\"数据量非常大\"></a>数据量非常大</h2><p>不同时期的Feed数据写入到不同的MongoDB Cluster中，避免单个MongoDB集群规模过大带来各种运维上的问题</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/286882/15310929/c702c694-1c27-11e6-9d4e-f4fbfa4a5abb.jpg\" alt=\"multiple_cluster\"></p>\n<ul>\n<li>每个MongoDB Cluster保存的数据包括：<ul>\n<li>元数据<ul>\n<li>时间范围：指定当前cluster保存那一段时间的feed信息</li>\n</ul>\n</li>\n<li>Feed数据<ul>\n<li>使用一个collection保存所有用户的feed</li>\n<li>这个collection的根据用户的user_id进行分片，适应写、读扩容场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客户端程序根据MongoDB Cluster的元数据将收到的Feed消息写入到对应的MongoDB Cluster</li>\n<li>客户端程序启动时从所有的MongoDB Cluster中加载元数据</li>\n</ul>\n<h1 id=\"Feed-DB的结构\"><a href=\"#Feed-DB的结构\" class=\"headerlink\" title=\"Feed DB的结构\"></a>Feed DB的结构</h1><p><code>metadata</code>集合</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cluster_1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"cluster_1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"start_date\"</span>: new Date(<span class=\"string\">\"2016-05-01\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"end_date\"</span>: new Date(<span class=\"string\">\"2016-08-01\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"creator_name\"</span>: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"created_at\"</span>: new Date(<span class=\"string\">\"2016-05-01 00:00:00\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>feed</code>集合</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: ObjectId(<span class=\"string\">\"\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"data_key\"</span>: <span class=\"string\">\"e6755cfae343b6719cc2121e888b0a41\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"receiver_id\"</span>: <span class=\"number\">1000386</span>,</div><div class=\"line\">    <span class=\"attr\">\"sender_id\"</span>: <span class=\"number\">1000765</span>,</div><div class=\"line\">    <span class=\"attr\">\"event_time\"</span>: new Date(<span class=\"string\">\"2016-05-01 10:00:00\"</span>),</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"fabula_id\"</span>: <span class=\"number\">1000983</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>feed.data_key</code>用于根据业务对象查找对应<code>feed</code>记录的标识，主要用于删除场景，生成算法如下：</p>\n<ul>\n<li><code>feed.data_key = MMH3Hash(&quot;fabula_&quot; + $fabulaId)</code></li>\n</ul>\n<p><code>feed._id</code>的生成算法：</p>\n<ul>\n<li>同<code>ObjectID</code>的生成算法，包含<code>time</code>, <code>machine identifier</code>, <code>process id</code>, <code>counter</code>四部分，使用<code>feed.event_time</code>作为第一部分</li>\n<li><code>ObjectID</code>生成算法参考: <a href=\"https://github.com/go-mgo/mgo/blob/v2/bson/bson.go\" target=\"_blank\" rel=\"external\">https://github.com/go-mgo/mgo/blob/v2/bson/bson.go</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597071&amp;idx=1&amp;sn=cd8df9f8c52dfbfb54e65adbe19fae27&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">陌陌：日请求量过亿，谈陌陌的Feed服务优化之路</a></li>\n<li><a href=\"http://www.tuicool.com/articles/BJRJja\" target=\"_blank\" rel=\"external\">几个大型网站的Feeds(Timeline)设计简单对比</a></li>\n<li><a href=\"http://www.infoq.com/cn/presentations/feed-stream-architecture-in-big-data-era\" target=\"_blank\" rel=\"external\">新浪微博：大数据时代的feed流架构</a></li>\n<li><a href=\"http://itindex.net/detail/52175-feed-%E6%9E%B6%E6%9E%84\" target=\"_blank\" rel=\"external\">新浪微博：Feed架构-我们做错了什么</a></li>\n<li><a href=\"http://timyang.net/data/feed-message-queue/\" target=\"_blank\" rel=\"external\">新浪微博：Feed消息队列架构分析</a></li>\n<li><a href=\"http://ju.outofmemory.cn/entry/223817\" target=\"_blank\" rel=\"external\">Pinterest：Pinterest的Feed架构与算法</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/building-smarter-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Building a smarter home feed</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/building-scalable-and-available-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Building a scalable and available home feed</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4OTk5OTQzMg==&amp;mid=2449231037&amp;idx=1&amp;sn=c2fc8a7d2832ea109e2abe4b773ff1f5&amp;scene=1&amp;srcid=0509fzQ02Jubcqnw7WPzp6IO\" target=\"_blank\" rel=\"external\">Pinterest：Pinterest 的 Smart Feed 架构与算法</a></li>\n<li><a href=\"https://engineering.pinterest.com/blog/pinnability-machine-learning-home-feed\" target=\"_blank\" rel=\"external\">Pinterest：Pinnability: Machine learning in the home feed</a></li>\n</ul>\n"},{"title":"收集的论文","date":"2016-08-16T15:49:25.000Z","_content":"\n_持续补充中..._\n\n# 安全(Security)\n\n- **已读** [Green Lights Forever: Analyzing the Security of Traffic Infrastructure](https://www.usenix.org/system/files/conference/woot14/woot14-ghena.pdf)：密歇根大学团队在这篇文章中介绍了，如何利用无限网络安全漏洞为入口攻破交通信号灯系统。并总结出嵌入式系统在新环境下防御攻击的方法。对于发现和解决其它类型的嵌入式系统的安全问题，也十分有参考意义。\n","source":"_posts/collected-papers.md","raw":"---\ntitle: 收集的论文\ntags:\n  - 阅读\ncategories:\n  - 阅读\ndate: 2016-08-16 23:49:25\n---\n\n_持续补充中..._\n\n# 安全(Security)\n\n- **已读** [Green Lights Forever: Analyzing the Security of Traffic Infrastructure](https://www.usenix.org/system/files/conference/woot14/woot14-ghena.pdf)：密歇根大学团队在这篇文章中介绍了，如何利用无限网络安全漏洞为入口攻破交通信号灯系统。并总结出嵌入式系统在新环境下防御攻击的方法。对于发现和解决其它类型的嵌入式系统的安全问题，也十分有参考意义。\n","slug":"collected-papers","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50onenz0007v7bfrr6asldh","content":"<p><em>持续补充中…</em></p>\n<h1 id=\"安全-Security\"><a href=\"#安全-Security\" class=\"headerlink\" title=\"安全(Security)\"></a>安全(Security)</h1><ul>\n<li><strong>已读</strong> <a href=\"https://www.usenix.org/system/files/conference/woot14/woot14-ghena.pdf\" target=\"_blank\" rel=\"external\">Green Lights Forever: Analyzing the Security of Traffic Infrastructure</a>：密歇根大学团队在这篇文章中介绍了，如何利用无限网络安全漏洞为入口攻破交通信号灯系统。并总结出嵌入式系统在新环境下防御攻击的方法。对于发现和解决其它类型的嵌入式系统的安全问题，也十分有参考意义。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><em>持续补充中…</em></p>\n<h1 id=\"安全-Security\"><a href=\"#安全-Security\" class=\"headerlink\" title=\"安全(Security)\"></a>安全(Security)</h1><ul>\n<li><strong>已读</strong> <a href=\"https://www.usenix.org/system/files/conference/woot14/woot14-ghena.pdf\" target=\"_blank\" rel=\"external\">Green Lights Forever: Analyzing the Security of Traffic Infrastructure</a>：密歇根大学团队在这篇文章中介绍了，如何利用无限网络安全漏洞为入口攻破交通信号灯系统。并总结出嵌入式系统在新环境下防御攻击的方法。对于发现和解决其它类型的嵌入式系统的安全问题，也十分有参考意义。</li>\n</ul>\n"},{"title":"如何加强编码能力","date":"2017-07-12T07:26:55.000Z","_content":"\n\n{% asset_img cracking_the_coding_skills.png %}\n\n**解决问题的步骤**\n\n1. 听：仔细聆听问题描述，完整获取信息\n2. 举例：注意特殊用例、边界场景\n3. 快速解决：尽快找到解决方案，不一定要最优。想想最优方案是什么样子的，你的最终解决方案可能处于当前方案、最优方案之间\n4. 优化：优化第一版解决方案\n  - BUD优化方法\n    - 瓶颈，Bottlenecks\n    - 不必要的工作，Unnecessary work\n    - 重复的工作，Duplicated work\n  - Four Algorithm Approaches\n    - **Pattern Matching**: What problems is this similar to?\n    - **Simplify & Generalize**: Tweak and solve simpler problem.\n    - **Base Case & Build**: Does it sound recursive-ish?\n    - **Data Structure Brainstorm**: Try various data structures.\n  - 或者尝试下面的方法\n    - Look for any unused info\n    - Use a fresh example\n    - Solve it \"incorrectly\"\n    - Make time vs. space tradeoff\n    - Precompute or do upfront work\n    - Try a hash table or another data structure\n5. 重新审视解决方案，确保在编码前理解每个细节\n6. 实现\n  - Write beautiful code\n    - Modularize your code from the beginning\n    - Refactor to clean up anything that isn't beautiful\n7. 测试\n  - FIRST Analyze\n    - What's it doing? Why?\n    - Anything that looks wired?\n    - Error hot spots\n  - THEN use test cases\n    - Small test cases\n    - Edge cases\n    - Bigger test cases\n  - When you find bugs, fix them carefully.\n\n**需要掌握的基础知识**\n\n1. 数据结构：hash tables, linked lists, stacks, queues, trees, tries, graphs, vectors, heaps\n2. 算法：quick sort, merge sort, binary search, breadth-first search, depth-first search\n3. 基础概念：Big-O Time, Big-O Space, Recursion & Memoization, Probability, Bit Manipulation\n\n# 参考\n\n- [Cracking the Coding interview](https://www.slideshare.net/gayle2/cracking-the-coding-interview-college)\n- [Architecture of Tech Interviews](https://www.slideshare.net/gayle2/architecture-of-tech-interviews)\n- [在AWS面试是怎样一种体验](https://mp.weixin.qq.com/s?__biz=MzA4ODMwMDcxMQ==&mid=2650892256&idx=1&sn=71e0987c7c61ca25c58f586b60de3305)\n- [Amazon Leadership Principles](https://www.amazon.jobs/principles)\n","source":"_posts/cracking-the-coding-skill.md","raw":"---\ntitle: 如何加强编码能力\ntags:\n  - coding\ncategories:\n  - 软件开发\ndate: 2017-07-12 15:26:55\n---\n\n\n{% asset_img cracking_the_coding_skills.png %}\n\n**解决问题的步骤**\n\n1. 听：仔细聆听问题描述，完整获取信息\n2. 举例：注意特殊用例、边界场景\n3. 快速解决：尽快找到解决方案，不一定要最优。想想最优方案是什么样子的，你的最终解决方案可能处于当前方案、最优方案之间\n4. 优化：优化第一版解决方案\n  - BUD优化方法\n    - 瓶颈，Bottlenecks\n    - 不必要的工作，Unnecessary work\n    - 重复的工作，Duplicated work\n  - Four Algorithm Approaches\n    - **Pattern Matching**: What problems is this similar to?\n    - **Simplify & Generalize**: Tweak and solve simpler problem.\n    - **Base Case & Build**: Does it sound recursive-ish?\n    - **Data Structure Brainstorm**: Try various data structures.\n  - 或者尝试下面的方法\n    - Look for any unused info\n    - Use a fresh example\n    - Solve it \"incorrectly\"\n    - Make time vs. space tradeoff\n    - Precompute or do upfront work\n    - Try a hash table or another data structure\n5. 重新审视解决方案，确保在编码前理解每个细节\n6. 实现\n  - Write beautiful code\n    - Modularize your code from the beginning\n    - Refactor to clean up anything that isn't beautiful\n7. 测试\n  - FIRST Analyze\n    - What's it doing? Why?\n    - Anything that looks wired?\n    - Error hot spots\n  - THEN use test cases\n    - Small test cases\n    - Edge cases\n    - Bigger test cases\n  - When you find bugs, fix them carefully.\n\n**需要掌握的基础知识**\n\n1. 数据结构：hash tables, linked lists, stacks, queues, trees, tries, graphs, vectors, heaps\n2. 算法：quick sort, merge sort, binary search, breadth-first search, depth-first search\n3. 基础概念：Big-O Time, Big-O Space, Recursion & Memoization, Probability, Bit Manipulation\n\n# 参考\n\n- [Cracking the Coding interview](https://www.slideshare.net/gayle2/cracking-the-coding-interview-college)\n- [Architecture of Tech Interviews](https://www.slideshare.net/gayle2/architecture-of-tech-interviews)\n- [在AWS面试是怎样一种体验](https://mp.weixin.qq.com/s?__biz=MzA4ODMwMDcxMQ==&mid=2650892256&idx=1&sn=71e0987c7c61ca25c58f586b60de3305)\n- [Amazon Leadership Principles](https://www.amazon.jobs/principles)\n","slug":"cracking-the-coding-skill","published":1,"updated":"2017-07-12T07:26:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneo10008v7bf2lz8xxby","content":"<img src=\"/2017/07/12/cracking-the-coding-skill/cracking_the_coding_skills.png\" alt=\"cracking_the_coding_skills.png\" title=\"\">\n<p><strong>解决问题的步骤</strong></p>\n<ol>\n<li>听：仔细聆听问题描述，完整获取信息</li>\n<li>举例：注意特殊用例、边界场景</li>\n<li>快速解决：尽快找到解决方案，不一定要最优。想想最优方案是什么样子的，你的最终解决方案可能处于当前方案、最优方案之间</li>\n<li>优化：优化第一版解决方案<ul>\n<li>BUD优化方法<ul>\n<li>瓶颈，Bottlenecks</li>\n<li>不必要的工作，Unnecessary work</li>\n<li>重复的工作，Duplicated work</li>\n</ul>\n</li>\n<li>Four Algorithm Approaches<ul>\n<li><strong>Pattern Matching</strong>: What problems is this similar to?</li>\n<li><strong>Simplify &amp; Generalize</strong>: Tweak and solve simpler problem.</li>\n<li><strong>Base Case &amp; Build</strong>: Does it sound recursive-ish?</li>\n<li><strong>Data Structure Brainstorm</strong>: Try various data structures.</li>\n</ul>\n</li>\n<li>或者尝试下面的方法<ul>\n<li>Look for any unused info</li>\n<li>Use a fresh example</li>\n<li>Solve it “incorrectly”</li>\n<li>Make time vs. space tradeoff</li>\n<li>Precompute or do upfront work</li>\n<li>Try a hash table or another data structure</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重新审视解决方案，确保在编码前理解每个细节</li>\n<li>实现<ul>\n<li>Write beautiful code<ul>\n<li>Modularize your code from the beginning</li>\n<li>Refactor to clean up anything that isn’t beautiful</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>测试<ul>\n<li>FIRST Analyze<ul>\n<li>What’s it doing? Why?</li>\n<li>Anything that looks wired?</li>\n<li>Error hot spots</li>\n</ul>\n</li>\n<li>THEN use test cases<ul>\n<li>Small test cases</li>\n<li>Edge cases</li>\n<li>Bigger test cases</li>\n</ul>\n</li>\n<li>When you find bugs, fix them carefully.</li>\n</ul>\n</li>\n</ol>\n<p><strong>需要掌握的基础知识</strong></p>\n<ol>\n<li>数据结构：hash tables, linked lists, stacks, queues, trees, tries, graphs, vectors, heaps</li>\n<li>算法：quick sort, merge sort, binary search, breadth-first search, depth-first search</li>\n<li>基础概念：Big-O Time, Big-O Space, Recursion &amp; Memoization, Probability, Bit Manipulation</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.slideshare.net/gayle2/cracking-the-coding-interview-college\" target=\"_blank\" rel=\"external\">Cracking the Coding interview</a></li>\n<li><a href=\"https://www.slideshare.net/gayle2/architecture-of-tech-interviews\" target=\"_blank\" rel=\"external\">Architecture of Tech Interviews</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODMwMDcxMQ==&amp;mid=2650892256&amp;idx=1&amp;sn=71e0987c7c61ca25c58f586b60de3305\" target=\"_blank\" rel=\"external\">在AWS面试是怎样一种体验</a></li>\n<li><a href=\"https://www.amazon.jobs/principles\" target=\"_blank\" rel=\"external\">Amazon Leadership Principles</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2017/07/12/cracking-the-coding-skill/cracking_the_coding_skills.png\" alt=\"cracking_the_coding_skills.png\" title=\"\">\n<p><strong>解决问题的步骤</strong></p>\n<ol>\n<li>听：仔细聆听问题描述，完整获取信息</li>\n<li>举例：注意特殊用例、边界场景</li>\n<li>快速解决：尽快找到解决方案，不一定要最优。想想最优方案是什么样子的，你的最终解决方案可能处于当前方案、最优方案之间</li>\n<li>优化：优化第一版解决方案<ul>\n<li>BUD优化方法<ul>\n<li>瓶颈，Bottlenecks</li>\n<li>不必要的工作，Unnecessary work</li>\n<li>重复的工作，Duplicated work</li>\n</ul>\n</li>\n<li>Four Algorithm Approaches<ul>\n<li><strong>Pattern Matching</strong>: What problems is this similar to?</li>\n<li><strong>Simplify &amp; Generalize</strong>: Tweak and solve simpler problem.</li>\n<li><strong>Base Case &amp; Build</strong>: Does it sound recursive-ish?</li>\n<li><strong>Data Structure Brainstorm</strong>: Try various data structures.</li>\n</ul>\n</li>\n<li>或者尝试下面的方法<ul>\n<li>Look for any unused info</li>\n<li>Use a fresh example</li>\n<li>Solve it “incorrectly”</li>\n<li>Make time vs. space tradeoff</li>\n<li>Precompute or do upfront work</li>\n<li>Try a hash table or another data structure</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重新审视解决方案，确保在编码前理解每个细节</li>\n<li>实现<ul>\n<li>Write beautiful code<ul>\n<li>Modularize your code from the beginning</li>\n<li>Refactor to clean up anything that isn’t beautiful</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>测试<ul>\n<li>FIRST Analyze<ul>\n<li>What’s it doing? Why?</li>\n<li>Anything that looks wired?</li>\n<li>Error hot spots</li>\n</ul>\n</li>\n<li>THEN use test cases<ul>\n<li>Small test cases</li>\n<li>Edge cases</li>\n<li>Bigger test cases</li>\n</ul>\n</li>\n<li>When you find bugs, fix them carefully.</li>\n</ul>\n</li>\n</ol>\n<p><strong>需要掌握的基础知识</strong></p>\n<ol>\n<li>数据结构：hash tables, linked lists, stacks, queues, trees, tries, graphs, vectors, heaps</li>\n<li>算法：quick sort, merge sort, binary search, breadth-first search, depth-first search</li>\n<li>基础概念：Big-O Time, Big-O Space, Recursion &amp; Memoization, Probability, Bit Manipulation</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.slideshare.net/gayle2/cracking-the-coding-interview-college\" target=\"_blank\" rel=\"external\">Cracking the Coding interview</a></li>\n<li><a href=\"https://www.slideshare.net/gayle2/architecture-of-tech-interviews\" target=\"_blank\" rel=\"external\">Architecture of Tech Interviews</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODMwMDcxMQ==&amp;mid=2650892256&amp;idx=1&amp;sn=71e0987c7c61ca25c58f586b60de3305\" target=\"_blank\" rel=\"external\">在AWS面试是怎样一种体验</a></li>\n<li><a href=\"https://www.amazon.jobs/principles\" target=\"_blank\" rel=\"external\">Amazon Leadership Principles</a></li>\n</ul>\n"},{"title":"在Ubuntu Server 14.04上配置一个最小的MongoDB副本集","date":"2016-11-01T04:59:40.000Z","_content":"\n\n# 在Ubuntu Server 14.04上安装MongoDB 3.2.6\n\n- Import the public key used by the package management system\n    - `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927`\n- Create a list file for MongoDB\n    - `echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list`\n- Reload local package database\n    - `sudo apt-get update`\n- Install the MongoDB packages\n    - `sudo apt-get install -y mongodb-org=3.2.6 mongodb-org-server=3.2.6 mongodb-org-shell=3.2.6 mongodb-org-mongos=3.2.6 mongodb-org-tools=3.2.6`\n- Pin a specific version of MongoDB\n```sh\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n```\n- 修改MongoDB的配置文件`/etc/mongod.conf`\n    - 修改`net.bindIp`为`0.0.0.0`\n    - 增加配置\n    ```yaml\n    storage:\n      directoryPerDB: true\n    ```\n- 验证MongoDB是否成功安装\n    - `sudo service mongod restart`\n    - `mongo`\n- Disable Transparent Huge Pages，参考[这里](https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/)\n    - Create the init.d script\n    ```sh\n    #!/bin/sh\n    ### BEGIN INIT INFO\n    # Provides:          disable-transparent-hugepages\n    # Required-Start:    $local_fs\n    # Required-Stop:\n    # X-Start-Before:    mongod mongodb-mms-automation-agent\n    # Default-Start:     2 3 4 5\n    # Default-Stop:      0 1 6\n    # Short-Description: Disable Linux transparent huge pages\n    # Description:       Disable Linux transparent huge pages, to improve\n    #                    database performance.\n    ### END INIT INFO\n\n    case $1 in\n      start)\n        if [ -d /sys/kernel/mm/transparent_hugepage ]; then\n          thp_path=/sys/kernel/mm/transparent_hugepage\n        elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then\n          thp_path=/sys/kernel/mm/redhat_transparent_hugepage\n        else\n          return 0\n        fi\n\n        echo 'never' > ${thp_path}/enabled\n        echo 'never' > ${thp_path}/defrag\n\n        unset thp_path\n        ;;\n    esac\n    ```\n    - Make it executable\n    ```sh\n    sudo chmod 755 /etc/init.d/disable-transparent-hugepages\n    ```\n    - Configure your operating system to run it on boot\n    ```sh\n    sudo update-rc.d disable-transparent-hugepages defaults\n    ```\n    - 重启OS\n\n# 配置MongoDB ReplicaSet副本集\n\n副本集结构：\n\n![](https://docs.mongodb.com/manual/_images/replica-set-primary-with-secondary-and-arbiter.png)\n\n- 2数据节点，1个仲裁节点\n\n## 配置步骤\n\n- 准备2台高配ec2（假设为A、B）和1台低配ec2（假设为C）\n- 在A、B、C上参考上一节的步骤安装MongoDB\n- 在A的Shell中执行`mongo`命令，然后创建超级管理员\n```javascript\n$ mongo\n> admin = db.getSiblingDB(\"admin\");\n> admin.createUser({ user: \"ethan\", pwd: \"{ethan的密码}\", roles: [{ role: \"root\", db: \"admin\" }] });\n```\n- 准备keyfile\n    - 生成keyfile\n        - `openssl rand -base64 755 > rs0.key`\n    - 上传`rs0.key`到A、B、C的`/etc`目录\n    - 修改`rs0.key`的权限和所有者\n        - `chmod 400 rs0.key`\n        - `chown mongodb:mongodb /etc/rs0.key`\n- 修改A、B的配置文件`/etc/mongod.conf`\n    - 增加配置\n    ```yaml\n    security:\n      keyFile: \"/etc/rs0.key\"\n      authorization: enabled\n\n    replication:\n      replSetName: rs0\n    ```\n- 修改C的配置文件`/etc/mongod.conf`\n    - 增加配置\n    ```yaml\n    security:\n      keyFile: \"/etc/rs0.key\"\n      authorization: enabled\n\n    replication:\n      replSetName: rs0\n    ```\n    - 修改配置\n    ```yaml\n    storage:\n      journal:\n        enabled: false\n    ```\n- 重启A、B、C上的`mongod`实例\n- 配置集群\n    - 连接A上的`mongod`实例\n    ```sh\n    $ mongo -u ethan -p {ethan的密码} --authenticationDatabase admin\n    ```\n    - 通过下面的命令配置ReplicaSet：\n    ```javascript\n    > rs.initiate()\n    > cfg = rs.conf()\n    > cfg.members[0].host = \"{A的IP}:27017\"\n    > rs.reconfig(cfg)\n    > rs.add(\"{B的IP}\")\n    > rs.addArb(\"{C的IP}\")\n\n    // 等待几秒...\n    > rs.status()  // 检查副本集状态\n    ```\n- 为副本集客户端创建访问账户\n```javascript\n> use {dbname};\n> db.createUser({ user: \"{账户名}\", pwd: \"{账户密码}\", roles: [{ role: \"readWrite\", db: \"{dbname}\" }] });\n```\n\n# 参考\n\n- [Install MongoDB on Ubuntu](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)， 注意：\n    - 安装过程需要指定MongoDB的安装版本\n    - 锁定MongoDB的安装版本，避免执行`apt-get`升级命令的时候连带升级MongoDB\n- [Enforce Keyfile Access Control in a Replica Set](https://docs.mongodb.com/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/)\n    - Security between members of the replica set using Internal Authentication\n    - Security between connecting clients and the replica set using User Access Controls\n- [MongoDB configuration file options](https://docs.mongodb.com/manual/reference/configuration-options/#core-options)\n","source":"_posts/config-smallest-mongodb-cluster-on-ubuntu-14-04.md","raw":"---\ntitle: 在Ubuntu Server 14.04上配置一个最小的MongoDB副本集\ntags:\n  - mongodb\ncategories:\n  - 软件开发\ndate: 2016-11-01 12:59:40\n---\n\n\n# 在Ubuntu Server 14.04上安装MongoDB 3.2.6\n\n- Import the public key used by the package management system\n    - `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927`\n- Create a list file for MongoDB\n    - `echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list`\n- Reload local package database\n    - `sudo apt-get update`\n- Install the MongoDB packages\n    - `sudo apt-get install -y mongodb-org=3.2.6 mongodb-org-server=3.2.6 mongodb-org-shell=3.2.6 mongodb-org-mongos=3.2.6 mongodb-org-tools=3.2.6`\n- Pin a specific version of MongoDB\n```sh\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n```\n- 修改MongoDB的配置文件`/etc/mongod.conf`\n    - 修改`net.bindIp`为`0.0.0.0`\n    - 增加配置\n    ```yaml\n    storage:\n      directoryPerDB: true\n    ```\n- 验证MongoDB是否成功安装\n    - `sudo service mongod restart`\n    - `mongo`\n- Disable Transparent Huge Pages，参考[这里](https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/)\n    - Create the init.d script\n    ```sh\n    #!/bin/sh\n    ### BEGIN INIT INFO\n    # Provides:          disable-transparent-hugepages\n    # Required-Start:    $local_fs\n    # Required-Stop:\n    # X-Start-Before:    mongod mongodb-mms-automation-agent\n    # Default-Start:     2 3 4 5\n    # Default-Stop:      0 1 6\n    # Short-Description: Disable Linux transparent huge pages\n    # Description:       Disable Linux transparent huge pages, to improve\n    #                    database performance.\n    ### END INIT INFO\n\n    case $1 in\n      start)\n        if [ -d /sys/kernel/mm/transparent_hugepage ]; then\n          thp_path=/sys/kernel/mm/transparent_hugepage\n        elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then\n          thp_path=/sys/kernel/mm/redhat_transparent_hugepage\n        else\n          return 0\n        fi\n\n        echo 'never' > ${thp_path}/enabled\n        echo 'never' > ${thp_path}/defrag\n\n        unset thp_path\n        ;;\n    esac\n    ```\n    - Make it executable\n    ```sh\n    sudo chmod 755 /etc/init.d/disable-transparent-hugepages\n    ```\n    - Configure your operating system to run it on boot\n    ```sh\n    sudo update-rc.d disable-transparent-hugepages defaults\n    ```\n    - 重启OS\n\n# 配置MongoDB ReplicaSet副本集\n\n副本集结构：\n\n![](https://docs.mongodb.com/manual/_images/replica-set-primary-with-secondary-and-arbiter.png)\n\n- 2数据节点，1个仲裁节点\n\n## 配置步骤\n\n- 准备2台高配ec2（假设为A、B）和1台低配ec2（假设为C）\n- 在A、B、C上参考上一节的步骤安装MongoDB\n- 在A的Shell中执行`mongo`命令，然后创建超级管理员\n```javascript\n$ mongo\n> admin = db.getSiblingDB(\"admin\");\n> admin.createUser({ user: \"ethan\", pwd: \"{ethan的密码}\", roles: [{ role: \"root\", db: \"admin\" }] });\n```\n- 准备keyfile\n    - 生成keyfile\n        - `openssl rand -base64 755 > rs0.key`\n    - 上传`rs0.key`到A、B、C的`/etc`目录\n    - 修改`rs0.key`的权限和所有者\n        - `chmod 400 rs0.key`\n        - `chown mongodb:mongodb /etc/rs0.key`\n- 修改A、B的配置文件`/etc/mongod.conf`\n    - 增加配置\n    ```yaml\n    security:\n      keyFile: \"/etc/rs0.key\"\n      authorization: enabled\n\n    replication:\n      replSetName: rs0\n    ```\n- 修改C的配置文件`/etc/mongod.conf`\n    - 增加配置\n    ```yaml\n    security:\n      keyFile: \"/etc/rs0.key\"\n      authorization: enabled\n\n    replication:\n      replSetName: rs0\n    ```\n    - 修改配置\n    ```yaml\n    storage:\n      journal:\n        enabled: false\n    ```\n- 重启A、B、C上的`mongod`实例\n- 配置集群\n    - 连接A上的`mongod`实例\n    ```sh\n    $ mongo -u ethan -p {ethan的密码} --authenticationDatabase admin\n    ```\n    - 通过下面的命令配置ReplicaSet：\n    ```javascript\n    > rs.initiate()\n    > cfg = rs.conf()\n    > cfg.members[0].host = \"{A的IP}:27017\"\n    > rs.reconfig(cfg)\n    > rs.add(\"{B的IP}\")\n    > rs.addArb(\"{C的IP}\")\n\n    // 等待几秒...\n    > rs.status()  // 检查副本集状态\n    ```\n- 为副本集客户端创建访问账户\n```javascript\n> use {dbname};\n> db.createUser({ user: \"{账户名}\", pwd: \"{账户密码}\", roles: [{ role: \"readWrite\", db: \"{dbname}\" }] });\n```\n\n# 参考\n\n- [Install MongoDB on Ubuntu](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)， 注意：\n    - 安装过程需要指定MongoDB的安装版本\n    - 锁定MongoDB的安装版本，避免执行`apt-get`升级命令的时候连带升级MongoDB\n- [Enforce Keyfile Access Control in a Replica Set](https://docs.mongodb.com/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/)\n    - Security between members of the replica set using Internal Authentication\n    - Security between connecting clients and the replica set using User Access Controls\n- [MongoDB configuration file options](https://docs.mongodb.com/manual/reference/configuration-options/#core-options)\n","slug":"config-smallest-mongodb-cluster-on-ubuntu-14-04","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneo50009v7bfg0kdy2qp","content":"<h1 id=\"在Ubuntu-Server-14-04上安装MongoDB-3-2-6\"><a href=\"#在Ubuntu-Server-14-04上安装MongoDB-3-2-6\" class=\"headerlink\" title=\"在Ubuntu Server 14.04上安装MongoDB 3.2.6\"></a>在Ubuntu Server 14.04上安装MongoDB 3.2.6</h1><ul>\n<li>Import the public key used by the package management system<ul>\n<li><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</code></li>\n</ul>\n</li>\n<li>Create a list file for MongoDB<ul>\n<li><code>echo &quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list</code></li>\n</ul>\n</li>\n<li>Reload local package database<ul>\n<li><code>sudo apt-get update</code></li>\n</ul>\n</li>\n<li>Install the MongoDB packages<ul>\n<li><code>sudo apt-get install -y mongodb-org=3.2.6 mongodb-org-server=3.2.6 mongodb-org-shell=3.2.6 mongodb-org-mongos=3.2.6 mongodb-org-tools=3.2.6</code></li>\n</ul>\n</li>\n<li><p>Pin a specific version of MongoDB</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-server hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-shell hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-mongos hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-tools hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改MongoDB的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li>修改<code>net.bindIp</code>为<code>0.0.0.0</code></li>\n<li>增加配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">storage:</span></div><div class=\"line\"><span class=\"attr\">  directoryPerDB:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>验证MongoDB是否成功安装</p>\n<ul>\n<li><code>sudo service mongod restart</code></li>\n<li><code>mongo</code></li>\n</ul>\n</li>\n<li><p>Disable Transparent Huge Pages，参考<a href=\"https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\" target=\"_blank\" rel=\"external\">这里</a></p>\n<ul>\n<li><p>Create the init.d script</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          disable-transparent-hugepages</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:</span></div><div class=\"line\"><span class=\"comment\"># X-Start-Before:    mongod mongodb-mms-automation-agent</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: Disable Linux transparent huge pages</span></div><div class=\"line\"><span class=\"comment\"># Description:       Disable Linux transparent huge pages, to improve</span></div><div class=\"line\"><span class=\"comment\">#                    database performance.</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">    <span class=\"keyword\">if</span> [ -d /sys/kernel/mm/transparent_hugepage ]; <span class=\"keyword\">then</span></div><div class=\"line\">      thp_path=/sys/kernel/mm/transparent_hugepage</div><div class=\"line\">    <span class=\"keyword\">elif</span> [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; <span class=\"keyword\">then</span></div><div class=\"line\">      thp_path=/sys/kernel/mm/redhat_transparent_hugepage</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      <span class=\"built_in\">return</span> 0</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/enabled</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/defrag</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">unset</span> thp_path</div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Make it executable</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod 755 /etc/init.d/<span class=\"built_in\">disable</span>-transparent-hugepages</div></pre></td></tr></table></figure>\n</li>\n<li><p>Configure your operating system to run it on boot</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-rc.d <span class=\"built_in\">disable</span>-transparent-hugepages defaults</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启OS</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"配置MongoDB-ReplicaSet副本集\"><a href=\"#配置MongoDB-ReplicaSet副本集\" class=\"headerlink\" title=\"配置MongoDB ReplicaSet副本集\"></a>配置MongoDB ReplicaSet副本集</h1><p>副本集结构：</p>\n<p><img src=\"https://docs.mongodb.com/manual/_images/replica-set-primary-with-secondary-and-arbiter.png\" alt=\"\"></p>\n<ul>\n<li>2数据节点，1个仲裁节点</li>\n</ul>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><ul>\n<li>准备2台高配ec2（假设为A、B）和1台低配ec2（假设为C）</li>\n<li>在A、B、C上参考上一节的步骤安装MongoDB</li>\n<li><p>在A的Shell中执行<code>mongo</code>命令，然后创建超级管理员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo</div><div class=\"line\">&gt; admin = db.getSiblingDB(<span class=\"string\">\"admin\"</span>);</div><div class=\"line\">&gt; admin.createUser(&#123; <span class=\"attr\">user</span>: <span class=\"string\">\"ethan\"</span>, <span class=\"attr\">pwd</span>: <span class=\"string\">\"&#123;ethan的密码&#125;\"</span>, <span class=\"attr\">roles</span>: [&#123; <span class=\"attr\">role</span>: <span class=\"string\">\"root\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125;] &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备keyfile</p>\n<ul>\n<li>生成keyfile<ul>\n<li><code>openssl rand -base64 755 &gt; rs0.key</code></li>\n</ul>\n</li>\n<li>上传<code>rs0.key</code>到A、B、C的<code>/etc</code>目录</li>\n<li>修改<code>rs0.key</code>的权限和所有者<ul>\n<li><code>chmod 400 rs0.key</code></li>\n<li><code>chown mongodb:mongodb /etc/rs0.key</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>修改A、B的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li>增加配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  keyFile:</span> <span class=\"string\">\"/etc/rs0.key\"</span></div><div class=\"line\"><span class=\"attr\">  authorization:</span> <span class=\"string\">enabled</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">replication:</span></div><div class=\"line\"><span class=\"attr\">  replSetName:</span> <span class=\"string\">rs0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改C的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li><p>增加配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  keyFile:</span> <span class=\"string\">\"/etc/rs0.key\"</span></div><div class=\"line\"><span class=\"attr\">  authorization:</span> <span class=\"string\">enabled</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">replication:</span></div><div class=\"line\"><span class=\"attr\">  replSetName:</span> <span class=\"string\">rs0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">storage:</span></div><div class=\"line\"><span class=\"attr\">  journal:</span></div><div class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>重启A、B、C上的<code>mongod</code>实例</p>\n</li>\n<li><p>配置集群</p>\n<ul>\n<li><p>连接A上的<code>mongod</code>实例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo -u ethan -p &#123;ethan的密码&#125; --authenticationDatabase admin</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过下面的命令配置ReplicaSet：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rs.initiate()</div><div class=\"line\">&gt; cfg = rs.conf()</div><div class=\"line\">&gt; cfg.members[<span class=\"number\">0</span>].host = <span class=\"string\">\"&#123;A的IP&#125;:27017\"</span></div><div class=\"line\">&gt; rs.reconfig(cfg)</div><div class=\"line\">&gt; rs.add(<span class=\"string\">\"&#123;B的IP&#125;\"</span>)</div><div class=\"line\">&gt; rs.addArb(<span class=\"string\">\"&#123;C的IP&#125;\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等待几秒...</span></div><div class=\"line\">&gt; rs.status()  <span class=\"comment\">// 检查副本集状态</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为副本集客户端创建访问账户</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; use &#123;dbname&#125;;</div><div class=\"line\">&gt; db.createUser(&#123; <span class=\"attr\">user</span>: <span class=\"string\">\"&#123;账户名&#125;\"</span>, <span class=\"attr\">pwd</span>: <span class=\"string\">\"&#123;账户密码&#125;\"</span>, <span class=\"attr\">roles</span>: [&#123; <span class=\"attr\">role</span>: <span class=\"string\">\"readWrite\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"&#123;dbname&#125;\"</span> &#125;] &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\" target=\"_blank\" rel=\"external\">Install MongoDB on Ubuntu</a>， 注意：<ul>\n<li>安装过程需要指定MongoDB的安装版本</li>\n<li>锁定MongoDB的安装版本，避免执行<code>apt-get</code>升级命令的时候连带升级MongoDB</li>\n</ul>\n</li>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/\" target=\"_blank\" rel=\"external\">Enforce Keyfile Access Control in a Replica Set</a><ul>\n<li>Security between members of the replica set using Internal Authentication</li>\n<li>Security between connecting clients and the replica set using User Access Controls</li>\n</ul>\n</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/configuration-options/#core-options\" target=\"_blank\" rel=\"external\">MongoDB configuration file options</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在Ubuntu-Server-14-04上安装MongoDB-3-2-6\"><a href=\"#在Ubuntu-Server-14-04上安装MongoDB-3-2-6\" class=\"headerlink\" title=\"在Ubuntu Server 14.04上安装MongoDB 3.2.6\"></a>在Ubuntu Server 14.04上安装MongoDB 3.2.6</h1><ul>\n<li>Import the public key used by the package management system<ul>\n<li><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</code></li>\n</ul>\n</li>\n<li>Create a list file for MongoDB<ul>\n<li><code>echo &quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list</code></li>\n</ul>\n</li>\n<li>Reload local package database<ul>\n<li><code>sudo apt-get update</code></li>\n</ul>\n</li>\n<li>Install the MongoDB packages<ul>\n<li><code>sudo apt-get install -y mongodb-org=3.2.6 mongodb-org-server=3.2.6 mongodb-org-shell=3.2.6 mongodb-org-mongos=3.2.6 mongodb-org-tools=3.2.6</code></li>\n</ul>\n</li>\n<li><p>Pin a specific version of MongoDB</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-server hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-shell hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-mongos hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"mongodb-org-tools hold\"</span> | sudo dpkg --<span class=\"built_in\">set</span>-selections</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改MongoDB的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li>修改<code>net.bindIp</code>为<code>0.0.0.0</code></li>\n<li>增加配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">storage:</span></div><div class=\"line\"><span class=\"attr\">  directoryPerDB:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>验证MongoDB是否成功安装</p>\n<ul>\n<li><code>sudo service mongod restart</code></li>\n<li><code>mongo</code></li>\n</ul>\n</li>\n<li><p>Disable Transparent Huge Pages，参考<a href=\"https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\" target=\"_blank\" rel=\"external\">这里</a></p>\n<ul>\n<li><p>Create the init.d script</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          disable-transparent-hugepages</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:</span></div><div class=\"line\"><span class=\"comment\"># X-Start-Before:    mongod mongodb-mms-automation-agent</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: Disable Linux transparent huge pages</span></div><div class=\"line\"><span class=\"comment\"># Description:       Disable Linux transparent huge pages, to improve</span></div><div class=\"line\"><span class=\"comment\">#                    database performance.</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">    <span class=\"keyword\">if</span> [ -d /sys/kernel/mm/transparent_hugepage ]; <span class=\"keyword\">then</span></div><div class=\"line\">      thp_path=/sys/kernel/mm/transparent_hugepage</div><div class=\"line\">    <span class=\"keyword\">elif</span> [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; <span class=\"keyword\">then</span></div><div class=\"line\">      thp_path=/sys/kernel/mm/redhat_transparent_hugepage</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      <span class=\"built_in\">return</span> 0</div><div class=\"line\">    <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/enabled</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'never'</span> &gt; <span class=\"variable\">$&#123;thp_path&#125;</span>/defrag</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">unset</span> thp_path</div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Make it executable</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod 755 /etc/init.d/<span class=\"built_in\">disable</span>-transparent-hugepages</div></pre></td></tr></table></figure>\n</li>\n<li><p>Configure your operating system to run it on boot</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-rc.d <span class=\"built_in\">disable</span>-transparent-hugepages defaults</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启OS</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"配置MongoDB-ReplicaSet副本集\"><a href=\"#配置MongoDB-ReplicaSet副本集\" class=\"headerlink\" title=\"配置MongoDB ReplicaSet副本集\"></a>配置MongoDB ReplicaSet副本集</h1><p>副本集结构：</p>\n<p><img src=\"https://docs.mongodb.com/manual/_images/replica-set-primary-with-secondary-and-arbiter.png\" alt=\"\"></p>\n<ul>\n<li>2数据节点，1个仲裁节点</li>\n</ul>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><ul>\n<li>准备2台高配ec2（假设为A、B）和1台低配ec2（假设为C）</li>\n<li>在A、B、C上参考上一节的步骤安装MongoDB</li>\n<li><p>在A的Shell中执行<code>mongo</code>命令，然后创建超级管理员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo</div><div class=\"line\">&gt; admin = db.getSiblingDB(<span class=\"string\">\"admin\"</span>);</div><div class=\"line\">&gt; admin.createUser(&#123; <span class=\"attr\">user</span>: <span class=\"string\">\"ethan\"</span>, <span class=\"attr\">pwd</span>: <span class=\"string\">\"&#123;ethan的密码&#125;\"</span>, <span class=\"attr\">roles</span>: [&#123; <span class=\"attr\">role</span>: <span class=\"string\">\"root\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125;] &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备keyfile</p>\n<ul>\n<li>生成keyfile<ul>\n<li><code>openssl rand -base64 755 &gt; rs0.key</code></li>\n</ul>\n</li>\n<li>上传<code>rs0.key</code>到A、B、C的<code>/etc</code>目录</li>\n<li>修改<code>rs0.key</code>的权限和所有者<ul>\n<li><code>chmod 400 rs0.key</code></li>\n<li><code>chown mongodb:mongodb /etc/rs0.key</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>修改A、B的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li>增加配置<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  keyFile:</span> <span class=\"string\">\"/etc/rs0.key\"</span></div><div class=\"line\"><span class=\"attr\">  authorization:</span> <span class=\"string\">enabled</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">replication:</span></div><div class=\"line\"><span class=\"attr\">  replSetName:</span> <span class=\"string\">rs0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改C的配置文件<code>/etc/mongod.conf</code></p>\n<ul>\n<li><p>增加配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  keyFile:</span> <span class=\"string\">\"/etc/rs0.key\"</span></div><div class=\"line\"><span class=\"attr\">  authorization:</span> <span class=\"string\">enabled</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">replication:</span></div><div class=\"line\"><span class=\"attr\">  replSetName:</span> <span class=\"string\">rs0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">storage:</span></div><div class=\"line\"><span class=\"attr\">  journal:</span></div><div class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>重启A、B、C上的<code>mongod</code>实例</p>\n</li>\n<li><p>配置集群</p>\n<ul>\n<li><p>连接A上的<code>mongod</code>实例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo -u ethan -p &#123;ethan的密码&#125; --authenticationDatabase admin</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过下面的命令配置ReplicaSet：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rs.initiate()</div><div class=\"line\">&gt; cfg = rs.conf()</div><div class=\"line\">&gt; cfg.members[<span class=\"number\">0</span>].host = <span class=\"string\">\"&#123;A的IP&#125;:27017\"</span></div><div class=\"line\">&gt; rs.reconfig(cfg)</div><div class=\"line\">&gt; rs.add(<span class=\"string\">\"&#123;B的IP&#125;\"</span>)</div><div class=\"line\">&gt; rs.addArb(<span class=\"string\">\"&#123;C的IP&#125;\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等待几秒...</span></div><div class=\"line\">&gt; rs.status()  <span class=\"comment\">// 检查副本集状态</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为副本集客户端创建访问账户</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; use &#123;dbname&#125;;</div><div class=\"line\">&gt; db.createUser(&#123; <span class=\"attr\">user</span>: <span class=\"string\">\"&#123;账户名&#125;\"</span>, <span class=\"attr\">pwd</span>: <span class=\"string\">\"&#123;账户密码&#125;\"</span>, <span class=\"attr\">roles</span>: [&#123; <span class=\"attr\">role</span>: <span class=\"string\">\"readWrite\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"&#123;dbname&#125;\"</span> &#125;] &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\" target=\"_blank\" rel=\"external\">Install MongoDB on Ubuntu</a>， 注意：<ul>\n<li>安装过程需要指定MongoDB的安装版本</li>\n<li>锁定MongoDB的安装版本，避免执行<code>apt-get</code>升级命令的时候连带升级MongoDB</li>\n</ul>\n</li>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/\" target=\"_blank\" rel=\"external\">Enforce Keyfile Access Control in a Replica Set</a><ul>\n<li>Security between members of the replica set using Internal Authentication</li>\n<li>Security between connecting clients and the replica set using User Access Controls</li>\n</ul>\n</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/configuration-options/#core-options\" target=\"_blank\" rel=\"external\">MongoDB configuration file options</a></li>\n</ul>\n"},{"title":"Golang中遇到的一些关于JSON处理的坑","date":"2016-06-23T00:09:39.000Z","_content":"\n\n# 前言\n\n一个人不会两次掉进同一个坑里，但是如果他（她）忘记了坑的位置，那就不一定了。\n\n这篇文章记录了最近使用Golang处理JSON遇到的一些坑。\n\n# 坑\n\n## 1号坑：`omitempty`的行为\n\nC#中最常用的JSON序列化类库`Newtonsoft.Json`中，把一个类的实例序列化成JSON，如果我们不想让某个属性输出到JSON中，可以通过`property annotation`或者`ShouldSerialize method`等方法，告知序列化程序。如下：\n\n```c#\n// 通过ShouldSerialize method指示不要序列化ObsoleteSetting属性\nclass Config\n{\n    public Fizz ObsoleteSetting { get; set; }\n\n    public bool ShouldSerializeObsoleteSetting()\n    {\n        return false;\n    }\n}\n\n// 通过JsonIgnore的annotation指示不需要序列化ObsoleteSetting属性\nclass Config\n{\n    [JsonIgnore]\n    public Fizz ObsoleteSetting { get; set; }\n\n    public Bang ReplacementSetting { get; set; }\n}\n```\n\n关于`Newtonsoft.Json`的Conditional Property Serialization的更多内容参考：\n\n- [Conditional Property Serialization](http://www.newtonsoft.com/json/help/html/ConditionalProperties.htm)\n- [Making a property deserialize but not serialize with json.net](http://stackoverflow.com/questions/11564091/making-a-property-deserialize-but-not-serialize-with-json-net)\n\n开始使用Golang的时候，以为`omitempty`的行为和C#中一样用来控制是否序列化字段，结果使用的时候碰了一头钉子。回头阅读[encoding/json package的官方文档](http://docs.studygolang.com/pkg/encoding/json/#Marshal)，找到对`omitempty`行为的描述：\n\n> Struct values encode as JSON objects. Each exported struct field becomes a member of the object unless\n>\n> - the field's tag is \"-\", or\n> - the field is empty and its tag specifies the \"omitempty\" option.\n>\n> The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. The object's default key string is the struct field name but can be specified in the struct field's tag value. The \"json\" key in the struct field's tag value is the key name, followed by an optional comma and options. Examples:\n>\n> ```go\n> // Field is ignored by this package.\n> Field int `json:\"-\"`\n>\n> // Field appears in JSON as key \"myName\".\n> Field int `json:\"myName\"`\n>\n> // Field appears in JSON as key \"myName\" and\n> // the field is omitted from the object if its value is empty,\n> // as defined above.\n> Field int `json:\"myName,omitempty\"`\n>\n> // Field appears in JSON as key \"Field\" (the default), but\n> // the field is skipped if empty.\n> // Note the leading comma.\n> Field int `json:\",omitempty\"`\n> ```\n\nGolang中，如果指定一个`field`序列化成JSON的变量名字为`-`，则序列化的时候自动忽略这个`field`。这种用法，才是和上面`JsonIgnore`的用法的作用是一样的。\n\n而`omitempty`的作用是当一个`field`的值是`empty`的时候，序列化JSON时候忽略这个`field`（`Newtonsoft.Json`的类似用法参考[这里](http://stackoverflow.com/questions/6507889/how-to-ignore-a-property-in-class-if-null-using-json-net)和[例子](https://dotnetfiddle.net/VXqRnm)）。这里需要注意的是关于`emtpty`的定义：\n\n> The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero.\n\n通过下面的例子，来加深对`empty values`的了解：\n\n```go\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"log\"\n    \"os\"\n)\n\ntype S1 struct {\n    I1 int\n    I2 int `json:\",omitempty\"`\n\n    F1 float64\n    F2 float64 `json:\",omitempty\"`\n\n    S1 string\n    S2 string `json:\",omitempty\"`\n\n    B1 bool\n    B2 bool `json:\",omitempty\"`\n\n    Slice1 []int\n    Slice2 []int `json:\",omitempty\"`\n    Slice3 []int `json:\",omitempty\"`\n\n    Map1 map[string]string\n    Map2 map[string]string `json:\",omitempty\"`\n    Map3 map[string]string `json:\",omitempty\"`\n\n    O1 interface{}\n    O2 interface{} `json:\",omitempty\"`\n    O3 interface{} `json:\",omitempty\"`\n    O4 interface{} `json:\",omitempty\"`\n    O5 interface{} `json:\",omitempty\"`\n    O6 interface{} `json:\",omitempty\"`\n    O7 interface{} `json:\",omitempty\"`\n    O8 interface{} `json:\",omitempty\"`\n\n    P1 *int\n    P2 *int               `json:\",omitempty\"`\n    P3 *int               `json:\",omitempty\"`\n    P4 *float64           `json:\",omitempty\"`\n    P5 *string            `json:\",omitempty\"`\n    P6 *bool              `json:\",omitempty\"`\n    P7 *[]int             `json:\",omitempty\"`\n    P8 *map[string]string `json:\",omitempty\"`\n}\n\nfunc main() {\n\n    p3 := 0\n    p4 := float64(0)\n    p5 := \"\"\n    p6 := false\n    p7 := []int{}\n    p8 := map[string]string{}\n\n    s1 := S1{\n        I1: 0,\n        I2: 0,\n\n        F1: 0,\n        F2: 0,\n\n        S1: \"\",\n        S2: \"\",\n\n        B1: false,\n        B2: false,\n\n        Slice1: []int{},\n        Slice2: nil,\n        Slice3: []int{},\n\n        Map1: map[string]string{},\n        Map2: nil,\n        Map3: map[string]string{},\n\n        O1: nil,\n        O2: nil,\n        O3: int(0),\n        O4: float64(0),\n        O5: \"\",\n        O6: false,\n        O7: []int{},\n        O8: map[string]string{},\n\n        P1: nil,\n        P2: nil,\n        P3: &p3,\n        P4: &p4,\n        P5: &p5,\n        P6: &p6,\n        P7: &p7,\n        P8: &p8,\n    }\n\n    b, err := json.Marshal(s1)\n    if err != nil {\n        log.Printf(\"marshal error: %v\", err)\n        return\n    }\n\n    var out bytes.Buffer\n    json.Indent(&out, b, \"\", \"\\t\")\n    out.WriteTo(os.Stdout)\n    //Output:\n    //{\n    //\t\"I1\": 0,\n    //\t\"F1\": 0,\n    //\t\"S1\": \"\",\n    //\t\"B1\": false,\n    //\t\"Slice1\": [],\n    //\t\"Map1\": {},\n    //\t\"O1\": null,\n    //\t\"O3\": 0,\n    //\t\"O4\": 0,\n    //\t\"O5\": \"\",\n    //\t\"O6\": false,\n    //\t\"O7\": [],\n    //\t\"O8\": {},\n    //\t\"P1\": null,\n    //\t\"P2\": 0\n    //}%\n}\n```\n\n*点击[这里](https://play.golang.org/p/6y_m27r8EO)执行上面的程序*\n\n关于`empty value`的定义，这里面隐藏了一些坑。下面通过一个例子来说明。\n\n假设我们有一个社交类App，通过Restful API形式从服务端获取当前登录用户基本信息及粉丝数量。如果服务端对Response中`User`对象的定义如下：\n\n```go\ntype User struct {\n    ID        int `json:\"id\"`                  // 用户id\n    // 其它field\n    FansCount int `json:\"fansCount,omitempty\"` // 粉丝数\n}\n```\n\n如果正在使用App时一个还没有粉丝的用户，访问Restful API的得到Response如下：\n\n```json\n{\n    \"id\": 1000386,\n    ...\n}\n```\n\n这时候你会发现Response的User对象中没有`fansCount`，因为`fansCount`是个`int`类型且值为0，序列化的时候会被忽略。语义上，`User`对象中没有`fansCount`应该理解为**粉丝数量未知**，而不是**没有粉丝**。\n\n如果我们希望做到能够区分**粉丝数未知**和**没有粉丝**两种情况，需要修改`User`的定义：\n\n```go\ntype User struct {\n    ID        int  `json:\"id\"`                  // 用户id\n    // 其它field\n    FansCount *int `json:\"fansCount,omitempty\"` // 粉丝数\n}\n```\n\n将`FansCount`修改为指针类型，如果为`nil`，表示粉丝数未知；如果为整数（包括0），表示粉丝数。\n\n这么修改语义上没有漏洞了，但是代码中要给`FansCount`赋值的时候却要多一句废话。必须先将从数据源查询出粉丝数赋给一个变量，然后再将变量的指针传给`FansCount`。代码读起来实在是啰嗦：\n\n```go\n// FansCount是int类型时候\nuser := dataAccess.GetUserInfo(userId)\nuser.FansCount = dataAccess.GetFansCount(userId)\n\n// FansCount是*int类型的时候\nuser := dataAccess.GetUserInfo(userId)\nfansCount := dataAccess.GetFansCount(userId)\nuser.FansCount = &fansCount\n```\n\n## 2号坑：JSON反序列化成interface{}对Number的处理\n\n[JSON的规范](http://json.org/)中，对于数字类型，并不区分是整型还是浮点型。\n\n![](http://json.org/value.gif)\n\n对于如下JSON文本:\n\n```json\n{\n    \"name\": \"ethancai\",\n    \"fansCount\": 9223372036854775807\n}\n```\n\n如果反序列化的时候指定明确的结构体和变量类型\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype User struct {\n    Name      string\n    FansCount int64\n}\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user User  // 类型为User\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Printf(\"%+v \\n\", user)\n}\n// Output:\n//  {Name:ethancai FansCount:9223372036854775807}\n```\n\n*点击[这里](https://play.golang.org/p/203egccrea)执行上面的程序*\n\n如果反序列化不指定结构体类型或者变量类型，则JSON中的数字类型，默认被反序列化成`float64`类型：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user interface{}  // 不指定反序列化的类型\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    m := user.(map[string]interface{})\n\n    fansCount := m[\"fansCount\"]\n\n    fmt.Printf(\"%+v \\n\", reflect.TypeOf(fansCount).Name())\n    fmt.Printf(\"%+v \\n\", fansCount.(float64))\n}\n\n// Output:\n// \tfloat64\n//  \t9.223372036854776e+18\n```\n\n*点击[这里](https://play.golang.org/p/l4GzgA4WDA)执行上面的程序*\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype User struct {\n    Name      string\n    FansCount interface{}  // 不指定FansCount变量的类型\n}\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user User\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Printf(\"%+v \\n\", user)\n}\n\n// Output:\n// \t{Name:ethancai FansCount:9.223372036854776e+18}\n```\n\n*点击[这里](https://play.golang.org/p/SoD6SOGuCM)执行上面的程序*\n\n从上面的程序可以发现，如果`fansCount`精度比较高，反序列化成`float64`类型的数值时存在丢失精度的问题。\n\n如何解决这个问题，先看下面程序：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"reflect\"\n    \"strings\"\n)\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n\n    decoder := json.NewDecoder(strings.NewReader(jsonStream))\n    decoder.UseNumber()    // UseNumber causes the Decoder to unmarshal a number into an interface{} as a Number instead of as a float64.\n\n    var user interface{}\n    if err := decoder.Decode(&user); err != nil {\n        fmt.Println(\"error:\", err)\n            return\n        }\n\n    m := user.(map[string]interface{})\n    fansCount := m[\"fansCount\"]\n    fmt.Printf(\"%+v \\n\", reflect.TypeOf(fansCount).PkgPath() + \".\" + reflect.TypeOf(fansCount).Name())\n\n     v, err := fansCount.(json.Number).Int64()\n    if err != nil {\n        fmt.Println(\"error:\", err)\n            return\n    }\n    fmt.Printf(\"%+v \\n\", v)\n}\n\n// Output:\n// \tencoding/json.Number\n// \t9223372036854775807\n```\n*点击[这里](https://play.golang.org/p/KYrFshVMFD)执行上面的程序*\n\n上面的程序，使用了`func (*Decoder) UseNumber`方法告诉反序列化JSON的数字类型的时候，不要直接转换成`float64`，而是转换成`json.Number`类型。`json.Number`内部实现机制是什么，我们来看看源码：\n\n```go\n// A Number represents a JSON number literal.\ntype Number string\n\n// String returns the literal text of the number.\nfunc (n Number) String() string { return string(n) }\n\n// Float64 returns the number as a float64.\nfunc (n Number) Float64() (float64, error) {\n    return strconv.ParseFloat(string(n), 64)\n}\n\n// Int64 returns the number as an int64.\nfunc (n Number) Int64() (int64, error) {\n    return strconv.ParseInt(string(n), 10, 64)\n}\n```\n\n`json.Number`本质是字符串，反序列化的时候将JSON的数值先转成`json.Number`，其实是一种延迟处理的手段，待后续逻辑需要时候，再把`json.Number`转成`float64`或者`int64`。\n\n对比其它语言，Golang对JSON反序列化处理真是易用性太差（“蛋疼”）。\n\nJavaScript中所有的数值都是双精度浮点数（参考[这里](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)），反序列化JSON的时候不用考虑数值类型匹配问题。这里多说两句，JSON的全名JavaScript Object Notation（从名字上就能看出和JavaScript的关系非常紧密），发明人是Douglas Crockford，如果你自称熟悉JavaScript而不知道[Douglas Crockford](http://www.infoq.com/cn/news/2010/02/qconbeijing2010-douglas)是谁，就像是自称是苹果粉丝却不知道乔布斯是谁。\n\nC#语言的第三方JSON处理library [Json.NET](http://www.newtonsoft.com/json)反序列化JSON对数值的处理也比Golang要优雅的多：\n\n```c#\nusing System;\nusing Newtonsoft.Json;\n\npublic class Program\n{\n    public static void Main()\n    {\n        string json = @\"{\n  'Name': 'Ethan',\n  'FansCount': 121211,\n  'Price': 99.99\n}\";\n\n        Product m = JsonConvert.DeserializeObject<Product>(json);\n\n        Console.WriteLine(m.FansCount);\n        Console.WriteLine(m.FansCount.GetType().FullName);\n\n        Console.WriteLine(m.Price);\n        Console.WriteLine(m.Price.GetType().FullName);\n\n    }\n}\n\npublic class Product\n{\n    public string Name\n    {\n        get;\n        set;\n    }\n\n    public object FansCount\n    {\n        get;\n        set;\n    }\n\n    public object Price\n    {\n        get;\n        set;\n    }\n}\n\n// Output:\n//      121211\n//      System.Int64\n//      99.99\n//      System.Double\n```\n\n*点击[这里](https://dotnetfiddle.net/IrlMae)执行上面的程序*\n\n`Json.NET`在反序列化的时候自动识别数值是浮点型还是整型，这一点对开发者非常友好。\n\n## 3号坑：选择什么格式表示日期\n\nJSON的规范中并没有日期类型，不同语言的library对日期序列化的处理也不完全一致：\n\nGo语言：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n    \"time\"\n)\n\nfunc main() {\n    type Product struct {\n        Name      string\n        CreatedAt time.Time\n    }\n    pdt := Product{\n        Name:      \"Reds\",\n        CreatedAt: time.Now(),\n    }\n    b, err := json.Marshal(pdt)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    os.Stdout.Write(b)\n}\n// Output\n//      {\"Name\":\"Reds\",\"CreatedAt\":\"2016-06-27T07:40:54.69292134+08:00\"}\n```\n\nJavaScript语言：\n\n```sh\n➜  ~ node\n> var jo = { name: \"ethan\", createdAt: Date.now() };\nundefined\n> JSON.stringify(jo)\n'{\"name\":\"ethan\",\"createdAt\":1466984665633}'\n```\n\nC#语言：\n\n```c#\nusing System;\nusing Newtonsoft.Json;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Product product = new Product();\n        product.Name = \"Apple\";\n        product.CreatedAt = DateTime.Now;\n\n        string json = JsonConvert.SerializeObject(product,\n                            Newtonsoft.Json.Formatting.Indented,\n                            new JsonSerializerSettings {\n                                NullValueHandling = NullValueHandling.Ignore\n                            });\n        Console.WriteLine(json);\n    }\n}\n\npublic class Product\n{\n    public string Name\n    {\n        get;\n        set;\n    }\n\n    public DateTime CreatedAt\n    {\n        get;\n        set;\n    }\n}\n// Output:\n//      {\n//        \"Name\": \"Apple\",\n//        \"CreatedAt\": \"2016-06-26T23:46:57.3244307+00:00\"\n//      }\n```\n\nGo的`encoding/json` package、C#的Json.NET默认把日期类型序列化成[ISO 8601标准](http://www.w3.org/TR/NOTE-datetime)的格式，JavaScript默认把`Date`序列化从1970年1月1日0点0分0秒的毫秒数。但JavaScript的[`dateObj.toISOString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)能够将日期类型转成ISO格式的字符串，[`Date.parse(dateString)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)方法能够将ISO格式的日期字符串转成日期。\n\n个人认为ISO格式的日期字符串可读性更好，但序列化和反序列化时的性能应该比整数更低。这一点从Go语言中`time.Time`的定义看出来。\n\n```go\ntype Time struct {\n    // sec gives the number of seconds elapsed since\n    // January 1, year 1 00:00:00 UTC.\n    sec int64\n\n    // nsec specifies a non-negative nanosecond\n    // offset within the second named by Seconds.\n    // It must be in the range [0, 999999999].\n    nsec int32\n\n    // loc specifies the Location that should be used to\n    // determine the minute, hour, month, day, and year\n    // that correspond to this Time.\n    // Only the zero Time has a nil Location.\n    // In that case it is interpreted to mean UTC.\n    loc *Location\n}\n```\n\n具体选择哪种形式在JSON中表示日期，有如下几点需要注意：\n\n- 选择标准格式。曾记得.NET Framework官方序列化JSON的方法中，会把日期转成如`\"\\/Date(1343660352227+0530)\\/\"`的专有格式，这样的专有格式对跨语言的访问特别不友好。\n- 如果你倾向性能，可以使用整数。如果你倾向可读性，可以使用ISO字符串。\n- 如果使用整数表示日期，而你的应用又是需要支持跨时区的，注意一定要是从`1970-1-1 00:00:00 UTC`开始计算的毫秒数，而不是当前时区的`1970-1-1 00:00:00`。\n\n\n# 参考\n\n文章：\n\n- [package encoding/json in Go](http://docs.studygolang.com/pkg/encoding/json/)\n- [http://docs.studygolang.com/src/encoding/json/example_test.go](http://docs.studygolang.com/src/encoding/json/example_test.go)\n- [The Go Blog: JSON and Go](https://blog.golang.org/json-and-go)\n- [Go by example: JSON](https://gobyexample.com/json)\n- [JSON decoding in Go](http://attilaolah.eu/2013/11/29/json-decoding-in-go/)\n- [go and json](https://eager.io/blog/go-and-json/)\n- [Decode JSON Documents In Go](https://www.goinggo.net/2014/01/decode-json-documents-in-go.html)\n- [ffjson: faster JSON serialization for Golang](https://journal.paul.querna.org/articles/2014/03/31/ffjson-faster-json-in-go/)\n- [Serialization in Go](http://www.slideshare.net/albertstrasheim/serialization-in-go)\n\n第三方类库：\n\n- [ffjson](https://github.com/pquerna/ffjson): faster JSON serialization for Go\n- [go-simplejson](https://github.com/bitly/go-simplejson): a Go package to interact with arbitrary JSON\n- [Jason](https://github.com/antonholmquist/jason): Easy-to-use JSON Library for Go\n- [easyjson](https://github.com/mailru/easyjson)\n- [gabs](https://github.com/Jeffail/gabs)\n- [jsonparser](https://github.com/buger/jsonparser)\n\n工具：\n\n- [JSON-to-Go](https://mholt.github.io/json-to-go/): instantly converts JSON into a Go type definition\n","source":"_posts/bad-parts-about-json-serialization-in-Golang.md","raw":"---\ntitle: Golang中遇到的一些关于JSON处理的坑\ntags:\n  - golang\n  - json\ncategories:\n  - 软件开发\ndate: 2016-06-23 08:09:39\n---\n\n\n# 前言\n\n一个人不会两次掉进同一个坑里，但是如果他（她）忘记了坑的位置，那就不一定了。\n\n这篇文章记录了最近使用Golang处理JSON遇到的一些坑。\n\n# 坑\n\n## 1号坑：`omitempty`的行为\n\nC#中最常用的JSON序列化类库`Newtonsoft.Json`中，把一个类的实例序列化成JSON，如果我们不想让某个属性输出到JSON中，可以通过`property annotation`或者`ShouldSerialize method`等方法，告知序列化程序。如下：\n\n```c#\n// 通过ShouldSerialize method指示不要序列化ObsoleteSetting属性\nclass Config\n{\n    public Fizz ObsoleteSetting { get; set; }\n\n    public bool ShouldSerializeObsoleteSetting()\n    {\n        return false;\n    }\n}\n\n// 通过JsonIgnore的annotation指示不需要序列化ObsoleteSetting属性\nclass Config\n{\n    [JsonIgnore]\n    public Fizz ObsoleteSetting { get; set; }\n\n    public Bang ReplacementSetting { get; set; }\n}\n```\n\n关于`Newtonsoft.Json`的Conditional Property Serialization的更多内容参考：\n\n- [Conditional Property Serialization](http://www.newtonsoft.com/json/help/html/ConditionalProperties.htm)\n- [Making a property deserialize but not serialize with json.net](http://stackoverflow.com/questions/11564091/making-a-property-deserialize-but-not-serialize-with-json-net)\n\n开始使用Golang的时候，以为`omitempty`的行为和C#中一样用来控制是否序列化字段，结果使用的时候碰了一头钉子。回头阅读[encoding/json package的官方文档](http://docs.studygolang.com/pkg/encoding/json/#Marshal)，找到对`omitempty`行为的描述：\n\n> Struct values encode as JSON objects. Each exported struct field becomes a member of the object unless\n>\n> - the field's tag is \"-\", or\n> - the field is empty and its tag specifies the \"omitempty\" option.\n>\n> The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. The object's default key string is the struct field name but can be specified in the struct field's tag value. The \"json\" key in the struct field's tag value is the key name, followed by an optional comma and options. Examples:\n>\n> ```go\n> // Field is ignored by this package.\n> Field int `json:\"-\"`\n>\n> // Field appears in JSON as key \"myName\".\n> Field int `json:\"myName\"`\n>\n> // Field appears in JSON as key \"myName\" and\n> // the field is omitted from the object if its value is empty,\n> // as defined above.\n> Field int `json:\"myName,omitempty\"`\n>\n> // Field appears in JSON as key \"Field\" (the default), but\n> // the field is skipped if empty.\n> // Note the leading comma.\n> Field int `json:\",omitempty\"`\n> ```\n\nGolang中，如果指定一个`field`序列化成JSON的变量名字为`-`，则序列化的时候自动忽略这个`field`。这种用法，才是和上面`JsonIgnore`的用法的作用是一样的。\n\n而`omitempty`的作用是当一个`field`的值是`empty`的时候，序列化JSON时候忽略这个`field`（`Newtonsoft.Json`的类似用法参考[这里](http://stackoverflow.com/questions/6507889/how-to-ignore-a-property-in-class-if-null-using-json-net)和[例子](https://dotnetfiddle.net/VXqRnm)）。这里需要注意的是关于`emtpty`的定义：\n\n> The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero.\n\n通过下面的例子，来加深对`empty values`的了解：\n\n```go\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"log\"\n    \"os\"\n)\n\ntype S1 struct {\n    I1 int\n    I2 int `json:\",omitempty\"`\n\n    F1 float64\n    F2 float64 `json:\",omitempty\"`\n\n    S1 string\n    S2 string `json:\",omitempty\"`\n\n    B1 bool\n    B2 bool `json:\",omitempty\"`\n\n    Slice1 []int\n    Slice2 []int `json:\",omitempty\"`\n    Slice3 []int `json:\",omitempty\"`\n\n    Map1 map[string]string\n    Map2 map[string]string `json:\",omitempty\"`\n    Map3 map[string]string `json:\",omitempty\"`\n\n    O1 interface{}\n    O2 interface{} `json:\",omitempty\"`\n    O3 interface{} `json:\",omitempty\"`\n    O4 interface{} `json:\",omitempty\"`\n    O5 interface{} `json:\",omitempty\"`\n    O6 interface{} `json:\",omitempty\"`\n    O7 interface{} `json:\",omitempty\"`\n    O8 interface{} `json:\",omitempty\"`\n\n    P1 *int\n    P2 *int               `json:\",omitempty\"`\n    P3 *int               `json:\",omitempty\"`\n    P4 *float64           `json:\",omitempty\"`\n    P5 *string            `json:\",omitempty\"`\n    P6 *bool              `json:\",omitempty\"`\n    P7 *[]int             `json:\",omitempty\"`\n    P8 *map[string]string `json:\",omitempty\"`\n}\n\nfunc main() {\n\n    p3 := 0\n    p4 := float64(0)\n    p5 := \"\"\n    p6 := false\n    p7 := []int{}\n    p8 := map[string]string{}\n\n    s1 := S1{\n        I1: 0,\n        I2: 0,\n\n        F1: 0,\n        F2: 0,\n\n        S1: \"\",\n        S2: \"\",\n\n        B1: false,\n        B2: false,\n\n        Slice1: []int{},\n        Slice2: nil,\n        Slice3: []int{},\n\n        Map1: map[string]string{},\n        Map2: nil,\n        Map3: map[string]string{},\n\n        O1: nil,\n        O2: nil,\n        O3: int(0),\n        O4: float64(0),\n        O5: \"\",\n        O6: false,\n        O7: []int{},\n        O8: map[string]string{},\n\n        P1: nil,\n        P2: nil,\n        P3: &p3,\n        P4: &p4,\n        P5: &p5,\n        P6: &p6,\n        P7: &p7,\n        P8: &p8,\n    }\n\n    b, err := json.Marshal(s1)\n    if err != nil {\n        log.Printf(\"marshal error: %v\", err)\n        return\n    }\n\n    var out bytes.Buffer\n    json.Indent(&out, b, \"\", \"\\t\")\n    out.WriteTo(os.Stdout)\n    //Output:\n    //{\n    //\t\"I1\": 0,\n    //\t\"F1\": 0,\n    //\t\"S1\": \"\",\n    //\t\"B1\": false,\n    //\t\"Slice1\": [],\n    //\t\"Map1\": {},\n    //\t\"O1\": null,\n    //\t\"O3\": 0,\n    //\t\"O4\": 0,\n    //\t\"O5\": \"\",\n    //\t\"O6\": false,\n    //\t\"O7\": [],\n    //\t\"O8\": {},\n    //\t\"P1\": null,\n    //\t\"P2\": 0\n    //}%\n}\n```\n\n*点击[这里](https://play.golang.org/p/6y_m27r8EO)执行上面的程序*\n\n关于`empty value`的定义，这里面隐藏了一些坑。下面通过一个例子来说明。\n\n假设我们有一个社交类App，通过Restful API形式从服务端获取当前登录用户基本信息及粉丝数量。如果服务端对Response中`User`对象的定义如下：\n\n```go\ntype User struct {\n    ID        int `json:\"id\"`                  // 用户id\n    // 其它field\n    FansCount int `json:\"fansCount,omitempty\"` // 粉丝数\n}\n```\n\n如果正在使用App时一个还没有粉丝的用户，访问Restful API的得到Response如下：\n\n```json\n{\n    \"id\": 1000386,\n    ...\n}\n```\n\n这时候你会发现Response的User对象中没有`fansCount`，因为`fansCount`是个`int`类型且值为0，序列化的时候会被忽略。语义上，`User`对象中没有`fansCount`应该理解为**粉丝数量未知**，而不是**没有粉丝**。\n\n如果我们希望做到能够区分**粉丝数未知**和**没有粉丝**两种情况，需要修改`User`的定义：\n\n```go\ntype User struct {\n    ID        int  `json:\"id\"`                  // 用户id\n    // 其它field\n    FansCount *int `json:\"fansCount,omitempty\"` // 粉丝数\n}\n```\n\n将`FansCount`修改为指针类型，如果为`nil`，表示粉丝数未知；如果为整数（包括0），表示粉丝数。\n\n这么修改语义上没有漏洞了，但是代码中要给`FansCount`赋值的时候却要多一句废话。必须先将从数据源查询出粉丝数赋给一个变量，然后再将变量的指针传给`FansCount`。代码读起来实在是啰嗦：\n\n```go\n// FansCount是int类型时候\nuser := dataAccess.GetUserInfo(userId)\nuser.FansCount = dataAccess.GetFansCount(userId)\n\n// FansCount是*int类型的时候\nuser := dataAccess.GetUserInfo(userId)\nfansCount := dataAccess.GetFansCount(userId)\nuser.FansCount = &fansCount\n```\n\n## 2号坑：JSON反序列化成interface{}对Number的处理\n\n[JSON的规范](http://json.org/)中，对于数字类型，并不区分是整型还是浮点型。\n\n![](http://json.org/value.gif)\n\n对于如下JSON文本:\n\n```json\n{\n    \"name\": \"ethancai\",\n    \"fansCount\": 9223372036854775807\n}\n```\n\n如果反序列化的时候指定明确的结构体和变量类型\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype User struct {\n    Name      string\n    FansCount int64\n}\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user User  // 类型为User\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Printf(\"%+v \\n\", user)\n}\n// Output:\n//  {Name:ethancai FansCount:9223372036854775807}\n```\n\n*点击[这里](https://play.golang.org/p/203egccrea)执行上面的程序*\n\n如果反序列化不指定结构体类型或者变量类型，则JSON中的数字类型，默认被反序列化成`float64`类型：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user interface{}  // 不指定反序列化的类型\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    m := user.(map[string]interface{})\n\n    fansCount := m[\"fansCount\"]\n\n    fmt.Printf(\"%+v \\n\", reflect.TypeOf(fansCount).Name())\n    fmt.Printf(\"%+v \\n\", fansCount.(float64))\n}\n\n// Output:\n// \tfloat64\n//  \t9.223372036854776e+18\n```\n\n*点击[这里](https://play.golang.org/p/l4GzgA4WDA)执行上面的程序*\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype User struct {\n    Name      string\n    FansCount interface{}  // 不指定FansCount变量的类型\n}\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n    var user User\n    err := json.Unmarshal([]byte(jsonStream), &user)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Printf(\"%+v \\n\", user)\n}\n\n// Output:\n// \t{Name:ethancai FansCount:9.223372036854776e+18}\n```\n\n*点击[这里](https://play.golang.org/p/SoD6SOGuCM)执行上面的程序*\n\n从上面的程序可以发现，如果`fansCount`精度比较高，反序列化成`float64`类型的数值时存在丢失精度的问题。\n\n如何解决这个问题，先看下面程序：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"reflect\"\n    \"strings\"\n)\n\nfunc main() {\n    const jsonStream = `\n        {\"name\":\"ethancai\", \"fansCount\": 9223372036854775807}\n    `\n\n    decoder := json.NewDecoder(strings.NewReader(jsonStream))\n    decoder.UseNumber()    // UseNumber causes the Decoder to unmarshal a number into an interface{} as a Number instead of as a float64.\n\n    var user interface{}\n    if err := decoder.Decode(&user); err != nil {\n        fmt.Println(\"error:\", err)\n            return\n        }\n\n    m := user.(map[string]interface{})\n    fansCount := m[\"fansCount\"]\n    fmt.Printf(\"%+v \\n\", reflect.TypeOf(fansCount).PkgPath() + \".\" + reflect.TypeOf(fansCount).Name())\n\n     v, err := fansCount.(json.Number).Int64()\n    if err != nil {\n        fmt.Println(\"error:\", err)\n            return\n    }\n    fmt.Printf(\"%+v \\n\", v)\n}\n\n// Output:\n// \tencoding/json.Number\n// \t9223372036854775807\n```\n*点击[这里](https://play.golang.org/p/KYrFshVMFD)执行上面的程序*\n\n上面的程序，使用了`func (*Decoder) UseNumber`方法告诉反序列化JSON的数字类型的时候，不要直接转换成`float64`，而是转换成`json.Number`类型。`json.Number`内部实现机制是什么，我们来看看源码：\n\n```go\n// A Number represents a JSON number literal.\ntype Number string\n\n// String returns the literal text of the number.\nfunc (n Number) String() string { return string(n) }\n\n// Float64 returns the number as a float64.\nfunc (n Number) Float64() (float64, error) {\n    return strconv.ParseFloat(string(n), 64)\n}\n\n// Int64 returns the number as an int64.\nfunc (n Number) Int64() (int64, error) {\n    return strconv.ParseInt(string(n), 10, 64)\n}\n```\n\n`json.Number`本质是字符串，反序列化的时候将JSON的数值先转成`json.Number`，其实是一种延迟处理的手段，待后续逻辑需要时候，再把`json.Number`转成`float64`或者`int64`。\n\n对比其它语言，Golang对JSON反序列化处理真是易用性太差（“蛋疼”）。\n\nJavaScript中所有的数值都是双精度浮点数（参考[这里](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)），反序列化JSON的时候不用考虑数值类型匹配问题。这里多说两句，JSON的全名JavaScript Object Notation（从名字上就能看出和JavaScript的关系非常紧密），发明人是Douglas Crockford，如果你自称熟悉JavaScript而不知道[Douglas Crockford](http://www.infoq.com/cn/news/2010/02/qconbeijing2010-douglas)是谁，就像是自称是苹果粉丝却不知道乔布斯是谁。\n\nC#语言的第三方JSON处理library [Json.NET](http://www.newtonsoft.com/json)反序列化JSON对数值的处理也比Golang要优雅的多：\n\n```c#\nusing System;\nusing Newtonsoft.Json;\n\npublic class Program\n{\n    public static void Main()\n    {\n        string json = @\"{\n  'Name': 'Ethan',\n  'FansCount': 121211,\n  'Price': 99.99\n}\";\n\n        Product m = JsonConvert.DeserializeObject<Product>(json);\n\n        Console.WriteLine(m.FansCount);\n        Console.WriteLine(m.FansCount.GetType().FullName);\n\n        Console.WriteLine(m.Price);\n        Console.WriteLine(m.Price.GetType().FullName);\n\n    }\n}\n\npublic class Product\n{\n    public string Name\n    {\n        get;\n        set;\n    }\n\n    public object FansCount\n    {\n        get;\n        set;\n    }\n\n    public object Price\n    {\n        get;\n        set;\n    }\n}\n\n// Output:\n//      121211\n//      System.Int64\n//      99.99\n//      System.Double\n```\n\n*点击[这里](https://dotnetfiddle.net/IrlMae)执行上面的程序*\n\n`Json.NET`在反序列化的时候自动识别数值是浮点型还是整型，这一点对开发者非常友好。\n\n## 3号坑：选择什么格式表示日期\n\nJSON的规范中并没有日期类型，不同语言的library对日期序列化的处理也不完全一致：\n\nGo语言：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n    \"time\"\n)\n\nfunc main() {\n    type Product struct {\n        Name      string\n        CreatedAt time.Time\n    }\n    pdt := Product{\n        Name:      \"Reds\",\n        CreatedAt: time.Now(),\n    }\n    b, err := json.Marshal(pdt)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    os.Stdout.Write(b)\n}\n// Output\n//      {\"Name\":\"Reds\",\"CreatedAt\":\"2016-06-27T07:40:54.69292134+08:00\"}\n```\n\nJavaScript语言：\n\n```sh\n➜  ~ node\n> var jo = { name: \"ethan\", createdAt: Date.now() };\nundefined\n> JSON.stringify(jo)\n'{\"name\":\"ethan\",\"createdAt\":1466984665633}'\n```\n\nC#语言：\n\n```c#\nusing System;\nusing Newtonsoft.Json;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Product product = new Product();\n        product.Name = \"Apple\";\n        product.CreatedAt = DateTime.Now;\n\n        string json = JsonConvert.SerializeObject(product,\n                            Newtonsoft.Json.Formatting.Indented,\n                            new JsonSerializerSettings {\n                                NullValueHandling = NullValueHandling.Ignore\n                            });\n        Console.WriteLine(json);\n    }\n}\n\npublic class Product\n{\n    public string Name\n    {\n        get;\n        set;\n    }\n\n    public DateTime CreatedAt\n    {\n        get;\n        set;\n    }\n}\n// Output:\n//      {\n//        \"Name\": \"Apple\",\n//        \"CreatedAt\": \"2016-06-26T23:46:57.3244307+00:00\"\n//      }\n```\n\nGo的`encoding/json` package、C#的Json.NET默认把日期类型序列化成[ISO 8601标准](http://www.w3.org/TR/NOTE-datetime)的格式，JavaScript默认把`Date`序列化从1970年1月1日0点0分0秒的毫秒数。但JavaScript的[`dateObj.toISOString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)能够将日期类型转成ISO格式的字符串，[`Date.parse(dateString)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)方法能够将ISO格式的日期字符串转成日期。\n\n个人认为ISO格式的日期字符串可读性更好，但序列化和反序列化时的性能应该比整数更低。这一点从Go语言中`time.Time`的定义看出来。\n\n```go\ntype Time struct {\n    // sec gives the number of seconds elapsed since\n    // January 1, year 1 00:00:00 UTC.\n    sec int64\n\n    // nsec specifies a non-negative nanosecond\n    // offset within the second named by Seconds.\n    // It must be in the range [0, 999999999].\n    nsec int32\n\n    // loc specifies the Location that should be used to\n    // determine the minute, hour, month, day, and year\n    // that correspond to this Time.\n    // Only the zero Time has a nil Location.\n    // In that case it is interpreted to mean UTC.\n    loc *Location\n}\n```\n\n具体选择哪种形式在JSON中表示日期，有如下几点需要注意：\n\n- 选择标准格式。曾记得.NET Framework官方序列化JSON的方法中，会把日期转成如`\"\\/Date(1343660352227+0530)\\/\"`的专有格式，这样的专有格式对跨语言的访问特别不友好。\n- 如果你倾向性能，可以使用整数。如果你倾向可读性，可以使用ISO字符串。\n- 如果使用整数表示日期，而你的应用又是需要支持跨时区的，注意一定要是从`1970-1-1 00:00:00 UTC`开始计算的毫秒数，而不是当前时区的`1970-1-1 00:00:00`。\n\n\n# 参考\n\n文章：\n\n- [package encoding/json in Go](http://docs.studygolang.com/pkg/encoding/json/)\n- [http://docs.studygolang.com/src/encoding/json/example_test.go](http://docs.studygolang.com/src/encoding/json/example_test.go)\n- [The Go Blog: JSON and Go](https://blog.golang.org/json-and-go)\n- [Go by example: JSON](https://gobyexample.com/json)\n- [JSON decoding in Go](http://attilaolah.eu/2013/11/29/json-decoding-in-go/)\n- [go and json](https://eager.io/blog/go-and-json/)\n- [Decode JSON Documents In Go](https://www.goinggo.net/2014/01/decode-json-documents-in-go.html)\n- [ffjson: faster JSON serialization for Golang](https://journal.paul.querna.org/articles/2014/03/31/ffjson-faster-json-in-go/)\n- [Serialization in Go](http://www.slideshare.net/albertstrasheim/serialization-in-go)\n\n第三方类库：\n\n- [ffjson](https://github.com/pquerna/ffjson): faster JSON serialization for Go\n- [go-simplejson](https://github.com/bitly/go-simplejson): a Go package to interact with arbitrary JSON\n- [Jason](https://github.com/antonholmquist/jason): Easy-to-use JSON Library for Go\n- [easyjson](https://github.com/mailru/easyjson)\n- [gabs](https://github.com/Jeffail/gabs)\n- [jsonparser](https://github.com/buger/jsonparser)\n\n工具：\n\n- [JSON-to-Go](https://mholt.github.io/json-to-go/): instantly converts JSON into a Go type definition\n","slug":"bad-parts-about-json-serialization-in-Golang","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneob000dv7bfyxnwm6js","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个人不会两次掉进同一个坑里，但是如果他（她）忘记了坑的位置，那就不一定了。</p>\n<p>这篇文章记录了最近使用Golang处理JSON遇到的一些坑。</p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><h2 id=\"1号坑：omitempty的行为\"><a href=\"#1号坑：omitempty的行为\" class=\"headerlink\" title=\"1号坑：omitempty的行为\"></a>1号坑：<code>omitempty</code>的行为</h2><p>C#中最常用的JSON序列化类库<code>Newtonsoft.Json</code>中，把一个类的实例序列化成JSON，如果我们不想让某个属性输出到JSON中，可以通过<code>property annotation</code>或者<code>ShouldSerialize method</code>等方法，告知序列化程序。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 通过ShouldSerialize method指示不要序列化ObsoleteSetting属性</div><div class=\"line\">class Config</div><div class=\"line\">&#123;</div><div class=\"line\">    public Fizz ObsoleteSetting &#123; get; set; &#125;</div><div class=\"line\"></div><div class=\"line\">    public bool ShouldSerializeObsoleteSetting()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过JsonIgnore的annotation指示不需要序列化ObsoleteSetting属性</div><div class=\"line\">class Config</div><div class=\"line\">&#123;</div><div class=\"line\">    [JsonIgnore]</div><div class=\"line\">    public Fizz ObsoleteSetting &#123; get; set; &#125;</div><div class=\"line\"></div><div class=\"line\">    public Bang ReplacementSetting &#123; get; set; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于<code>Newtonsoft.Json</code>的Conditional Property Serialization的更多内容参考：</p>\n<ul>\n<li><a href=\"http://www.newtonsoft.com/json/help/html/ConditionalProperties.htm\" target=\"_blank\" rel=\"external\">Conditional Property Serialization</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11564091/making-a-property-deserialize-but-not-serialize-with-json-net\" target=\"_blank\" rel=\"external\">Making a property deserialize but not serialize with json.net</a></li>\n</ul>\n<p>开始使用Golang的时候，以为<code>omitempty</code>的行为和C#中一样用来控制是否序列化字段，结果使用的时候碰了一头钉子。回头阅读<a href=\"http://docs.studygolang.com/pkg/encoding/json/#Marshal\" target=\"_blank\" rel=\"external\">encoding/json package的官方文档</a>，找到对<code>omitempty</code>行为的描述：</p>\n<blockquote>\n<p>Struct values encode as JSON objects. Each exported struct field becomes a member of the object unless</p>\n<ul>\n<li>the field’s tag is “-“, or</li>\n<li>the field is empty and its tag specifies the “omitempty” option.</li>\n</ul>\n<p>The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. The object’s default key string is the struct field name but can be specified in the struct field’s tag value. The “json” key in the struct field’s tag value is the key name, followed by an optional comma and options. Examples:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">// Field is ignored by this package.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"-\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"myName\".</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"myName\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"myName\" and</span></div><div class=\"line\">&gt; <span class=\"comment\">// the field is omitted from the object if its value is empty,</span></div><div class=\"line\">&gt; <span class=\"comment\">// as defined above.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"myName,omitempty\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"Field\" (the default), but</span></div><div class=\"line\">&gt; <span class=\"comment\">// the field is skipped if empty.</span></div><div class=\"line\">&gt; <span class=\"comment\">// Note the leading comma.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>Golang中，如果指定一个<code>field</code>序列化成JSON的变量名字为<code>-</code>，则序列化的时候自动忽略这个<code>field</code>。这种用法，才是和上面<code>JsonIgnore</code>的用法的作用是一样的。</p>\n<p>而<code>omitempty</code>的作用是当一个<code>field</code>的值是<code>empty</code>的时候，序列化JSON时候忽略这个<code>field</code>（<code>Newtonsoft.Json</code>的类似用法参考<a href=\"http://stackoverflow.com/questions/6507889/how-to-ignore-a-property-in-class-if-null-using-json-net\" target=\"_blank\" rel=\"external\">这里</a>和<a href=\"https://dotnetfiddle.net/VXqRnm\" target=\"_blank\" rel=\"external\">例子</a>）。这里需要注意的是关于<code>emtpty</code>的定义：</p>\n<blockquote>\n<p>The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero.</p>\n</blockquote>\n<p>通过下面的例子，来加深对<code>empty values</code>的了解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> S1 <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    I1 <span class=\"keyword\">int</span></div><div class=\"line\">    I2 <span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    F1 <span class=\"keyword\">float64</span></div><div class=\"line\">    F2 <span class=\"keyword\">float64</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    S1 <span class=\"keyword\">string</span></div><div class=\"line\">    S2 <span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    B1 <span class=\"keyword\">bool</span></div><div class=\"line\">    B2 <span class=\"keyword\">bool</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    Slice1 []<span class=\"keyword\">int</span></div><div class=\"line\">    Slice2 []<span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    Slice3 []<span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    Map1 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></div><div class=\"line\">    Map2 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    Map3 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    O1 <span class=\"keyword\">interface</span>&#123;&#125;</div><div class=\"line\">    O2 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O3 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O4 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O5 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O6 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O7 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O8 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    P1 *<span class=\"keyword\">int</span></div><div class=\"line\">    P2 *<span class=\"keyword\">int</span>               <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P3 *<span class=\"keyword\">int</span>               <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P4 *<span class=\"keyword\">float64</span>           <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P5 *<span class=\"keyword\">string</span>            <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P6 *<span class=\"keyword\">bool</span>              <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P7 *[]<span class=\"keyword\">int</span>             <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P8 *<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    p3 := <span class=\"number\">0</span></div><div class=\"line\">    p4 := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    p5 := <span class=\"string\">\"\"</span></div><div class=\"line\">    p6 := <span class=\"literal\">false</span></div><div class=\"line\">    p7 := []<span class=\"keyword\">int</span>&#123;&#125;</div><div class=\"line\">    p8 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    s1 := S1&#123;</div><div class=\"line\">        I1: <span class=\"number\">0</span>,</div><div class=\"line\">        I2: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">        F1: <span class=\"number\">0</span>,</div><div class=\"line\">        F2: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">        S1: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        S2: <span class=\"string\">\"\"</span>,</div><div class=\"line\"></div><div class=\"line\">        B1: <span class=\"literal\">false</span>,</div><div class=\"line\">        B2: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">        Slice1: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\">        Slice2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        Slice3: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        Map1: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\">        Map2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        Map3: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        O1: <span class=\"literal\">nil</span>,</div><div class=\"line\">        O2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        O3: <span class=\"keyword\">int</span>(<span class=\"number\">0</span>),</div><div class=\"line\">        O4: <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>),</div><div class=\"line\">        O5: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        O6: <span class=\"literal\">false</span>,</div><div class=\"line\">        O7: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\">        O8: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        P1: <span class=\"literal\">nil</span>,</div><div class=\"line\">        P2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        P3: &amp;p3,</div><div class=\"line\">        P4: &amp;p4,</div><div class=\"line\">        P5: &amp;p5,</div><div class=\"line\">        P6: &amp;p6,</div><div class=\"line\">        P7: &amp;p7,</div><div class=\"line\">        P8: &amp;p8,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    b, err := json.Marshal(s1)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Printf(<span class=\"string\">\"marshal error: %v\"</span>, err)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> out bytes.Buffer</div><div class=\"line\">    json.Indent(&amp;out, b, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">    out.WriteTo(os.Stdout)</div><div class=\"line\">    <span class=\"comment\">//Output:</span></div><div class=\"line\">    <span class=\"comment\">//&#123;</span></div><div class=\"line\">    <span class=\"comment\">//\t\"I1\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"F1\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"S1\": \"\",</span></div><div class=\"line\">    <span class=\"comment\">//\t\"B1\": false,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"Slice1\": [],</span></div><div class=\"line\">    <span class=\"comment\">//\t\"Map1\": &#123;&#125;,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O1\": null,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O3\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O4\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O5\": \"\",</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O6\": false,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O7\": [],</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O8\": &#123;&#125;,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"P1\": null,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"P2\": 0</span></div><div class=\"line\">    <span class=\"comment\">//&#125;%</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/6y_m27r8EO\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>关于<code>empty value</code>的定义，这里面隐藏了一些坑。下面通过一个例子来说明。</p>\n<p>假设我们有一个社交类App，通过Restful API形式从服务端获取当前登录用户基本信息及粉丝数量。如果服务端对Response中<code>User</code>对象的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ID        <span class=\"keyword\">int</span> <span class=\"string\">`json:\"id\"`</span>                  <span class=\"comment\">// 用户id</span></div><div class=\"line\">    <span class=\"comment\">// 其它field</span></div><div class=\"line\">    FansCount <span class=\"keyword\">int</span> <span class=\"string\">`json:\"fansCount,omitempty\"`</span> <span class=\"comment\">// 粉丝数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果正在使用App时一个还没有粉丝的用户，访问Restful API的得到Response如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"id\": 1000386,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时候你会发现Response的User对象中没有<code>fansCount</code>，因为<code>fansCount</code>是个<code>int</code>类型且值为0，序列化的时候会被忽略。语义上，<code>User</code>对象中没有<code>fansCount</code>应该理解为<strong>粉丝数量未知</strong>，而不是<strong>没有粉丝</strong>。</p>\n<p>如果我们希望做到能够区分<strong>粉丝数未知</strong>和<strong>没有粉丝</strong>两种情况，需要修改<code>User</code>的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ID        <span class=\"keyword\">int</span>  <span class=\"string\">`json:\"id\"`</span>                  <span class=\"comment\">// 用户id</span></div><div class=\"line\">    <span class=\"comment\">// 其它field</span></div><div class=\"line\">    FansCount *<span class=\"keyword\">int</span> <span class=\"string\">`json:\"fansCount,omitempty\"`</span> <span class=\"comment\">// 粉丝数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将<code>FansCount</code>修改为指针类型，如果为<code>nil</code>，表示粉丝数未知；如果为整数（包括0），表示粉丝数。</p>\n<p>这么修改语义上没有漏洞了，但是代码中要给<code>FansCount</code>赋值的时候却要多一句废话。必须先将从数据源查询出粉丝数赋给一个变量，然后再将变量的指针传给<code>FansCount</code>。代码读起来实在是啰嗦：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// FansCount是int类型时候</span></div><div class=\"line\">user := dataAccess.GetUserInfo(userId)</div><div class=\"line\">user.FansCount = dataAccess.GetFansCount(userId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FansCount是*int类型的时候</span></div><div class=\"line\">user := dataAccess.GetUserInfo(userId)</div><div class=\"line\">fansCount := dataAccess.GetFansCount(userId)</div><div class=\"line\">user.FansCount = &amp;fansCount</div></pre></td></tr></table></figure>\n<h2 id=\"2号坑：JSON反序列化成interface-对Number的处理\"><a href=\"#2号坑：JSON反序列化成interface-对Number的处理\" class=\"headerlink\" title=\"2号坑：JSON反序列化成interface{}对Number的处理\"></a>2号坑：JSON反序列化成interface{}对Number的处理</h2><p><a href=\"http://json.org/\" target=\"_blank\" rel=\"external\">JSON的规范</a>中，对于数字类型，并不区分是整型还是浮点型。</p>\n<p><img src=\"http://json.org/value.gif\" alt=\"\"></p>\n<p>对于如下JSON文本:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ethancai\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"fansCount\"</span>: <span class=\"number\">9223372036854775807</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果反序列化的时候指定明确的结构体和变量类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name      <span class=\"keyword\">string</span></div><div class=\"line\">    FansCount <span class=\"keyword\">int64</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user User  <span class=\"comment\">// 类型为User</span></div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, user)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">//  &#123;Name:ethancai FansCount:9223372036854775807&#125;</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/203egccrea\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>如果反序列化不指定结构体类型或者变量类型，则JSON中的数字类型，默认被反序列化成<code>float64</code>类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">interface</span>&#123;&#125;  <span class=\"comment\">// 不指定反序列化的类型</span></div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    m := user.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">    fansCount := m[<span class=\"string\">\"fansCount\"</span>]</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, reflect.TypeOf(fansCount).Name())</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, fansCount.(<span class=\"keyword\">float64</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \tfloat64</span></div><div class=\"line\"><span class=\"comment\">//  \t9.223372036854776e+18</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/l4GzgA4WDA\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name      <span class=\"keyword\">string</span></div><div class=\"line\">    FansCount <span class=\"keyword\">interface</span>&#123;&#125;  <span class=\"comment\">// 不指定FansCount变量的类型</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user User</div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, user)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \t&#123;Name:ethancai FansCount:9.223372036854776e+18&#125;</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/SoD6SOGuCM\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>从上面的程序可以发现，如果<code>fansCount</code>精度比较高，反序列化成<code>float64</code>类型的数值时存在丢失精度的问题。</p>\n<p>如何解决这个问题，先看下面程序：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">    <span class=\"string\">\"strings\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\"></div><div class=\"line\">    decoder := json.NewDecoder(strings.NewReader(jsonStream))</div><div class=\"line\">    decoder.UseNumber()    <span class=\"comment\">// UseNumber causes the Decoder to unmarshal a number into an interface&#123;&#125; as a Number instead of as a float64.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">interface</span>&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> err := decoder.Decode(&amp;user); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    m := user.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</div><div class=\"line\">    fansCount := m[<span class=\"string\">\"fansCount\"</span>]</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, reflect.TypeOf(fansCount).PkgPath() + <span class=\"string\">\".\"</span> + reflect.TypeOf(fansCount).Name())</div><div class=\"line\"></div><div class=\"line\">     v, err := fansCount.(json.Number).Int64()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, v)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \tencoding/json.Number</span></div><div class=\"line\"><span class=\"comment\">// \t9223372036854775807</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/KYrFshVMFD\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>上面的程序，使用了<code>func (*Decoder) UseNumber</code>方法告诉反序列化JSON的数字类型的时候，不要直接转换成<code>float64</code>，而是转换成<code>json.Number</code>类型。<code>json.Number</code>内部实现机制是什么，我们来看看源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A Number represents a JSON number literal.</span></div><div class=\"line\"><span class=\"keyword\">type</span> Number <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// String returns the literal text of the number.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(n) &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Float64 returns the number as a float64.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">Float64</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">float64</span>, error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strconv.ParseFloat(<span class=\"keyword\">string</span>(n), <span class=\"number\">64</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Int64 returns the number as an int64.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">Int64</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int64</span>, error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strconv.ParseInt(<span class=\"keyword\">string</span>(n), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>json.Number</code>本质是字符串，反序列化的时候将JSON的数值先转成<code>json.Number</code>，其实是一种延迟处理的手段，待后续逻辑需要时候，再把<code>json.Number</code>转成<code>float64</code>或者<code>int64</code>。</p>\n<p>对比其它语言，Golang对JSON反序列化处理真是易用性太差（“蛋疼”）。</p>\n<p>JavaScript中所有的数值都是双精度浮点数（参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\" target=\"_blank\" rel=\"external\">这里</a>），反序列化JSON的时候不用考虑数值类型匹配问题。这里多说两句，JSON的全名JavaScript Object Notation（从名字上就能看出和JavaScript的关系非常紧密），发明人是Douglas Crockford，如果你自称熟悉JavaScript而不知道<a href=\"http://www.infoq.com/cn/news/2010/02/qconbeijing2010-douglas\" target=\"_blank\" rel=\"external\">Douglas Crockford</a>是谁，就像是自称是苹果粉丝却不知道乔布斯是谁。</p>\n<p>C#语言的第三方JSON处理library <a href=\"http://www.newtonsoft.com/json\" target=\"_blank\" rel=\"external\">Json.NET</a>反序列化JSON对数值的处理也比Golang要优雅的多：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using Newtonsoft.Json;</div><div class=\"line\"></div><div class=\"line\">public class Program</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void Main()</div><div class=\"line\">    &#123;</div><div class=\"line\">        string json = @&quot;&#123;</div><div class=\"line\">  &apos;Name&apos;: &apos;Ethan&apos;,</div><div class=\"line\">  &apos;FansCount&apos;: 121211,</div><div class=\"line\">  &apos;Price&apos;: 99.99</div><div class=\"line\">&#125;&quot;;</div><div class=\"line\"></div><div class=\"line\">        Product m = JsonConvert.DeserializeObject&lt;Product&gt;(json);</div><div class=\"line\"></div><div class=\"line\">        Console.WriteLine(m.FansCount);</div><div class=\"line\">        Console.WriteLine(m.FansCount.GetType().FullName);</div><div class=\"line\"></div><div class=\"line\">        Console.WriteLine(m.Price);</div><div class=\"line\">        Console.WriteLine(m.Price.GetType().FullName);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class Product</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Name</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public object FansCount</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public object Price</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">//      121211</div><div class=\"line\">//      System.Int64</div><div class=\"line\">//      99.99</div><div class=\"line\">//      System.Double</div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://dotnetfiddle.net/IrlMae\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p><code>Json.NET</code>在反序列化的时候自动识别数值是浮点型还是整型，这一点对开发者非常友好。</p>\n<h2 id=\"3号坑：选择什么格式表示日期\"><a href=\"#3号坑：选择什么格式表示日期\" class=\"headerlink\" title=\"3号坑：选择什么格式表示日期\"></a>3号坑：选择什么格式表示日期</h2><p>JSON的规范中并没有日期类型，不同语言的library对日期序列化的处理也不完全一致：</p>\n<p>Go语言：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">type</span> Product <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        Name      <span class=\"keyword\">string</span></div><div class=\"line\">        CreatedAt time.Time</div><div class=\"line\">    &#125;</div><div class=\"line\">    pdt := Product&#123;</div><div class=\"line\">        Name:      <span class=\"string\">\"Reds\"</span>,</div><div class=\"line\">        CreatedAt: time.Now(),</div><div class=\"line\">    &#125;</div><div class=\"line\">    b, err := json.Marshal(pdt)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    os.Stdout.Write(b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Output</span></div><div class=\"line\"><span class=\"comment\">//      &#123;\"Name\":\"Reds\",\"CreatedAt\":\"2016-06-27T07:40:54.69292134+08:00\"&#125;</span></div></pre></td></tr></table></figure>\n<p>JavaScript语言：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ node</div><div class=\"line\">&gt; var jo = &#123; name: <span class=\"string\">\"ethan\"</span>, createdAt: Date.now() &#125;;</div><div class=\"line\">undefined</div><div class=\"line\">&gt; JSON.stringify(jo)</div><div class=\"line\"><span class=\"string\">'&#123;\"name\":\"ethan\",\"createdAt\":1466984665633&#125;'</span></div></pre></td></tr></table></figure>\n<p>C#语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using Newtonsoft.Json;</div><div class=\"line\"></div><div class=\"line\">public class Program</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void Main()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Product product = new Product();</div><div class=\"line\">        product.Name = &quot;Apple&quot;;</div><div class=\"line\">        product.CreatedAt = DateTime.Now;</div><div class=\"line\"></div><div class=\"line\">        string json = JsonConvert.SerializeObject(product,</div><div class=\"line\">                            Newtonsoft.Json.Formatting.Indented,</div><div class=\"line\">                            new JsonSerializerSettings &#123;</div><div class=\"line\">                                NullValueHandling = NullValueHandling.Ignore</div><div class=\"line\">                            &#125;);</div><div class=\"line\">        Console.WriteLine(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class Product</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Name</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public DateTime CreatedAt</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Output:</div><div class=\"line\">//      &#123;</div><div class=\"line\">//        &quot;Name&quot;: &quot;Apple&quot;,</div><div class=\"line\">//        &quot;CreatedAt&quot;: &quot;2016-06-26T23:46:57.3244307+00:00&quot;</div><div class=\"line\">//      &#125;</div></pre></td></tr></table></figure>\n<p>Go的<code>encoding/json</code> package、C#的Json.NET默认把日期类型序列化成<a href=\"http://www.w3.org/TR/NOTE-datetime\" target=\"_blank\" rel=\"external\">ISO 8601标准</a>的格式，JavaScript默认把<code>Date</code>序列化从1970年1月1日0点0分0秒的毫秒数。但JavaScript的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\" target=\"_blank\" rel=\"external\"><code>dateObj.toISOString()</code></a>能够将日期类型转成ISO格式的字符串，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"external\"><code>Date.parse(dateString)</code></a>方法能够将ISO格式的日期字符串转成日期。</p>\n<p>个人认为ISO格式的日期字符串可读性更好，但序列化和反序列化时的性能应该比整数更低。这一点从Go语言中<code>time.Time</code>的定义看出来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Time <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// sec gives the number of seconds elapsed since</span></div><div class=\"line\">    <span class=\"comment\">// January 1, year 1 00:00:00 UTC.</span></div><div class=\"line\">    sec <span class=\"keyword\">int64</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// nsec specifies a non-negative nanosecond</span></div><div class=\"line\">    <span class=\"comment\">// offset within the second named by Seconds.</span></div><div class=\"line\">    <span class=\"comment\">// It must be in the range [0, 999999999].</span></div><div class=\"line\">    nsec <span class=\"keyword\">int32</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// loc specifies the Location that should be used to</span></div><div class=\"line\">    <span class=\"comment\">// determine the minute, hour, month, day, and year</span></div><div class=\"line\">    <span class=\"comment\">// that correspond to this Time.</span></div><div class=\"line\">    <span class=\"comment\">// Only the zero Time has a nil Location.</span></div><div class=\"line\">    <span class=\"comment\">// In that case it is interpreted to mean UTC.</span></div><div class=\"line\">    loc *Location</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体选择哪种形式在JSON中表示日期，有如下几点需要注意：</p>\n<ul>\n<li>选择标准格式。曾记得.NET Framework官方序列化JSON的方法中，会把日期转成如<code>&quot;\\/Date(1343660352227+0530)\\/&quot;</code>的专有格式，这样的专有格式对跨语言的访问特别不友好。</li>\n<li>如果你倾向性能，可以使用整数。如果你倾向可读性，可以使用ISO字符串。</li>\n<li>如果使用整数表示日期，而你的应用又是需要支持跨时区的，注意一定要是从<code>1970-1-1 00:00:00 UTC</code>开始计算的毫秒数，而不是当前时区的<code>1970-1-1 00:00:00</code>。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>文章：</p>\n<ul>\n<li><a href=\"http://docs.studygolang.com/pkg/encoding/json/\" target=\"_blank\" rel=\"external\">package encoding/json in Go</a></li>\n<li><a href=\"http://docs.studygolang.com/src/encoding/json/example_test.go\" target=\"_blank\" rel=\"external\">http://docs.studygolang.com/src/encoding/json/example_test.go</a></li>\n<li><a href=\"https://blog.golang.org/json-and-go\" target=\"_blank\" rel=\"external\">The Go Blog: JSON and Go</a></li>\n<li><a href=\"https://gobyexample.com/json\" target=\"_blank\" rel=\"external\">Go by example: JSON</a></li>\n<li><a href=\"http://attilaolah.eu/2013/11/29/json-decoding-in-go/\" target=\"_blank\" rel=\"external\">JSON decoding in Go</a></li>\n<li><a href=\"https://eager.io/blog/go-and-json/\" target=\"_blank\" rel=\"external\">go and json</a></li>\n<li><a href=\"https://www.goinggo.net/2014/01/decode-json-documents-in-go.html\" target=\"_blank\" rel=\"external\">Decode JSON Documents In Go</a></li>\n<li><a href=\"https://journal.paul.querna.org/articles/2014/03/31/ffjson-faster-json-in-go/\" target=\"_blank\" rel=\"external\">ffjson: faster JSON serialization for Golang</a></li>\n<li><a href=\"http://www.slideshare.net/albertstrasheim/serialization-in-go\" target=\"_blank\" rel=\"external\">Serialization in Go</a></li>\n</ul>\n<p>第三方类库：</p>\n<ul>\n<li><a href=\"https://github.com/pquerna/ffjson\" target=\"_blank\" rel=\"external\">ffjson</a>: faster JSON serialization for Go</li>\n<li><a href=\"https://github.com/bitly/go-simplejson\" target=\"_blank\" rel=\"external\">go-simplejson</a>: a Go package to interact with arbitrary JSON</li>\n<li><a href=\"https://github.com/antonholmquist/jason\" target=\"_blank\" rel=\"external\">Jason</a>: Easy-to-use JSON Library for Go</li>\n<li><a href=\"https://github.com/mailru/easyjson\" target=\"_blank\" rel=\"external\">easyjson</a></li>\n<li><a href=\"https://github.com/Jeffail/gabs\" target=\"_blank\" rel=\"external\">gabs</a></li>\n<li><a href=\"https://github.com/buger/jsonparser\" target=\"_blank\" rel=\"external\">jsonparser</a></li>\n</ul>\n<p>工具：</p>\n<ul>\n<li><a href=\"https://mholt.github.io/json-to-go/\" target=\"_blank\" rel=\"external\">JSON-to-Go</a>: instantly converts JSON into a Go type definition</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个人不会两次掉进同一个坑里，但是如果他（她）忘记了坑的位置，那就不一定了。</p>\n<p>这篇文章记录了最近使用Golang处理JSON遇到的一些坑。</p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><h2 id=\"1号坑：omitempty的行为\"><a href=\"#1号坑：omitempty的行为\" class=\"headerlink\" title=\"1号坑：omitempty的行为\"></a>1号坑：<code>omitempty</code>的行为</h2><p>C#中最常用的JSON序列化类库<code>Newtonsoft.Json</code>中，把一个类的实例序列化成JSON，如果我们不想让某个属性输出到JSON中，可以通过<code>property annotation</code>或者<code>ShouldSerialize method</code>等方法，告知序列化程序。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 通过ShouldSerialize method指示不要序列化ObsoleteSetting属性</div><div class=\"line\">class Config</div><div class=\"line\">&#123;</div><div class=\"line\">    public Fizz ObsoleteSetting &#123; get; set; &#125;</div><div class=\"line\"></div><div class=\"line\">    public bool ShouldSerializeObsoleteSetting()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过JsonIgnore的annotation指示不需要序列化ObsoleteSetting属性</div><div class=\"line\">class Config</div><div class=\"line\">&#123;</div><div class=\"line\">    [JsonIgnore]</div><div class=\"line\">    public Fizz ObsoleteSetting &#123; get; set; &#125;</div><div class=\"line\"></div><div class=\"line\">    public Bang ReplacementSetting &#123; get; set; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于<code>Newtonsoft.Json</code>的Conditional Property Serialization的更多内容参考：</p>\n<ul>\n<li><a href=\"http://www.newtonsoft.com/json/help/html/ConditionalProperties.htm\" target=\"_blank\" rel=\"external\">Conditional Property Serialization</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11564091/making-a-property-deserialize-but-not-serialize-with-json-net\" target=\"_blank\" rel=\"external\">Making a property deserialize but not serialize with json.net</a></li>\n</ul>\n<p>开始使用Golang的时候，以为<code>omitempty</code>的行为和C#中一样用来控制是否序列化字段，结果使用的时候碰了一头钉子。回头阅读<a href=\"http://docs.studygolang.com/pkg/encoding/json/#Marshal\" target=\"_blank\" rel=\"external\">encoding/json package的官方文档</a>，找到对<code>omitempty</code>行为的描述：</p>\n<blockquote>\n<p>Struct values encode as JSON objects. Each exported struct field becomes a member of the object unless</p>\n<ul>\n<li>the field’s tag is “-“, or</li>\n<li>the field is empty and its tag specifies the “omitempty” option.</li>\n</ul>\n<p>The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. The object’s default key string is the struct field name but can be specified in the struct field’s tag value. The “json” key in the struct field’s tag value is the key name, followed by an optional comma and options. Examples:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">// Field is ignored by this package.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"-\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"myName\".</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"myName\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"myName\" and</span></div><div class=\"line\">&gt; <span class=\"comment\">// the field is omitted from the object if its value is empty,</span></div><div class=\"line\">&gt; <span class=\"comment\">// as defined above.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\"myName,omitempty\"`</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// Field appears in JSON as key \"Field\" (the default), but</span></div><div class=\"line\">&gt; <span class=\"comment\">// the field is skipped if empty.</span></div><div class=\"line\">&gt; <span class=\"comment\">// Note the leading comma.</span></div><div class=\"line\">&gt; Field <span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>Golang中，如果指定一个<code>field</code>序列化成JSON的变量名字为<code>-</code>，则序列化的时候自动忽略这个<code>field</code>。这种用法，才是和上面<code>JsonIgnore</code>的用法的作用是一样的。</p>\n<p>而<code>omitempty</code>的作用是当一个<code>field</code>的值是<code>empty</code>的时候，序列化JSON时候忽略这个<code>field</code>（<code>Newtonsoft.Json</code>的类似用法参考<a href=\"http://stackoverflow.com/questions/6507889/how-to-ignore-a-property-in-class-if-null-using-json-net\" target=\"_blank\" rel=\"external\">这里</a>和<a href=\"https://dotnetfiddle.net/VXqRnm\" target=\"_blank\" rel=\"external\">例子</a>）。这里需要注意的是关于<code>emtpty</code>的定义：</p>\n<blockquote>\n<p>The empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero.</p>\n</blockquote>\n<p>通过下面的例子，来加深对<code>empty values</code>的了解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> S1 <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    I1 <span class=\"keyword\">int</span></div><div class=\"line\">    I2 <span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    F1 <span class=\"keyword\">float64</span></div><div class=\"line\">    F2 <span class=\"keyword\">float64</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    S1 <span class=\"keyword\">string</span></div><div class=\"line\">    S2 <span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    B1 <span class=\"keyword\">bool</span></div><div class=\"line\">    B2 <span class=\"keyword\">bool</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    Slice1 []<span class=\"keyword\">int</span></div><div class=\"line\">    Slice2 []<span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    Slice3 []<span class=\"keyword\">int</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    Map1 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></div><div class=\"line\">    Map2 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    Map3 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    O1 <span class=\"keyword\">interface</span>&#123;&#125;</div><div class=\"line\">    O2 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O3 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O4 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O5 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O6 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O7 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    O8 <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\"></div><div class=\"line\">    P1 *<span class=\"keyword\">int</span></div><div class=\"line\">    P2 *<span class=\"keyword\">int</span>               <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P3 *<span class=\"keyword\">int</span>               <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P4 *<span class=\"keyword\">float64</span>           <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P5 *<span class=\"keyword\">string</span>            <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P6 *<span class=\"keyword\">bool</span>              <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P7 *[]<span class=\"keyword\">int</span>             <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">    P8 *<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`json:\",omitempty\"`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    p3 := <span class=\"number\">0</span></div><div class=\"line\">    p4 := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    p5 := <span class=\"string\">\"\"</span></div><div class=\"line\">    p6 := <span class=\"literal\">false</span></div><div class=\"line\">    p7 := []<span class=\"keyword\">int</span>&#123;&#125;</div><div class=\"line\">    p8 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    s1 := S1&#123;</div><div class=\"line\">        I1: <span class=\"number\">0</span>,</div><div class=\"line\">        I2: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">        F1: <span class=\"number\">0</span>,</div><div class=\"line\">        F2: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">        S1: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        S2: <span class=\"string\">\"\"</span>,</div><div class=\"line\"></div><div class=\"line\">        B1: <span class=\"literal\">false</span>,</div><div class=\"line\">        B2: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">        Slice1: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\">        Slice2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        Slice3: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        Map1: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\">        Map2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        Map3: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        O1: <span class=\"literal\">nil</span>,</div><div class=\"line\">        O2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        O3: <span class=\"keyword\">int</span>(<span class=\"number\">0</span>),</div><div class=\"line\">        O4: <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>),</div><div class=\"line\">        O5: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        O6: <span class=\"literal\">false</span>,</div><div class=\"line\">        O7: []<span class=\"keyword\">int</span>&#123;&#125;,</div><div class=\"line\">        O8: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        P1: <span class=\"literal\">nil</span>,</div><div class=\"line\">        P2: <span class=\"literal\">nil</span>,</div><div class=\"line\">        P3: &amp;p3,</div><div class=\"line\">        P4: &amp;p4,</div><div class=\"line\">        P5: &amp;p5,</div><div class=\"line\">        P6: &amp;p6,</div><div class=\"line\">        P7: &amp;p7,</div><div class=\"line\">        P8: &amp;p8,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    b, err := json.Marshal(s1)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Printf(<span class=\"string\">\"marshal error: %v\"</span>, err)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> out bytes.Buffer</div><div class=\"line\">    json.Indent(&amp;out, b, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">    out.WriteTo(os.Stdout)</div><div class=\"line\">    <span class=\"comment\">//Output:</span></div><div class=\"line\">    <span class=\"comment\">//&#123;</span></div><div class=\"line\">    <span class=\"comment\">//\t\"I1\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"F1\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"S1\": \"\",</span></div><div class=\"line\">    <span class=\"comment\">//\t\"B1\": false,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"Slice1\": [],</span></div><div class=\"line\">    <span class=\"comment\">//\t\"Map1\": &#123;&#125;,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O1\": null,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O3\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O4\": 0,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O5\": \"\",</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O6\": false,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O7\": [],</span></div><div class=\"line\">    <span class=\"comment\">//\t\"O8\": &#123;&#125;,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"P1\": null,</span></div><div class=\"line\">    <span class=\"comment\">//\t\"P2\": 0</span></div><div class=\"line\">    <span class=\"comment\">//&#125;%</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/6y_m27r8EO\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>关于<code>empty value</code>的定义，这里面隐藏了一些坑。下面通过一个例子来说明。</p>\n<p>假设我们有一个社交类App，通过Restful API形式从服务端获取当前登录用户基本信息及粉丝数量。如果服务端对Response中<code>User</code>对象的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ID        <span class=\"keyword\">int</span> <span class=\"string\">`json:\"id\"`</span>                  <span class=\"comment\">// 用户id</span></div><div class=\"line\">    <span class=\"comment\">// 其它field</span></div><div class=\"line\">    FansCount <span class=\"keyword\">int</span> <span class=\"string\">`json:\"fansCount,omitempty\"`</span> <span class=\"comment\">// 粉丝数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果正在使用App时一个还没有粉丝的用户，访问Restful API的得到Response如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"id\": 1000386,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时候你会发现Response的User对象中没有<code>fansCount</code>，因为<code>fansCount</code>是个<code>int</code>类型且值为0，序列化的时候会被忽略。语义上，<code>User</code>对象中没有<code>fansCount</code>应该理解为<strong>粉丝数量未知</strong>，而不是<strong>没有粉丝</strong>。</p>\n<p>如果我们希望做到能够区分<strong>粉丝数未知</strong>和<strong>没有粉丝</strong>两种情况，需要修改<code>User</code>的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ID        <span class=\"keyword\">int</span>  <span class=\"string\">`json:\"id\"`</span>                  <span class=\"comment\">// 用户id</span></div><div class=\"line\">    <span class=\"comment\">// 其它field</span></div><div class=\"line\">    FansCount *<span class=\"keyword\">int</span> <span class=\"string\">`json:\"fansCount,omitempty\"`</span> <span class=\"comment\">// 粉丝数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将<code>FansCount</code>修改为指针类型，如果为<code>nil</code>，表示粉丝数未知；如果为整数（包括0），表示粉丝数。</p>\n<p>这么修改语义上没有漏洞了，但是代码中要给<code>FansCount</code>赋值的时候却要多一句废话。必须先将从数据源查询出粉丝数赋给一个变量，然后再将变量的指针传给<code>FansCount</code>。代码读起来实在是啰嗦：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// FansCount是int类型时候</span></div><div class=\"line\">user := dataAccess.GetUserInfo(userId)</div><div class=\"line\">user.FansCount = dataAccess.GetFansCount(userId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FansCount是*int类型的时候</span></div><div class=\"line\">user := dataAccess.GetUserInfo(userId)</div><div class=\"line\">fansCount := dataAccess.GetFansCount(userId)</div><div class=\"line\">user.FansCount = &amp;fansCount</div></pre></td></tr></table></figure>\n<h2 id=\"2号坑：JSON反序列化成interface-对Number的处理\"><a href=\"#2号坑：JSON反序列化成interface-对Number的处理\" class=\"headerlink\" title=\"2号坑：JSON反序列化成interface{}对Number的处理\"></a>2号坑：JSON反序列化成interface{}对Number的处理</h2><p><a href=\"http://json.org/\" target=\"_blank\" rel=\"external\">JSON的规范</a>中，对于数字类型，并不区分是整型还是浮点型。</p>\n<p><img src=\"http://json.org/value.gif\" alt=\"\"></p>\n<p>对于如下JSON文本:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ethancai\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"fansCount\"</span>: <span class=\"number\">9223372036854775807</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果反序列化的时候指定明确的结构体和变量类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name      <span class=\"keyword\">string</span></div><div class=\"line\">    FansCount <span class=\"keyword\">int64</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user User  <span class=\"comment\">// 类型为User</span></div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, user)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">//  &#123;Name:ethancai FansCount:9223372036854775807&#125;</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/203egccrea\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>如果反序列化不指定结构体类型或者变量类型，则JSON中的数字类型，默认被反序列化成<code>float64</code>类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">interface</span>&#123;&#125;  <span class=\"comment\">// 不指定反序列化的类型</span></div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    m := user.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">    fansCount := m[<span class=\"string\">\"fansCount\"</span>]</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, reflect.TypeOf(fansCount).Name())</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, fansCount.(<span class=\"keyword\">float64</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \tfloat64</span></div><div class=\"line\"><span class=\"comment\">//  \t9.223372036854776e+18</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/l4GzgA4WDA\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name      <span class=\"keyword\">string</span></div><div class=\"line\">    FansCount <span class=\"keyword\">interface</span>&#123;&#125;  <span class=\"comment\">// 不指定FansCount变量的类型</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\">    <span class=\"keyword\">var</span> user User</div><div class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(jsonStream), &amp;user)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, user)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \t&#123;Name:ethancai FansCount:9.223372036854776e+18&#125;</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/SoD6SOGuCM\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>从上面的程序可以发现，如果<code>fansCount</code>精度比较高，反序列化成<code>float64</code>类型的数值时存在丢失精度的问题。</p>\n<p>如何解决这个问题，先看下面程序：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">    <span class=\"string\">\"strings\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> jsonStream = <span class=\"string\">`</span></div><div class=\"line\">        &#123;\"name\":\"ethancai\", \"fansCount\": 9223372036854775807&#125;</div><div class=\"line\">    `</div><div class=\"line\"></div><div class=\"line\">    decoder := json.NewDecoder(strings.NewReader(jsonStream))</div><div class=\"line\">    decoder.UseNumber()    <span class=\"comment\">// UseNumber causes the Decoder to unmarshal a number into an interface&#123;&#125; as a Number instead of as a float64.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">interface</span>&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> err := decoder.Decode(&amp;user); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    m := user.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</div><div class=\"line\">    fansCount := m[<span class=\"string\">\"fansCount\"</span>]</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, reflect.TypeOf(fansCount).PkgPath() + <span class=\"string\">\".\"</span> + reflect.TypeOf(fansCount).Name())</div><div class=\"line\"></div><div class=\"line\">     v, err := fansCount.(json.Number).Int64()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"%+v \\n\"</span>, v)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// \tencoding/json.Number</span></div><div class=\"line\"><span class=\"comment\">// \t9223372036854775807</span></div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://play.golang.org/p/KYrFshVMFD\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p>上面的程序，使用了<code>func (*Decoder) UseNumber</code>方法告诉反序列化JSON的数字类型的时候，不要直接转换成<code>float64</code>，而是转换成<code>json.Number</code>类型。<code>json.Number</code>内部实现机制是什么，我们来看看源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A Number represents a JSON number literal.</span></div><div class=\"line\"><span class=\"keyword\">type</span> Number <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// String returns the literal text of the number.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(n) &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Float64 returns the number as a float64.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">Float64</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">float64</span>, error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strconv.ParseFloat(<span class=\"keyword\">string</span>(n), <span class=\"number\">64</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Int64 returns the number as an int64.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n Number)</span> <span class=\"title\">Int64</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int64</span>, error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strconv.ParseInt(<span class=\"keyword\">string</span>(n), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>json.Number</code>本质是字符串，反序列化的时候将JSON的数值先转成<code>json.Number</code>，其实是一种延迟处理的手段，待后续逻辑需要时候，再把<code>json.Number</code>转成<code>float64</code>或者<code>int64</code>。</p>\n<p>对比其它语言，Golang对JSON反序列化处理真是易用性太差（“蛋疼”）。</p>\n<p>JavaScript中所有的数值都是双精度浮点数（参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\" target=\"_blank\" rel=\"external\">这里</a>），反序列化JSON的时候不用考虑数值类型匹配问题。这里多说两句，JSON的全名JavaScript Object Notation（从名字上就能看出和JavaScript的关系非常紧密），发明人是Douglas Crockford，如果你自称熟悉JavaScript而不知道<a href=\"http://www.infoq.com/cn/news/2010/02/qconbeijing2010-douglas\" target=\"_blank\" rel=\"external\">Douglas Crockford</a>是谁，就像是自称是苹果粉丝却不知道乔布斯是谁。</p>\n<p>C#语言的第三方JSON处理library <a href=\"http://www.newtonsoft.com/json\" target=\"_blank\" rel=\"external\">Json.NET</a>反序列化JSON对数值的处理也比Golang要优雅的多：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using Newtonsoft.Json;</div><div class=\"line\"></div><div class=\"line\">public class Program</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void Main()</div><div class=\"line\">    &#123;</div><div class=\"line\">        string json = @&quot;&#123;</div><div class=\"line\">  &apos;Name&apos;: &apos;Ethan&apos;,</div><div class=\"line\">  &apos;FansCount&apos;: 121211,</div><div class=\"line\">  &apos;Price&apos;: 99.99</div><div class=\"line\">&#125;&quot;;</div><div class=\"line\"></div><div class=\"line\">        Product m = JsonConvert.DeserializeObject&lt;Product&gt;(json);</div><div class=\"line\"></div><div class=\"line\">        Console.WriteLine(m.FansCount);</div><div class=\"line\">        Console.WriteLine(m.FansCount.GetType().FullName);</div><div class=\"line\"></div><div class=\"line\">        Console.WriteLine(m.Price);</div><div class=\"line\">        Console.WriteLine(m.Price.GetType().FullName);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class Product</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Name</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public object FansCount</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public object Price</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">//      121211</div><div class=\"line\">//      System.Int64</div><div class=\"line\">//      99.99</div><div class=\"line\">//      System.Double</div></pre></td></tr></table></figure>\n<p><em>点击<a href=\"https://dotnetfiddle.net/IrlMae\" target=\"_blank\" rel=\"external\">这里</a>执行上面的程序</em></p>\n<p><code>Json.NET</code>在反序列化的时候自动识别数值是浮点型还是整型，这一点对开发者非常友好。</p>\n<h2 id=\"3号坑：选择什么格式表示日期\"><a href=\"#3号坑：选择什么格式表示日期\" class=\"headerlink\" title=\"3号坑：选择什么格式表示日期\"></a>3号坑：选择什么格式表示日期</h2><p>JSON的规范中并没有日期类型，不同语言的library对日期序列化的处理也不完全一致：</p>\n<p>Go语言：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">type</span> Product <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        Name      <span class=\"keyword\">string</span></div><div class=\"line\">        CreatedAt time.Time</div><div class=\"line\">    &#125;</div><div class=\"line\">    pdt := Product&#123;</div><div class=\"line\">        Name:      <span class=\"string\">\"Reds\"</span>,</div><div class=\"line\">        CreatedAt: time.Now(),</div><div class=\"line\">    &#125;</div><div class=\"line\">    b, err := json.Marshal(pdt)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    os.Stdout.Write(b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Output</span></div><div class=\"line\"><span class=\"comment\">//      &#123;\"Name\":\"Reds\",\"CreatedAt\":\"2016-06-27T07:40:54.69292134+08:00\"&#125;</span></div></pre></td></tr></table></figure>\n<p>JavaScript语言：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ node</div><div class=\"line\">&gt; var jo = &#123; name: <span class=\"string\">\"ethan\"</span>, createdAt: Date.now() &#125;;</div><div class=\"line\">undefined</div><div class=\"line\">&gt; JSON.stringify(jo)</div><div class=\"line\"><span class=\"string\">'&#123;\"name\":\"ethan\",\"createdAt\":1466984665633&#125;'</span></div></pre></td></tr></table></figure>\n<p>C#语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using Newtonsoft.Json;</div><div class=\"line\"></div><div class=\"line\">public class Program</div><div class=\"line\">&#123;</div><div class=\"line\">    public static void Main()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Product product = new Product();</div><div class=\"line\">        product.Name = &quot;Apple&quot;;</div><div class=\"line\">        product.CreatedAt = DateTime.Now;</div><div class=\"line\"></div><div class=\"line\">        string json = JsonConvert.SerializeObject(product,</div><div class=\"line\">                            Newtonsoft.Json.Formatting.Indented,</div><div class=\"line\">                            new JsonSerializerSettings &#123;</div><div class=\"line\">                                NullValueHandling = NullValueHandling.Ignore</div><div class=\"line\">                            &#125;);</div><div class=\"line\">        Console.WriteLine(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class Product</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Name</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public DateTime CreatedAt</div><div class=\"line\">    &#123;</div><div class=\"line\">        get;</div><div class=\"line\">        set;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Output:</div><div class=\"line\">//      &#123;</div><div class=\"line\">//        &quot;Name&quot;: &quot;Apple&quot;,</div><div class=\"line\">//        &quot;CreatedAt&quot;: &quot;2016-06-26T23:46:57.3244307+00:00&quot;</div><div class=\"line\">//      &#125;</div></pre></td></tr></table></figure>\n<p>Go的<code>encoding/json</code> package、C#的Json.NET默认把日期类型序列化成<a href=\"http://www.w3.org/TR/NOTE-datetime\" target=\"_blank\" rel=\"external\">ISO 8601标准</a>的格式，JavaScript默认把<code>Date</code>序列化从1970年1月1日0点0分0秒的毫秒数。但JavaScript的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\" target=\"_blank\" rel=\"external\"><code>dateObj.toISOString()</code></a>能够将日期类型转成ISO格式的字符串，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"external\"><code>Date.parse(dateString)</code></a>方法能够将ISO格式的日期字符串转成日期。</p>\n<p>个人认为ISO格式的日期字符串可读性更好，但序列化和反序列化时的性能应该比整数更低。这一点从Go语言中<code>time.Time</code>的定义看出来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Time <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// sec gives the number of seconds elapsed since</span></div><div class=\"line\">    <span class=\"comment\">// January 1, year 1 00:00:00 UTC.</span></div><div class=\"line\">    sec <span class=\"keyword\">int64</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// nsec specifies a non-negative nanosecond</span></div><div class=\"line\">    <span class=\"comment\">// offset within the second named by Seconds.</span></div><div class=\"line\">    <span class=\"comment\">// It must be in the range [0, 999999999].</span></div><div class=\"line\">    nsec <span class=\"keyword\">int32</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// loc specifies the Location that should be used to</span></div><div class=\"line\">    <span class=\"comment\">// determine the minute, hour, month, day, and year</span></div><div class=\"line\">    <span class=\"comment\">// that correspond to this Time.</span></div><div class=\"line\">    <span class=\"comment\">// Only the zero Time has a nil Location.</span></div><div class=\"line\">    <span class=\"comment\">// In that case it is interpreted to mean UTC.</span></div><div class=\"line\">    loc *Location</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体选择哪种形式在JSON中表示日期，有如下几点需要注意：</p>\n<ul>\n<li>选择标准格式。曾记得.NET Framework官方序列化JSON的方法中，会把日期转成如<code>&quot;\\/Date(1343660352227+0530)\\/&quot;</code>的专有格式，这样的专有格式对跨语言的访问特别不友好。</li>\n<li>如果你倾向性能，可以使用整数。如果你倾向可读性，可以使用ISO字符串。</li>\n<li>如果使用整数表示日期，而你的应用又是需要支持跨时区的，注意一定要是从<code>1970-1-1 00:00:00 UTC</code>开始计算的毫秒数，而不是当前时区的<code>1970-1-1 00:00:00</code>。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>文章：</p>\n<ul>\n<li><a href=\"http://docs.studygolang.com/pkg/encoding/json/\" target=\"_blank\" rel=\"external\">package encoding/json in Go</a></li>\n<li><a href=\"http://docs.studygolang.com/src/encoding/json/example_test.go\" target=\"_blank\" rel=\"external\">http://docs.studygolang.com/src/encoding/json/example_test.go</a></li>\n<li><a href=\"https://blog.golang.org/json-and-go\" target=\"_blank\" rel=\"external\">The Go Blog: JSON and Go</a></li>\n<li><a href=\"https://gobyexample.com/json\" target=\"_blank\" rel=\"external\">Go by example: JSON</a></li>\n<li><a href=\"http://attilaolah.eu/2013/11/29/json-decoding-in-go/\" target=\"_blank\" rel=\"external\">JSON decoding in Go</a></li>\n<li><a href=\"https://eager.io/blog/go-and-json/\" target=\"_blank\" rel=\"external\">go and json</a></li>\n<li><a href=\"https://www.goinggo.net/2014/01/decode-json-documents-in-go.html\" target=\"_blank\" rel=\"external\">Decode JSON Documents In Go</a></li>\n<li><a href=\"https://journal.paul.querna.org/articles/2014/03/31/ffjson-faster-json-in-go/\" target=\"_blank\" rel=\"external\">ffjson: faster JSON serialization for Golang</a></li>\n<li><a href=\"http://www.slideshare.net/albertstrasheim/serialization-in-go\" target=\"_blank\" rel=\"external\">Serialization in Go</a></li>\n</ul>\n<p>第三方类库：</p>\n<ul>\n<li><a href=\"https://github.com/pquerna/ffjson\" target=\"_blank\" rel=\"external\">ffjson</a>: faster JSON serialization for Go</li>\n<li><a href=\"https://github.com/bitly/go-simplejson\" target=\"_blank\" rel=\"external\">go-simplejson</a>: a Go package to interact with arbitrary JSON</li>\n<li><a href=\"https://github.com/antonholmquist/jason\" target=\"_blank\" rel=\"external\">Jason</a>: Easy-to-use JSON Library for Go</li>\n<li><a href=\"https://github.com/mailru/easyjson\" target=\"_blank\" rel=\"external\">easyjson</a></li>\n<li><a href=\"https://github.com/Jeffail/gabs\" target=\"_blank\" rel=\"external\">gabs</a></li>\n<li><a href=\"https://github.com/buger/jsonparser\" target=\"_blank\" rel=\"external\">jsonparser</a></li>\n</ul>\n<p>工具：</p>\n<ul>\n<li><a href=\"https://mholt.github.io/json-to-go/\" target=\"_blank\" rel=\"external\">JSON-to-Go</a>: instantly converts JSON into a Go type definition</li>\n</ul>\n"},{"title":"学习Elasticsearch之4：配置一个3节点Elasticsearch集群(不区分主节点和数据节点)","date":"2016-08-06T01:46:38.000Z","_content":"\n\n{% asset_img es-cluster.jpg %}\n\n# 安装版本\n\nElasticsearch（通过`apt`方式安装）:\n\n- Elasticsearch 2.3.2\n\nJar插件:\n\n- [elasticsearch-analysis-ik](https://github.com/medcl/elasticsearch-analysis-ik): 1.9.2\n- [elasticsearch-analysis-pinyin](https://github.com/medcl/elasticsearch-analysis-pinyin): 1.7.2\n- [elasticsearch-analysis-stconvert](https://github.com/medcl/elasticsearch-analysis-stconvert): 1.8.2\n\nSite插件:\n\n- [elasticsearch-head](https://github.com/mobz/elasticsearch-head): 最新版\n\n# 各节点服务器\n\n- Node1\n    - 集群名：`search-1`\n    - 节点名：`node-1`\n    - 内网IP: `192.168.31.171`\n- Node2\n    - 集群名：`search-1`\n    - 节点名：`node-2`\n    - 内网IP: `192.168.31.221`\n- Node3\n    - 集群名：`search-1`\n    - 节点名：`node-3`\n    - 内网IP: `192.168.31.154`\n\n# 各节点安装的插件\n\n| Node  | Installed Plugins           |\n|:------|:----------------------------|\n| Node1 | ik, pinyin, stconvert, head |\n| Node1 | ik, pinyin, stconvert       |\n| Node1 | ik, pinyin, stconvert       |\n\n# 各节点配置\n\n三节点的配置：\n\n- Node 1\n\n```yaml\ncluster.name: search-1\nnode.name: node-1\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n- Node 2\n\n```yaml\ncluster.name: search-1\nnode.name: node-2\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n- Node 3\n\n```yaml\ncluster.name: search-1\nnode.name: node-3\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n# 常用操作\n\n上传插件\n\n```bash\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.171:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.171:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.171:~/\n\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.221:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.221:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.221:~/\n\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.154:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.154:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.154:~/\n\n```\n\n拷贝插件到`/usr/share/elasticsearch/plugins`目录\n\n```bash\n$ mv elasticsearch-analysis-ik-1.9.2 /usr/share/elasticsearch/plugins/\n$ mv elasticsearch-analysis-pinyin-1.7.2 /usr/share/elasticsearch/plugins/\n$ mv elasticsearch-analysis-stconvert-1.8.2 /usr/share/elasticsearch/plugins/\n\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-ik-1.9.2/             # 修改插件访问权限，允许elasticsearch服务访问插件\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-pinyin-1.7.2/         # 修改插件访问权限，允许elasticsearch服务访问插件\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-stconvert-1.8.2/      # 修改插件访问权限，允许elasticsearch服务访问插件\n```\n","source":"_posts/configure-smallest-elasticsearch-cluster.md","raw":"---\ntitle: 学习Elasticsearch之4：配置一个3节点Elasticsearch集群(不区分主节点和数据节点)\ntags:\n  - elasticsearch\ncategories:\n  - 软件开发\ndate: 2016-08-06 09:46:38\n---\n\n\n{% asset_img es-cluster.jpg %}\n\n# 安装版本\n\nElasticsearch（通过`apt`方式安装）:\n\n- Elasticsearch 2.3.2\n\nJar插件:\n\n- [elasticsearch-analysis-ik](https://github.com/medcl/elasticsearch-analysis-ik): 1.9.2\n- [elasticsearch-analysis-pinyin](https://github.com/medcl/elasticsearch-analysis-pinyin): 1.7.2\n- [elasticsearch-analysis-stconvert](https://github.com/medcl/elasticsearch-analysis-stconvert): 1.8.2\n\nSite插件:\n\n- [elasticsearch-head](https://github.com/mobz/elasticsearch-head): 最新版\n\n# 各节点服务器\n\n- Node1\n    - 集群名：`search-1`\n    - 节点名：`node-1`\n    - 内网IP: `192.168.31.171`\n- Node2\n    - 集群名：`search-1`\n    - 节点名：`node-2`\n    - 内网IP: `192.168.31.221`\n- Node3\n    - 集群名：`search-1`\n    - 节点名：`node-3`\n    - 内网IP: `192.168.31.154`\n\n# 各节点安装的插件\n\n| Node  | Installed Plugins           |\n|:------|:----------------------------|\n| Node1 | ik, pinyin, stconvert, head |\n| Node1 | ik, pinyin, stconvert       |\n| Node1 | ik, pinyin, stconvert       |\n\n# 各节点配置\n\n三节点的配置：\n\n- Node 1\n\n```yaml\ncluster.name: search-1\nnode.name: node-1\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n- Node 2\n\n```yaml\ncluster.name: search-1\nnode.name: node-2\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n- Node 3\n\n```yaml\ncluster.name: search-1\nnode.name: node-3\n\nnode.master: true\nnode.data: true\n\nindex.number_of_shards: 3\nindex.number_of_replicas: 1\n\nnetwork.host: 0.0.0.0                           # 绑定本机所有端口\n\ndiscovery.zen.ping.multicast.enabled: false     # 禁止多播\ndiscovery.zen.minimum_master_nodes: 2           # 配置最少节点数量，防止脑裂\ndiscovery.zen.ping.unicast.hosts: ['192.168.31.171', '192.168.31.221', '192.168.31.154']\n```\n\n# 常用操作\n\n上传插件\n\n```bash\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.171:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.171:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.171:~/\n\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.221:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.221:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.221:~/\n\n$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.154:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.154:~/\n$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.154:~/\n\n```\n\n拷贝插件到`/usr/share/elasticsearch/plugins`目录\n\n```bash\n$ mv elasticsearch-analysis-ik-1.9.2 /usr/share/elasticsearch/plugins/\n$ mv elasticsearch-analysis-pinyin-1.7.2 /usr/share/elasticsearch/plugins/\n$ mv elasticsearch-analysis-stconvert-1.8.2 /usr/share/elasticsearch/plugins/\n\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-ik-1.9.2/             # 修改插件访问权限，允许elasticsearch服务访问插件\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-pinyin-1.7.2/         # 修改插件访问权限，允许elasticsearch服务访问插件\n$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-stconvert-1.8.2/      # 修改插件访问权限，允许elasticsearch服务访问插件\n```\n","slug":"configure-smallest-elasticsearch-cluster","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneoe000fv7bfq5z6bsbg","content":"<img src=\"/2016/08/06/configure-smallest-elasticsearch-cluster/es-cluster.jpg\" alt=\"es-cluster.jpg\" title=\"\">\n<h1 id=\"安装版本\"><a href=\"#安装版本\" class=\"headerlink\" title=\"安装版本\"></a>安装版本</h1><p>Elasticsearch（通过<code>apt</code>方式安装）:</p>\n<ul>\n<li>Elasticsearch 2.3.2</li>\n</ul>\n<p>Jar插件:</p>\n<ul>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-ik</a>: 1.9.2</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-pinyin</a>: 1.7.2</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-stconvert</a>: 1.8.2</li>\n</ul>\n<p>Site插件:</p>\n<ul>\n<li><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">elasticsearch-head</a>: 最新版</li>\n</ul>\n<h1 id=\"各节点服务器\"><a href=\"#各节点服务器\" class=\"headerlink\" title=\"各节点服务器\"></a>各节点服务器</h1><ul>\n<li>Node1<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-1</code></li>\n<li>内网IP: <code>192.168.31.171</code></li>\n</ul>\n</li>\n<li>Node2<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-2</code></li>\n<li>内网IP: <code>192.168.31.221</code></li>\n</ul>\n</li>\n<li>Node3<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-3</code></li>\n<li>内网IP: <code>192.168.31.154</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"各节点安装的插件\"><a href=\"#各节点安装的插件\" class=\"headerlink\" title=\"各节点安装的插件\"></a>各节点安装的插件</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Node</th>\n<th style=\"text-align:left\">Installed Plugins</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert, head</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"各节点配置\"><a href=\"#各节点配置\" class=\"headerlink\" title=\"各节点配置\"></a>各节点配置</h1><p>三节点的配置：</p>\n<ul>\n<li>Node 1</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Node 2</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Node 3</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><p>上传插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.171:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.171:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.171:~/</div><div class=\"line\"></div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.221:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.221:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.221:~/</div><div class=\"line\"></div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.154:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.154:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.154:~/</div></pre></td></tr></table></figure>\n<p>拷贝插件到<code>/usr/share/elasticsearch/plugins</code>目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mv elasticsearch-analysis-ik-1.9.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\">$ mv elasticsearch-analysis-pinyin-1.7.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\">$ mv elasticsearch-analysis-stconvert-1.8.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\"></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-ik-1.9.2/             <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-pinyin-1.7.2/         <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-stconvert-1.8.2/      <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2016/08/06/configure-smallest-elasticsearch-cluster/es-cluster.jpg\" alt=\"es-cluster.jpg\" title=\"\">\n<h1 id=\"安装版本\"><a href=\"#安装版本\" class=\"headerlink\" title=\"安装版本\"></a>安装版本</h1><p>Elasticsearch（通过<code>apt</code>方式安装）:</p>\n<ul>\n<li>Elasticsearch 2.3.2</li>\n</ul>\n<p>Jar插件:</p>\n<ul>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-ik</a>: 1.9.2</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-pinyin</a>: 1.7.2</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-stconvert</a>: 1.8.2</li>\n</ul>\n<p>Site插件:</p>\n<ul>\n<li><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">elasticsearch-head</a>: 最新版</li>\n</ul>\n<h1 id=\"各节点服务器\"><a href=\"#各节点服务器\" class=\"headerlink\" title=\"各节点服务器\"></a>各节点服务器</h1><ul>\n<li>Node1<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-1</code></li>\n<li>内网IP: <code>192.168.31.171</code></li>\n</ul>\n</li>\n<li>Node2<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-2</code></li>\n<li>内网IP: <code>192.168.31.221</code></li>\n</ul>\n</li>\n<li>Node3<ul>\n<li>集群名：<code>search-1</code></li>\n<li>节点名：<code>node-3</code></li>\n<li>内网IP: <code>192.168.31.154</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"各节点安装的插件\"><a href=\"#各节点安装的插件\" class=\"headerlink\" title=\"各节点安装的插件\"></a>各节点安装的插件</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Node</th>\n<th style=\"text-align:left\">Installed Plugins</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert, head</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Node1</td>\n<td style=\"text-align:left\">ik, pinyin, stconvert</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"各节点配置\"><a href=\"#各节点配置\" class=\"headerlink\" title=\"各节点配置\"></a>各节点配置</h1><p>三节点的配置：</p>\n<ul>\n<li>Node 1</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Node 2</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Node 3</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">search-1</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">node-3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">node.data:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">index.number_of_shards:</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"string\">index.number_of_replicas:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>                           <span class=\"comment\"># 绑定本机所有端口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.multicast.enabled:</span> <span class=\"literal\">false</span>     <span class=\"comment\"># 禁止多播</span></div><div class=\"line\"><span class=\"string\">discovery.zen.minimum_master_nodes:</span> <span class=\"number\">2</span>           <span class=\"comment\"># 配置最少节点数量，防止脑裂</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">['192.168.31.171',</span> <span class=\"string\">'192.168.31.221'</span><span class=\"string\">,</span> <span class=\"string\">'192.168.31.154'</span><span class=\"string\">]</span></div></pre></td></tr></table></figure>\n<h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><p>上传插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.171:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.171:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.171:~/</div><div class=\"line\"></div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.221:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.221:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.221:~/</div><div class=\"line\"></div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-ik-1.9.2 ubuntu@192.168.31.154:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-pinyin-1.7.2 ubuntu@192.168.31.154:~/</div><div class=\"line\">$ scp -r -i ~/dev.pem elasticsearch-analysis-stconvert-1.8.2 ubuntu@192.168.31.154:~/</div></pre></td></tr></table></figure>\n<p>拷贝插件到<code>/usr/share/elasticsearch/plugins</code>目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mv elasticsearch-analysis-ik-1.9.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\">$ mv elasticsearch-analysis-pinyin-1.7.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\">$ mv elasticsearch-analysis-stconvert-1.8.2 /usr/share/elasticsearch/plugins/</div><div class=\"line\"></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-ik-1.9.2/             <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-pinyin-1.7.2/         <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div><div class=\"line\">$ chown -R elasticsearch:elasticsearch elasticsearch-analysis-stconvert-1.8.2/      <span class=\"comment\"># 修改插件访问权限，允许elasticsearch服务访问插件</span></div></pre></td></tr></table></figure>\n"},{"title":"学习Elasticsearch之3：Elastcisearch基础概念","date":"2016-08-05T17:00:33.000Z","_content":"\n{% asset_img Brueghel-tower-of-babel.jpg %}\n\n参考[ElasticSearch基础概念](https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html):\n\n# **Near Realtime:**\n\nthere is a slight latency (normally one second) from the time you index a document until the time it becomes searchable.\n\n# **Cluster**\n\nA cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is \"elasticsearch\". This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name.\n\nMake sure that you don’t reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev, logging-stage, and logging-prod for the development, staging, and production clusters.\n\nNote that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name.\n\n# **Node**\n\nA node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Marvel character name that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster.\n\nA node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and—assuming they can discover each other—they will all automatically form and join a single cluster named elasticsearch.\n\nIn a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch.\n\n# **Index**\n\nAn index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.\n\nIn a single cluster, you can define as many indexes as you want.\n\n# **Type**\n\nWithin an index, you can define one or more types. A type is **a logical category/partition of your index** whose semantics is completely up to you. In general, a type is defined for documents that have a set of common fields. For example, let’s assume you run a blogging platform and store all your data in a single index. In this index, you may define a type for user data, another type for blog data, and yet another type for comments data.\n\n# **Document**\n\nA document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is an ubiquitous internet data interchange format.\n\nWithin an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.\n\n# **Shards & Replicas**\n\nAn index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone.\n\nTo solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent \"index\" that can be hosted on any node in the cluster.\n\nSharding is important for two primary reasons:\n\n- It allows you to horizontally split/scale your content volume\n- It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput\nThe mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user.\n\nIn a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.\n\nReplication is important for two primary reasons:\n\n- It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.\n- It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel.\n\nTo summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number shards after-the-fact.\n\nBy default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica) for a total of 10 shards per index.\n","source":"_posts/elastic-basic-concepts.md","raw":"---\ntitle: 学习Elasticsearch之3：Elastcisearch基础概念\ndate: 2016-08-06 01:00:33\ntags:\n  - elasticsearch\ncategories:\n  - 软件开发\n---\n\n{% asset_img Brueghel-tower-of-babel.jpg %}\n\n参考[ElasticSearch基础概念](https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html):\n\n# **Near Realtime:**\n\nthere is a slight latency (normally one second) from the time you index a document until the time it becomes searchable.\n\n# **Cluster**\n\nA cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is \"elasticsearch\". This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name.\n\nMake sure that you don’t reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev, logging-stage, and logging-prod for the development, staging, and production clusters.\n\nNote that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name.\n\n# **Node**\n\nA node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Marvel character name that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster.\n\nA node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and—assuming they can discover each other—they will all automatically form and join a single cluster named elasticsearch.\n\nIn a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch.\n\n# **Index**\n\nAn index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.\n\nIn a single cluster, you can define as many indexes as you want.\n\n# **Type**\n\nWithin an index, you can define one or more types. A type is **a logical category/partition of your index** whose semantics is completely up to you. In general, a type is defined for documents that have a set of common fields. For example, let’s assume you run a blogging platform and store all your data in a single index. In this index, you may define a type for user data, another type for blog data, and yet another type for comments data.\n\n# **Document**\n\nA document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is an ubiquitous internet data interchange format.\n\nWithin an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.\n\n# **Shards & Replicas**\n\nAn index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone.\n\nTo solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent \"index\" that can be hosted on any node in the cluster.\n\nSharding is important for two primary reasons:\n\n- It allows you to horizontally split/scale your content volume\n- It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput\nThe mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user.\n\nIn a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.\n\nReplication is important for two primary reasons:\n\n- It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.\n- It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel.\n\nTo summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number shards after-the-fact.\n\nBy default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica) for a total of 10 shards per index.\n","slug":"elastic-basic-concepts","published":1,"updated":"2017-05-18T05:51:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneoj000jv7bfgj80m51m","content":"<img src=\"/2016/08/06/elastic-basic-concepts/Brueghel-tower-of-babel.jpg\" alt=\"Brueghel-tower-of-babel.jpg\" title=\"\">\n<p>参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html\" target=\"_blank\" rel=\"external\">ElasticSearch基础概念</a>:</p>\n<h1 id=\"Near-Realtime\"><a href=\"#Near-Realtime\" class=\"headerlink\" title=\"Near Realtime:\"></a><strong>Near Realtime:</strong></h1><p>there is a slight latency (normally one second) from the time you index a document until the time it becomes searchable.</p>\n<h1 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a><strong>Cluster</strong></h1><p>A cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is “elasticsearch”. This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name.</p>\n<p>Make sure that you don’t reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev, logging-stage, and logging-prod for the development, staging, and production clusters.</p>\n<p>Note that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name.</p>\n<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a><strong>Node</strong></h1><p>A node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Marvel character name that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster.</p>\n<p>A node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and—assuming they can discover each other—they will all automatically form and join a single cluster named elasticsearch.</p>\n<p>In a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch.</p>\n<h1 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a><strong>Index</strong></h1><p>An index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.</p>\n<p>In a single cluster, you can define as many indexes as you want.</p>\n<h1 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a><strong>Type</strong></h1><p>Within an index, you can define one or more types. A type is <strong>a logical category/partition of your index</strong> whose semantics is completely up to you. In general, a type is defined for documents that have a set of common fields. For example, let’s assume you run a blogging platform and store all your data in a single index. In this index, you may define a type for user data, another type for blog data, and yet another type for comments data.</p>\n<h1 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a><strong>Document</strong></h1><p>A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is an ubiquitous internet data interchange format.</p>\n<p>Within an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.</p>\n<h1 id=\"Shards-amp-Replicas\"><a href=\"#Shards-amp-Replicas\" class=\"headerlink\" title=\"Shards &amp; Replicas\"></a><strong>Shards &amp; Replicas</strong></h1><p>An index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone.</p>\n<p>To solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent “index” that can be hosted on any node in the cluster.</p>\n<p>Sharding is important for two primary reasons:</p>\n<ul>\n<li>It allows you to horizontally split/scale your content volume</li>\n<li>It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput<br>The mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user.</li>\n</ul>\n<p>In a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.</p>\n<p>Replication is important for two primary reasons:</p>\n<ul>\n<li>It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.</li>\n<li>It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel.</li>\n</ul>\n<p>To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number shards after-the-fact.</p>\n<p>By default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica) for a total of 10 shards per index.</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2016/08/06/elastic-basic-concepts/Brueghel-tower-of-babel.jpg\" alt=\"Brueghel-tower-of-babel.jpg\" title=\"\">\n<p>参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html\" target=\"_blank\" rel=\"external\">ElasticSearch基础概念</a>:</p>\n<h1 id=\"Near-Realtime\"><a href=\"#Near-Realtime\" class=\"headerlink\" title=\"Near Realtime:\"></a><strong>Near Realtime:</strong></h1><p>there is a slight latency (normally one second) from the time you index a document until the time it becomes searchable.</p>\n<h1 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a><strong>Cluster</strong></h1><p>A cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is “elasticsearch”. This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name.</p>\n<p>Make sure that you don’t reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev, logging-stage, and logging-prod for the development, staging, and production clusters.</p>\n<p>Note that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name.</p>\n<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a><strong>Node</strong></h1><p>A node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Marvel character name that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster.</p>\n<p>A node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and—assuming they can discover each other—they will all automatically form and join a single cluster named elasticsearch.</p>\n<p>In a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch.</p>\n<h1 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a><strong>Index</strong></h1><p>An index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.</p>\n<p>In a single cluster, you can define as many indexes as you want.</p>\n<h1 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a><strong>Type</strong></h1><p>Within an index, you can define one or more types. A type is <strong>a logical category/partition of your index</strong> whose semantics is completely up to you. In general, a type is defined for documents that have a set of common fields. For example, let’s assume you run a blogging platform and store all your data in a single index. In this index, you may define a type for user data, another type for blog data, and yet another type for comments data.</p>\n<h1 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a><strong>Document</strong></h1><p>A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is an ubiquitous internet data interchange format.</p>\n<p>Within an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.</p>\n<h1 id=\"Shards-amp-Replicas\"><a href=\"#Shards-amp-Replicas\" class=\"headerlink\" title=\"Shards &amp; Replicas\"></a><strong>Shards &amp; Replicas</strong></h1><p>An index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone.</p>\n<p>To solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent “index” that can be hosted on any node in the cluster.</p>\n<p>Sharding is important for two primary reasons:</p>\n<ul>\n<li>It allows you to horizontally split/scale your content volume</li>\n<li>It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput<br>The mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user.</li>\n</ul>\n<p>In a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.</p>\n<p>Replication is important for two primary reasons:</p>\n<ul>\n<li>It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.</li>\n<li>It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel.</li>\n</ul>\n<p>To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number shards after-the-fact.</p>\n<p>By default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica) for a total of 10 shards per index.</p>\n"},{"title":"学习Elasticsearch之1：如何在Ubuntu 14.04上安装Oracle JDK","date":"2016-08-05T16:29:11.000Z","_content":"\n{% asset_img oracle-jdk8-on-Ubuntu.png %}\n\n# 如何选择JDK版本\n\n[Elasticsearch 2.3官方文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html)中推荐的JDK版本是“Oracle JDK version 1.8.0_73”，最低Java 7.\n\n# Oracle的JDK的安装方式\n\nOracle JDK的安装方式有两种方式\n\n- 手动安装，参考[How to Install Oracle Java JDK on Ubuntu Linux](http://www.wikihow.com/Install-Oracle-Java-JDK-on-Ubuntu-Linux)\n- 通过`apt`命令安装，参考[Installing the oracle JDK](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html#_installing_the_oracle_jdk)\n\n# 手动安装步骤\n\n- 从[这里](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)下载JDK 8u91\n- 拷贝下载安装包到`~/Download/`目录下：'scp ~/Downloads/jdk-8u91-linux-x64.tar.gz ethancai@172.16.210.149:~/Downloads/'\n- SSH远程连接Ubuntu Server，`ssh ethancai@172.16.210.149`\n- 删除OpenJDK\n    - `sudo apt-get purge openjdk-\\*`\n- 拷贝安装文件到安装目录\n    - `sudo mkdir -p /usr/local/java`\n    - `sudo cp -r ~/Downloads/jdk-8u91-linux-x64.tar.gz /usr/local/java/`\n- 解压\n    - `cd /usr/local/java`\n    - `sudo tar -xvzf jdk-8u91-linux-x64.tar.gz`\n- 修改登录式Shell的全局启动配置\n    - `sudo vim /etc/profile`，然后将如下内容拷贝到文件中\n    ```\n    JAVA_HOME=/usr/local/java/jdk1.8.0_91\n    JRE_HOME=$JAVA_HOME/jre\n    PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n    export JAVA_HOME\n    export JRE_HOME\n    export PATH\n    ```\n- Notify the system that JRE/JDK/Java Web Start is available for use\n    - `sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/local/java/jdk1.8.0_91/bin/java\" 1`\n    - `sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/local/java/jdk1.8.0_91/bin/javac\" 1`\n    - `sudo update-alternatives --install \"/usr/bin/javaws\" \"javaws\" \"/usr/local/java/jdk1.8.0_91/bin/javaws\" 1`\n- Reload your system wide PATH\n    - `source /etc/profile`\n\n# 通过`apt`命令安装步骤\n\n- 此命令目前能安装的jdk8最新版本是`jdk-8u77-linux-x64`\n- `sudo apt-get purge openjdk-\\*`\n- `sudo add-apt-repository ppa:webupd8team/java`\n- `sudo apt-get update`\n- `sudo apt-get install oracle-java8-installer`\n\n# 验证安装是否成功\n\n- `java -version`\n- `javac -version`\n- 重启`sudo shutdown -r 0`\n","source":"_posts/install-oracle-jdk-on-ubuntu-14-04.md","raw":"---\ntitle: 学习Elasticsearch之1：如何在Ubuntu 14.04上安装Oracle JDK\ntags:\n  - jdk\n  - elasticsearch\ncategories:\n  - 软件开发\ndate: 2016-08-06 00:29:11\n---\n\n{% asset_img oracle-jdk8-on-Ubuntu.png %}\n\n# 如何选择JDK版本\n\n[Elasticsearch 2.3官方文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html)中推荐的JDK版本是“Oracle JDK version 1.8.0_73”，最低Java 7.\n\n# Oracle的JDK的安装方式\n\nOracle JDK的安装方式有两种方式\n\n- 手动安装，参考[How to Install Oracle Java JDK on Ubuntu Linux](http://www.wikihow.com/Install-Oracle-Java-JDK-on-Ubuntu-Linux)\n- 通过`apt`命令安装，参考[Installing the oracle JDK](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html#_installing_the_oracle_jdk)\n\n# 手动安装步骤\n\n- 从[这里](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)下载JDK 8u91\n- 拷贝下载安装包到`~/Download/`目录下：'scp ~/Downloads/jdk-8u91-linux-x64.tar.gz ethancai@172.16.210.149:~/Downloads/'\n- SSH远程连接Ubuntu Server，`ssh ethancai@172.16.210.149`\n- 删除OpenJDK\n    - `sudo apt-get purge openjdk-\\*`\n- 拷贝安装文件到安装目录\n    - `sudo mkdir -p /usr/local/java`\n    - `sudo cp -r ~/Downloads/jdk-8u91-linux-x64.tar.gz /usr/local/java/`\n- 解压\n    - `cd /usr/local/java`\n    - `sudo tar -xvzf jdk-8u91-linux-x64.tar.gz`\n- 修改登录式Shell的全局启动配置\n    - `sudo vim /etc/profile`，然后将如下内容拷贝到文件中\n    ```\n    JAVA_HOME=/usr/local/java/jdk1.8.0_91\n    JRE_HOME=$JAVA_HOME/jre\n    PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n    export JAVA_HOME\n    export JRE_HOME\n    export PATH\n    ```\n- Notify the system that JRE/JDK/Java Web Start is available for use\n    - `sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/local/java/jdk1.8.0_91/bin/java\" 1`\n    - `sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/local/java/jdk1.8.0_91/bin/javac\" 1`\n    - `sudo update-alternatives --install \"/usr/bin/javaws\" \"javaws\" \"/usr/local/java/jdk1.8.0_91/bin/javaws\" 1`\n- Reload your system wide PATH\n    - `source /etc/profile`\n\n# 通过`apt`命令安装步骤\n\n- 此命令目前能安装的jdk8最新版本是`jdk-8u77-linux-x64`\n- `sudo apt-get purge openjdk-\\*`\n- `sudo add-apt-repository ppa:webupd8team/java`\n- `sudo apt-get update`\n- `sudo apt-get install oracle-java8-installer`\n\n# 验证安装是否成功\n\n- `java -version`\n- `javac -version`\n- 重启`sudo shutdown -r 0`\n","slug":"install-oracle-jdk-on-ubuntu-14-04","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneol000mv7bf8x9ewffa","content":"<img src=\"/2016/08/06/install-oracle-jdk-on-ubuntu-14-04/oracle-jdk8-on-Ubuntu.png\" alt=\"oracle-jdk8-on-Ubuntu.png\" title=\"\">\n<h1 id=\"如何选择JDK版本\"><a href=\"#如何选择JDK版本\" class=\"headerlink\" title=\"如何选择JDK版本\"></a>如何选择JDK版本</h1><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html\" target=\"_blank\" rel=\"external\">Elasticsearch 2.3官方文档</a>中推荐的JDK版本是“Oracle JDK version 1.8.0_73”，最低Java 7.</p>\n<h1 id=\"Oracle的JDK的安装方式\"><a href=\"#Oracle的JDK的安装方式\" class=\"headerlink\" title=\"Oracle的JDK的安装方式\"></a>Oracle的JDK的安装方式</h1><p>Oracle JDK的安装方式有两种方式</p>\n<ul>\n<li>手动安装，参考<a href=\"http://www.wikihow.com/Install-Oracle-Java-JDK-on-Ubuntu-Linux\" target=\"_blank\" rel=\"external\">How to Install Oracle Java JDK on Ubuntu Linux</a></li>\n<li>通过<code>apt</code>命令安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html#_installing_the_oracle_jdk\" target=\"_blank\" rel=\"external\">Installing the oracle JDK</a></li>\n</ul>\n<h1 id=\"手动安装步骤\"><a href=\"#手动安装步骤\" class=\"headerlink\" title=\"手动安装步骤\"></a>手动安装步骤</h1><ul>\n<li>从<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">这里</a>下载JDK 8u91</li>\n<li>拷贝下载安装包到<code>~/Download/</code>目录下：’scp ~/Downloads/jdk-8u91-linux-x64.tar.gz ethancai@172.16.210.149:~/Downloads/‘</li>\n<li>SSH远程连接Ubuntu Server，<code>ssh ethancai@172.16.210.149</code></li>\n<li>删除OpenJDK<ul>\n<li><code>sudo apt-get purge openjdk-\\*</code></li>\n</ul>\n</li>\n<li>拷贝安装文件到安装目录<ul>\n<li><code>sudo mkdir -p /usr/local/java</code></li>\n<li><code>sudo cp -r ~/Downloads/jdk-8u91-linux-x64.tar.gz /usr/local/java/</code></li>\n</ul>\n</li>\n<li>解压<ul>\n<li><code>cd /usr/local/java</code></li>\n<li><code>sudo tar -xvzf jdk-8u91-linux-x64.tar.gz</code></li>\n</ul>\n</li>\n<li><p>修改登录式Shell的全局启动配置</p>\n<ul>\n<li><code>sudo vim /etc/profile</code>，然后将如下内容拷贝到文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=/usr/local/java/jdk1.8.0_91</div><div class=\"line\">JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div><div class=\"line\">export JAVA_HOME</div><div class=\"line\">export JRE_HOME</div><div class=\"line\">export PATH</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Notify the system that JRE/JDK/Java Web Start is available for use</p>\n<ul>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/java&quot; 1</code></li>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/javac&quot; 1</code></li>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/javaws&quot; 1</code></li>\n</ul>\n</li>\n<li>Reload your system wide PATH<ul>\n<li><code>source /etc/profile</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"通过apt命令安装步骤\"><a href=\"#通过apt命令安装步骤\" class=\"headerlink\" title=\"通过apt命令安装步骤\"></a>通过<code>apt</code>命令安装步骤</h1><ul>\n<li>此命令目前能安装的jdk8最新版本是<code>jdk-8u77-linux-x64</code></li>\n<li><code>sudo apt-get purge openjdk-\\*</code></li>\n<li><code>sudo add-apt-repository ppa:webupd8team/java</code></li>\n<li><code>sudo apt-get update</code></li>\n<li><code>sudo apt-get install oracle-java8-installer</code></li>\n</ul>\n<h1 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h1><ul>\n<li><code>java -version</code></li>\n<li><code>javac -version</code></li>\n<li>重启<code>sudo shutdown -r 0</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2016/08/06/install-oracle-jdk-on-ubuntu-14-04/oracle-jdk8-on-Ubuntu.png\" alt=\"oracle-jdk8-on-Ubuntu.png\" title=\"\">\n<h1 id=\"如何选择JDK版本\"><a href=\"#如何选择JDK版本\" class=\"headerlink\" title=\"如何选择JDK版本\"></a>如何选择JDK版本</h1><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html\" target=\"_blank\" rel=\"external\">Elasticsearch 2.3官方文档</a>中推荐的JDK版本是“Oracle JDK version 1.8.0_73”，最低Java 7.</p>\n<h1 id=\"Oracle的JDK的安装方式\"><a href=\"#Oracle的JDK的安装方式\" class=\"headerlink\" title=\"Oracle的JDK的安装方式\"></a>Oracle的JDK的安装方式</h1><p>Oracle JDK的安装方式有两种方式</p>\n<ul>\n<li>手动安装，参考<a href=\"http://www.wikihow.com/Install-Oracle-Java-JDK-on-Ubuntu-Linux\" target=\"_blank\" rel=\"external\">How to Install Oracle Java JDK on Ubuntu Linux</a></li>\n<li>通过<code>apt</code>命令安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html#_installing_the_oracle_jdk\" target=\"_blank\" rel=\"external\">Installing the oracle JDK</a></li>\n</ul>\n<h1 id=\"手动安装步骤\"><a href=\"#手动安装步骤\" class=\"headerlink\" title=\"手动安装步骤\"></a>手动安装步骤</h1><ul>\n<li>从<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">这里</a>下载JDK 8u91</li>\n<li>拷贝下载安装包到<code>~/Download/</code>目录下：’scp ~/Downloads/jdk-8u91-linux-x64.tar.gz ethancai@172.16.210.149:~/Downloads/‘</li>\n<li>SSH远程连接Ubuntu Server，<code>ssh ethancai@172.16.210.149</code></li>\n<li>删除OpenJDK<ul>\n<li><code>sudo apt-get purge openjdk-\\*</code></li>\n</ul>\n</li>\n<li>拷贝安装文件到安装目录<ul>\n<li><code>sudo mkdir -p /usr/local/java</code></li>\n<li><code>sudo cp -r ~/Downloads/jdk-8u91-linux-x64.tar.gz /usr/local/java/</code></li>\n</ul>\n</li>\n<li>解压<ul>\n<li><code>cd /usr/local/java</code></li>\n<li><code>sudo tar -xvzf jdk-8u91-linux-x64.tar.gz</code></li>\n</ul>\n</li>\n<li><p>修改登录式Shell的全局启动配置</p>\n<ul>\n<li><code>sudo vim /etc/profile</code>，然后将如下内容拷贝到文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=/usr/local/java/jdk1.8.0_91</div><div class=\"line\">JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div><div class=\"line\">export JAVA_HOME</div><div class=\"line\">export JRE_HOME</div><div class=\"line\">export PATH</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Notify the system that JRE/JDK/Java Web Start is available for use</p>\n<ul>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/java&quot; 1</code></li>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/javac&quot; 1</code></li>\n<li><code>sudo update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/local/java/jdk1.8.0_91/bin/javaws&quot; 1</code></li>\n</ul>\n</li>\n<li>Reload your system wide PATH<ul>\n<li><code>source /etc/profile</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"通过apt命令安装步骤\"><a href=\"#通过apt命令安装步骤\" class=\"headerlink\" title=\"通过apt命令安装步骤\"></a>通过<code>apt</code>命令安装步骤</h1><ul>\n<li>此命令目前能安装的jdk8最新版本是<code>jdk-8u77-linux-x64</code></li>\n<li><code>sudo apt-get purge openjdk-\\*</code></li>\n<li><code>sudo add-apt-repository ppa:webupd8team/java</code></li>\n<li><code>sudo apt-get update</code></li>\n<li><code>sudo apt-get install oracle-java8-installer</code></li>\n</ul>\n<h1 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h1><ul>\n<li><code>java -version</code></li>\n<li><code>javac -version</code></li>\n<li>重启<code>sudo shutdown -r 0</code></li>\n</ul>\n"},{"title":"2 - Make PHP development VM using Vagrant | Study PHP","date":"2017-06-13T09:42:06.000Z","_content":"\n\n{% asset_img make-php-development-VM-using-Vagrant-13489.png %}\n\n\n这篇文章介绍的项目地址：https://github.com/EthanCai/php-dev-vm\n\n# 简介\n\n`php-dev-vm`可以帮助快速构建`PHP`虚拟机开发环境。你也可以修改`Vagrantfile`，定制自己的`PHP`虚拟机开发环境。\n\n# 解决什么问题\n\n多人团队开发环境不同步一般带来如下问题：\n\n- 不同电脑上单独安装配置占用时间，后续解决环境配置、依赖等问题也会占用较多工作时间，团队越大问题越突出\n- 没有标准安装、配置步骤，不同工程师水平不一致，每次环境配置的最终结果可能不一致，最终导致开发时存在潜在调试、运行等问题，解决办法也无法快速在团队中应用\n- 环境安装配置对新人是障碍，耽误熟悉业务代码时间，资深工程师帮助新人配置环境也占用时间\n- 开发环境后续调整、同步也是障碍\n\n# 做什么 - 为什么使用VM，而不是Docker\n\n如果能够实现自动化的构建开发环境，通过指定的分发机制同步开发环境配置，就可以很好解决以上问题。\n\n通过`Vagrant`这个工具自动化构建开发环境虚拟机镜像，将开发环境需要的软件、配置打包到镜像中，然后通过`Rsync`或者`FTP`分发镜像，可以实现这一点，满足我们的需求。\n\n至于为什么不使用 **PHP Docker镜像**，是因为目前生产环境中PHP程序运行在虚拟机中，迁移不是短时间就能完成的事情。\n\n# 怎么做 - 使用`Vagrant`制作PHP虚拟机开发环境\n\n可以通过本项目快速构建PHP虚拟机开发环境。\n\n## 依赖软件\n\n- macOS Sierra Version 10.12.5\n- `homebrew`\n- `vagrantup`\n- `virualbox`\n\n## 安装依赖Vagrant Box\n\nInstall CentOS 7.2 box\n\n```sh\n> vagrant box add \"CentOS-7.2-x64\" https://github.com/CommanderK5/packer-centos-template/releases/download/0.7.2/vagrant-centos-7.2.box\n```\n\n## 如何构建PHP开发环境Vagrant Box\n\n### 构建`php-dev-vm-5.6.30.box`\n\n编写`Vagrantfile`:\n\n见[这里](./src/PHP-5.6.30/Vagrantfile)\n\n构建`Vagrant Box`:\n\n```sh\n> # start vm\n> vagrant up\n\n> # config mysql root password\n> mysql_secure_installation\n> # todo: add more config statements\n\n> # create vagrant box\n> vagrant package --output \"php-dev-vm-5.6.30.box\" {vm_id} && mv php-dev-vm-5.6.30.box ../../box/\n```\n\n## 如何使用Vagrant Box启动PHP开发环境虚拟机\n\n### 使用 `php-dev-vm-5.6.30.box`\n\n```sh\n> # build php-dev-vm-5.6.30.box or download box from ftp://10.75.87.202/php-dev-vm-5.6.30.box (get the url from Ethan if not available)\n> wget ftp://10.75.87.202/php-dev-vm-5.6.30.box && mv php-dev-vm-5.6.30.box ./box/php-dev-vm-5.6.30.box\n\n> cd work/php56\n> vagrant box remove \"../../box/php-dev-vm-5.6.30.box\" || true && vagrant up  # ignore error when box not exists\n\n> # the password of mysql `root` user is `eVkU,iO);5R>`\n```\n\n# References\n\n- Vagrant: https://www.vagrantup.com/docs/index.html\n- Discover Vagrant Boxes\n  - https://atlas.hashicorp.com/boxes/search\n  - http://www.vagrantbox.es/\n- Nginx配置\n  - [Nginx Beginner's Guide](http://nginx.org/en/docs/beginners_guide.html)\n  - [Setting up PHP-FastCGI and nginx? Don’t trust the tutorials: check your configuration!](https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/)\n  - [nginx和php-fpm基础环境的安装和配置](https://segmentfault.com/a/1190000003067656)\n- PHP-FPM配置\n  - FastCGI 进程管理器（FPM）配置：http://php.net/manual/zh/install.fpm.configuration.php\n  - https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/\n- PHP Function Reference／扩展列表\n  - http://php.net/manual/en/funcref.php\n- [Debugging with PhpStorm](https://confluence.jetbrains.com/display/PhpStorm/Debugging+with+PhpStorm)\n","source":"_posts/make-php-development-VM-using-Vagrant.md","raw":"---\ntitle: 2 - Make PHP development VM using Vagrant | Study PHP\ntags:\n  - php\ncategories:\n  - 软件开发\ndate: 2017-06-13 17:42:06\n---\n\n\n{% asset_img make-php-development-VM-using-Vagrant-13489.png %}\n\n\n这篇文章介绍的项目地址：https://github.com/EthanCai/php-dev-vm\n\n# 简介\n\n`php-dev-vm`可以帮助快速构建`PHP`虚拟机开发环境。你也可以修改`Vagrantfile`，定制自己的`PHP`虚拟机开发环境。\n\n# 解决什么问题\n\n多人团队开发环境不同步一般带来如下问题：\n\n- 不同电脑上单独安装配置占用时间，后续解决环境配置、依赖等问题也会占用较多工作时间，团队越大问题越突出\n- 没有标准安装、配置步骤，不同工程师水平不一致，每次环境配置的最终结果可能不一致，最终导致开发时存在潜在调试、运行等问题，解决办法也无法快速在团队中应用\n- 环境安装配置对新人是障碍，耽误熟悉业务代码时间，资深工程师帮助新人配置环境也占用时间\n- 开发环境后续调整、同步也是障碍\n\n# 做什么 - 为什么使用VM，而不是Docker\n\n如果能够实现自动化的构建开发环境，通过指定的分发机制同步开发环境配置，就可以很好解决以上问题。\n\n通过`Vagrant`这个工具自动化构建开发环境虚拟机镜像，将开发环境需要的软件、配置打包到镜像中，然后通过`Rsync`或者`FTP`分发镜像，可以实现这一点，满足我们的需求。\n\n至于为什么不使用 **PHP Docker镜像**，是因为目前生产环境中PHP程序运行在虚拟机中，迁移不是短时间就能完成的事情。\n\n# 怎么做 - 使用`Vagrant`制作PHP虚拟机开发环境\n\n可以通过本项目快速构建PHP虚拟机开发环境。\n\n## 依赖软件\n\n- macOS Sierra Version 10.12.5\n- `homebrew`\n- `vagrantup`\n- `virualbox`\n\n## 安装依赖Vagrant Box\n\nInstall CentOS 7.2 box\n\n```sh\n> vagrant box add \"CentOS-7.2-x64\" https://github.com/CommanderK5/packer-centos-template/releases/download/0.7.2/vagrant-centos-7.2.box\n```\n\n## 如何构建PHP开发环境Vagrant Box\n\n### 构建`php-dev-vm-5.6.30.box`\n\n编写`Vagrantfile`:\n\n见[这里](./src/PHP-5.6.30/Vagrantfile)\n\n构建`Vagrant Box`:\n\n```sh\n> # start vm\n> vagrant up\n\n> # config mysql root password\n> mysql_secure_installation\n> # todo: add more config statements\n\n> # create vagrant box\n> vagrant package --output \"php-dev-vm-5.6.30.box\" {vm_id} && mv php-dev-vm-5.6.30.box ../../box/\n```\n\n## 如何使用Vagrant Box启动PHP开发环境虚拟机\n\n### 使用 `php-dev-vm-5.6.30.box`\n\n```sh\n> # build php-dev-vm-5.6.30.box or download box from ftp://10.75.87.202/php-dev-vm-5.6.30.box (get the url from Ethan if not available)\n> wget ftp://10.75.87.202/php-dev-vm-5.6.30.box && mv php-dev-vm-5.6.30.box ./box/php-dev-vm-5.6.30.box\n\n> cd work/php56\n> vagrant box remove \"../../box/php-dev-vm-5.6.30.box\" || true && vagrant up  # ignore error when box not exists\n\n> # the password of mysql `root` user is `eVkU,iO);5R>`\n```\n\n# References\n\n- Vagrant: https://www.vagrantup.com/docs/index.html\n- Discover Vagrant Boxes\n  - https://atlas.hashicorp.com/boxes/search\n  - http://www.vagrantbox.es/\n- Nginx配置\n  - [Nginx Beginner's Guide](http://nginx.org/en/docs/beginners_guide.html)\n  - [Setting up PHP-FastCGI and nginx? Don’t trust the tutorials: check your configuration!](https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/)\n  - [nginx和php-fpm基础环境的安装和配置](https://segmentfault.com/a/1190000003067656)\n- PHP-FPM配置\n  - FastCGI 进程管理器（FPM）配置：http://php.net/manual/zh/install.fpm.configuration.php\n  - https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/\n- PHP Function Reference／扩展列表\n  - http://php.net/manual/en/funcref.php\n- [Debugging with PhpStorm](https://confluence.jetbrains.com/display/PhpStorm/Debugging+with+PhpStorm)\n","slug":"make-php-development-VM-using-Vagrant","published":1,"updated":"2017-06-19T05:35:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneoo000pv7bfwnucund9","content":"<img src=\"/2017/06/13/make-php-development-VM-using-Vagrant/make-php-development-VM-using-Vagrant-13489.png\" alt=\"make-php-development-VM-using-Vagrant-13489.png\" title=\"\">\n<p>这篇文章介绍的项目地址：<a href=\"https://github.com/EthanCai/php-dev-vm\" target=\"_blank\" rel=\"external\">https://github.com/EthanCai/php-dev-vm</a></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><code>php-dev-vm</code>可以帮助快速构建<code>PHP</code>虚拟机开发环境。你也可以修改<code>Vagrantfile</code>，定制自己的<code>PHP</code>虚拟机开发环境。</p>\n<h1 id=\"解决什么问题\"><a href=\"#解决什么问题\" class=\"headerlink\" title=\"解决什么问题\"></a>解决什么问题</h1><p>多人团队开发环境不同步一般带来如下问题：</p>\n<ul>\n<li>不同电脑上单独安装配置占用时间，后续解决环境配置、依赖等问题也会占用较多工作时间，团队越大问题越突出</li>\n<li>没有标准安装、配置步骤，不同工程师水平不一致，每次环境配置的最终结果可能不一致，最终导致开发时存在潜在调试、运行等问题，解决办法也无法快速在团队中应用</li>\n<li>环境安装配置对新人是障碍，耽误熟悉业务代码时间，资深工程师帮助新人配置环境也占用时间</li>\n<li>开发环境后续调整、同步也是障碍</li>\n</ul>\n<h1 id=\"做什么-为什么使用VM，而不是Docker\"><a href=\"#做什么-为什么使用VM，而不是Docker\" class=\"headerlink\" title=\"做什么 - 为什么使用VM，而不是Docker\"></a>做什么 - 为什么使用VM，而不是Docker</h1><p>如果能够实现自动化的构建开发环境，通过指定的分发机制同步开发环境配置，就可以很好解决以上问题。</p>\n<p>通过<code>Vagrant</code>这个工具自动化构建开发环境虚拟机镜像，将开发环境需要的软件、配置打包到镜像中，然后通过<code>Rsync</code>或者<code>FTP</code>分发镜像，可以实现这一点，满足我们的需求。</p>\n<p>至于为什么不使用 <strong>PHP Docker镜像</strong>，是因为目前生产环境中PHP程序运行在虚拟机中，迁移不是短时间就能完成的事情。</p>\n<h1 id=\"怎么做-使用Vagrant制作PHP虚拟机开发环境\"><a href=\"#怎么做-使用Vagrant制作PHP虚拟机开发环境\" class=\"headerlink\" title=\"怎么做 - 使用Vagrant制作PHP虚拟机开发环境\"></a>怎么做 - 使用<code>Vagrant</code>制作PHP虚拟机开发环境</h1><p>可以通过本项目快速构建PHP虚拟机开发环境。</p>\n<h2 id=\"依赖软件\"><a href=\"#依赖软件\" class=\"headerlink\" title=\"依赖软件\"></a>依赖软件</h2><ul>\n<li>macOS Sierra Version 10.12.5</li>\n<li><code>homebrew</code></li>\n<li><code>vagrantup</code></li>\n<li><code>virualbox</code></li>\n</ul>\n<h2 id=\"安装依赖Vagrant-Box\"><a href=\"#安装依赖Vagrant-Box\" class=\"headerlink\" title=\"安装依赖Vagrant Box\"></a>安装依赖Vagrant Box</h2><p>Install CentOS 7.2 box</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; vagrant box add <span class=\"string\">\"CentOS-7.2-x64\"</span> https://github.com/CommanderK5/packer-centos-template/releases/download/0.7.2/vagrant-centos-7.2.box</div></pre></td></tr></table></figure>\n<h2 id=\"如何构建PHP开发环境Vagrant-Box\"><a href=\"#如何构建PHP开发环境Vagrant-Box\" class=\"headerlink\" title=\"如何构建PHP开发环境Vagrant Box\"></a>如何构建PHP开发环境Vagrant Box</h2><h3 id=\"构建php-dev-vm-5-6-30-box\"><a href=\"#构建php-dev-vm-5-6-30-box\" class=\"headerlink\" title=\"构建php-dev-vm-5.6.30.box\"></a>构建<code>php-dev-vm-5.6.30.box</code></h3><p>编写<code>Vagrantfile</code>:</p>\n<p>见<a href=\"./src/PHP-5.6.30/Vagrantfile\">这里</a></p>\n<p>构建<code>Vagrant Box</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># start vm</span></div><div class=\"line\">&gt; vagrant up</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># config mysql root password</span></div><div class=\"line\">&gt; mysql_secure_installation</div><div class=\"line\">&gt; <span class=\"comment\"># todo: add more config statements</span></div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># create vagrant box</span></div><div class=\"line\">&gt; vagrant package --output <span class=\"string\">\"php-dev-vm-5.6.30.box\"</span> &#123;vm_id&#125; &amp;&amp; mv php-dev-vm-5.6.30.box ../../box/</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用Vagrant-Box启动PHP开发环境虚拟机\"><a href=\"#如何使用Vagrant-Box启动PHP开发环境虚拟机\" class=\"headerlink\" title=\"如何使用Vagrant Box启动PHP开发环境虚拟机\"></a>如何使用Vagrant Box启动PHP开发环境虚拟机</h2><h3 id=\"使用-php-dev-vm-5-6-30-box\"><a href=\"#使用-php-dev-vm-5-6-30-box\" class=\"headerlink\" title=\"使用 php-dev-vm-5.6.30.box\"></a>使用 <code>php-dev-vm-5.6.30.box</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># build php-dev-vm-5.6.30.box or download box from ftp://10.75.87.202/php-dev-vm-5.6.30.box (get the url from Ethan if not available)</span></div><div class=\"line\">&gt; wget ftp://10.75.87.202/php-dev-vm-5.6.30.box &amp;&amp; mv php-dev-vm-5.6.30.box ./box/php-dev-vm-5.6.30.box</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">cd</span> work/php56</div><div class=\"line\">&gt; vagrant box remove <span class=\"string\">\"../../box/php-dev-vm-5.6.30.box\"</span> || <span class=\"literal\">true</span> &amp;&amp; vagrant up  <span class=\"comment\"># ignore error when box not exists</span></div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># the password of mysql `root` user is `eVkU,iO);5R&gt;`</span></div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li>Vagrant: <a href=\"https://www.vagrantup.com/docs/index.html\" target=\"_blank\" rel=\"external\">https://www.vagrantup.com/docs/index.html</a></li>\n<li>Discover Vagrant Boxes<ul>\n<li><a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"external\">https://atlas.hashicorp.com/boxes/search</a></li>\n<li><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">http://www.vagrantbox.es/</a></li>\n</ul>\n</li>\n<li>Nginx配置<ul>\n<li><a href=\"http://nginx.org/en/docs/beginners_guide.html\" target=\"_blank\" rel=\"external\">Nginx Beginner’s Guide</a></li>\n<li><a href=\"https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/\" target=\"_blank\" rel=\"external\">Setting up PHP-FastCGI and nginx? Don’t trust the tutorials: check your configuration!</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003067656\" target=\"_blank\" rel=\"external\">nginx和php-fpm基础环境的安装和配置</a></li>\n</ul>\n</li>\n<li>PHP-FPM配置<ul>\n<li>FastCGI 进程管理器（FPM）配置：<a href=\"http://php.net/manual/zh/install.fpm.configuration.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/install.fpm.configuration.php</a></li>\n<li><a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/</a></li>\n</ul>\n</li>\n<li>PHP Function Reference／扩展列表<ul>\n<li><a href=\"http://php.net/manual/en/funcref.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/en/funcref.php</a></li>\n</ul>\n</li>\n<li><a href=\"https://confluence.jetbrains.com/display/PhpStorm/Debugging+with+PhpStorm\" target=\"_blank\" rel=\"external\">Debugging with PhpStorm</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2017/06/13/make-php-development-VM-using-Vagrant/make-php-development-VM-using-Vagrant-13489.png\" alt=\"make-php-development-VM-using-Vagrant-13489.png\" title=\"\">\n<p>这篇文章介绍的项目地址：<a href=\"https://github.com/EthanCai/php-dev-vm\" target=\"_blank\" rel=\"external\">https://github.com/EthanCai/php-dev-vm</a></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><code>php-dev-vm</code>可以帮助快速构建<code>PHP</code>虚拟机开发环境。你也可以修改<code>Vagrantfile</code>，定制自己的<code>PHP</code>虚拟机开发环境。</p>\n<h1 id=\"解决什么问题\"><a href=\"#解决什么问题\" class=\"headerlink\" title=\"解决什么问题\"></a>解决什么问题</h1><p>多人团队开发环境不同步一般带来如下问题：</p>\n<ul>\n<li>不同电脑上单独安装配置占用时间，后续解决环境配置、依赖等问题也会占用较多工作时间，团队越大问题越突出</li>\n<li>没有标准安装、配置步骤，不同工程师水平不一致，每次环境配置的最终结果可能不一致，最终导致开发时存在潜在调试、运行等问题，解决办法也无法快速在团队中应用</li>\n<li>环境安装配置对新人是障碍，耽误熟悉业务代码时间，资深工程师帮助新人配置环境也占用时间</li>\n<li>开发环境后续调整、同步也是障碍</li>\n</ul>\n<h1 id=\"做什么-为什么使用VM，而不是Docker\"><a href=\"#做什么-为什么使用VM，而不是Docker\" class=\"headerlink\" title=\"做什么 - 为什么使用VM，而不是Docker\"></a>做什么 - 为什么使用VM，而不是Docker</h1><p>如果能够实现自动化的构建开发环境，通过指定的分发机制同步开发环境配置，就可以很好解决以上问题。</p>\n<p>通过<code>Vagrant</code>这个工具自动化构建开发环境虚拟机镜像，将开发环境需要的软件、配置打包到镜像中，然后通过<code>Rsync</code>或者<code>FTP</code>分发镜像，可以实现这一点，满足我们的需求。</p>\n<p>至于为什么不使用 <strong>PHP Docker镜像</strong>，是因为目前生产环境中PHP程序运行在虚拟机中，迁移不是短时间就能完成的事情。</p>\n<h1 id=\"怎么做-使用Vagrant制作PHP虚拟机开发环境\"><a href=\"#怎么做-使用Vagrant制作PHP虚拟机开发环境\" class=\"headerlink\" title=\"怎么做 - 使用Vagrant制作PHP虚拟机开发环境\"></a>怎么做 - 使用<code>Vagrant</code>制作PHP虚拟机开发环境</h1><p>可以通过本项目快速构建PHP虚拟机开发环境。</p>\n<h2 id=\"依赖软件\"><a href=\"#依赖软件\" class=\"headerlink\" title=\"依赖软件\"></a>依赖软件</h2><ul>\n<li>macOS Sierra Version 10.12.5</li>\n<li><code>homebrew</code></li>\n<li><code>vagrantup</code></li>\n<li><code>virualbox</code></li>\n</ul>\n<h2 id=\"安装依赖Vagrant-Box\"><a href=\"#安装依赖Vagrant-Box\" class=\"headerlink\" title=\"安装依赖Vagrant Box\"></a>安装依赖Vagrant Box</h2><p>Install CentOS 7.2 box</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; vagrant box add <span class=\"string\">\"CentOS-7.2-x64\"</span> https://github.com/CommanderK5/packer-centos-template/releases/download/0.7.2/vagrant-centos-7.2.box</div></pre></td></tr></table></figure>\n<h2 id=\"如何构建PHP开发环境Vagrant-Box\"><a href=\"#如何构建PHP开发环境Vagrant-Box\" class=\"headerlink\" title=\"如何构建PHP开发环境Vagrant Box\"></a>如何构建PHP开发环境Vagrant Box</h2><h3 id=\"构建php-dev-vm-5-6-30-box\"><a href=\"#构建php-dev-vm-5-6-30-box\" class=\"headerlink\" title=\"构建php-dev-vm-5.6.30.box\"></a>构建<code>php-dev-vm-5.6.30.box</code></h3><p>编写<code>Vagrantfile</code>:</p>\n<p>见<a href=\"./src/PHP-5.6.30/Vagrantfile\">这里</a></p>\n<p>构建<code>Vagrant Box</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># start vm</span></div><div class=\"line\">&gt; vagrant up</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># config mysql root password</span></div><div class=\"line\">&gt; mysql_secure_installation</div><div class=\"line\">&gt; <span class=\"comment\"># todo: add more config statements</span></div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># create vagrant box</span></div><div class=\"line\">&gt; vagrant package --output <span class=\"string\">\"php-dev-vm-5.6.30.box\"</span> &#123;vm_id&#125; &amp;&amp; mv php-dev-vm-5.6.30.box ../../box/</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用Vagrant-Box启动PHP开发环境虚拟机\"><a href=\"#如何使用Vagrant-Box启动PHP开发环境虚拟机\" class=\"headerlink\" title=\"如何使用Vagrant Box启动PHP开发环境虚拟机\"></a>如何使用Vagrant Box启动PHP开发环境虚拟机</h2><h3 id=\"使用-php-dev-vm-5-6-30-box\"><a href=\"#使用-php-dev-vm-5-6-30-box\" class=\"headerlink\" title=\"使用 php-dev-vm-5.6.30.box\"></a>使用 <code>php-dev-vm-5.6.30.box</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># build php-dev-vm-5.6.30.box or download box from ftp://10.75.87.202/php-dev-vm-5.6.30.box (get the url from Ethan if not available)</span></div><div class=\"line\">&gt; wget ftp://10.75.87.202/php-dev-vm-5.6.30.box &amp;&amp; mv php-dev-vm-5.6.30.box ./box/php-dev-vm-5.6.30.box</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">cd</span> work/php56</div><div class=\"line\">&gt; vagrant box remove <span class=\"string\">\"../../box/php-dev-vm-5.6.30.box\"</span> || <span class=\"literal\">true</span> &amp;&amp; vagrant up  <span class=\"comment\"># ignore error when box not exists</span></div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"comment\"># the password of mysql `root` user is `eVkU,iO);5R&gt;`</span></div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li>Vagrant: <a href=\"https://www.vagrantup.com/docs/index.html\" target=\"_blank\" rel=\"external\">https://www.vagrantup.com/docs/index.html</a></li>\n<li>Discover Vagrant Boxes<ul>\n<li><a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"external\">https://atlas.hashicorp.com/boxes/search</a></li>\n<li><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">http://www.vagrantbox.es/</a></li>\n</ul>\n</li>\n<li>Nginx配置<ul>\n<li><a href=\"http://nginx.org/en/docs/beginners_guide.html\" target=\"_blank\" rel=\"external\">Nginx Beginner’s Guide</a></li>\n<li><a href=\"https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/\" target=\"_blank\" rel=\"external\">Setting up PHP-FastCGI and nginx? Don’t trust the tutorials: check your configuration!</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003067656\" target=\"_blank\" rel=\"external\">nginx和php-fpm基础环境的安装和配置</a></li>\n</ul>\n</li>\n<li>PHP-FPM配置<ul>\n<li>FastCGI 进程管理器（FPM）配置：<a href=\"http://php.net/manual/zh/install.fpm.configuration.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/install.fpm.configuration.php</a></li>\n<li><a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/</a></li>\n</ul>\n</li>\n<li>PHP Function Reference／扩展列表<ul>\n<li><a href=\"http://php.net/manual/en/funcref.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/en/funcref.php</a></li>\n</ul>\n</li>\n<li><a href=\"https://confluence.jetbrains.com/display/PhpStorm/Debugging+with+PhpStorm\" target=\"_blank\" rel=\"external\">Debugging with PhpStorm</a></li>\n</ul>\n"},{"title":"支持游标和偏移量的通用翻页机制","date":"2016-11-01T07:54:00.000Z","_content":"\n\n# 前言\n\n对于大多数mobile App，当 App 发出请求时，通常不会在单个响应中收到该请求的全部结果，而是以分片的方式获取部分结果。\n\n随着业务需求的变化，某些情况下 App 的翻页机制可能会调整。一般我们通过 App 重新发版，服务端和客户端同步调整分页机制来完成调整。而本文提供了一种通用协议，支持仅通过服务端发版来调整 App 的分页机制。\n\n# 常见分页机制\n\n## 基于游标的分页\n\n游标是指标记数据列表中特定项目的一个随机字符串。该项目未被删除时，游标将始终指向列表的相同部分，项目被删除时游标即失效。因此，客户端应用不应存储任何旧的游标，也不能假定它们仍然有效。\n\nRequest的结构一般如下：\n\n```\nhttps://api.sample.com/v3/users/?limit=30&before=NDMyNzQyODI3OTQw\nhttps://api.sample.com/v3/users/?limit=30&after=MTAxNTExOTQ1MjAwNzI5NDE=\n```\n\n参数说明：\n\n- **limit**：每个页面返回的单独对象的数量。请注意这是上限，如果数据列表中没有足够的剩余对象，那么返回的数量将小于这个数。为防止客户端传入过大的值，某些列表的 `limit` 值将设置上限。\n- **before**：向后查询的起始位置。\n- **after**：向前查询的起始位置。\n\nResponse结构一般如下：\n\n```json\n{\n  \"rows\": [\n     ... Endpoint data is here\n  ],\n  \"paging\": {\n    \"cursors\": {\n      \"top\": \"MTAxNTExOTQ1MjAwNzI5NDE=\",\n      \"last\": \"NDMyNzQyODI3OTQw\"\n    },\n    \"previous\": \"NDMyNzQyODI3OTQw\",\n    \"next\": \"MTAxNTExOTQ1MjAwNzI5NDE=\"\n  }\n}\n```\n\n参数说明：\n\n- **rows**：如果当前页没有数据，或者根据过滤规则（比如隐私）当前页所有数据都被过滤掉，返回空的数组。客户端程序不能根据`rows`是否为空数组来判断，是否已经滚动到列表的末尾，而应根据下面的`next`字段是否有值来决定是否滚动到了列表尾部。\n- **top**：已返回的数据页面开头的游标。\n- **last**：已返回的数据页面末尾的游标。\n- **previous**：上一页数据的 API 端点。如果是`null`或者没有此字段，则表示返回的是第一页数据。\n- **next**：下一页数据的 API 端点。如果是`null`或者没有此字段，则表示返回的是最后一页数据。\n\n## 基于偏移量的分页\n\nRequest的结构一般如下：\n\n```\nhttps://api.sample.com/v3/users/?limit=30&offset=30\n```\n\n参数说明：\n\n- **limit**：每个页面返回的单独对象的数量。\n- **offset**：偏移量，查询的起始位置。\n\n> 一般情况下，还会包含其他查询条件，比如根据关键字查找姓名和关键字匹配的用户\n\nResponse结构一般如下：\n\n```json\n{\n  \"rows\": [\n     ... Endpoint data is here\n  ],\n  \"count\": 10765\n}\n```\n\n参数说明：\n\n- **count**：符合查询条件的总记录数。客户端根据`offset`和`count`判断是否已经滚动到列表尾部。\n\n> 注意，如果正分页的项目列表添加了新的对象，后续基于偏移量的查询的内容都将发生更改。\n\n# 支持游标和偏移量的通用分页机制\n\n每个API视场景需要实现部分规范（比如仅实现向后翻页，不实现向前翻页），没有实现的行为统一返回一个特定错误码 \"not supported\"\n\n## HTTP Request\n\n- `limit`: 必填项；期望返回的记录数量；整数类型；必须大于等于0\n- `after`: 可选项；字符串类型；表示查询从`after`指向的记录之后（不包括`after`指向的当前记录）的`limit`条记录\n- `before`: 可选项；字符串类型；表示查询从`before`指向的记录之前（不包括`before`指向的当前记录）的`limit`条记录\n- 备注：\n    - Request中`before`、`after`不能并存\n    - 如果Request中没有`before`和`after`，视为从结果集起始位置向后查询\n    - **MySQL和MongoDB均不支持基于游标位置的向前查询**，如需支持需要在程序逻辑中实现\n\n## HTTP Response\n\n```json\n{\n    \"code\": 0,\n    \"result\": {\n        \"rows\": [\n            //\"... Endpoint data is here\"\n        ],\n        \"paging\": {\n            \"cursors\": {\n                \"top\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n                \"last\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\"\n            },\n            \"previous\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n            \"next\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n            \"count\": 1087\n        }\n    }\n}\n```\n\n- `paging.cursors.top`: 必填项；字符串或者null；指向已返回的数据页面开头的游标\n- `paging.cursors.last`: 必填项；字符串或者null；指向已返回的数据页面末尾的游标\n- `paging.previous`: 必填项；字符串或者null；查询前一页数据的末尾位置，Request中将此值赋给`before`，为null时，表示没有前一页\n- `paging.next`: 必填项；字符串或者null；查询后一页数据的起始位置，Request中将此值赋给`after`，为null时，表示没有后一页\n- `paging.count`: 可选项；整型；结果集总数\n- 备注：\n    - `rows`为空结果集时：`paging.cursors.top`、`paging.cursors.last`为`null`，`paging.previous`、`paging.next`不一定为`null`\n    - 仅一条结果集是，`paging.cursors.top`、`paging.cursors.last`相同\n\n# 参考\n\n- [twitter API - GET statuses/user_timeline](https://dev.twitter.com/rest/reference/get/statuses/user_timeline)\n","source":"_posts/general-pagination-for-mobile-app.md","raw":"---\ntitle: 支持游标和偏移量的通用翻页机制\ntags:\n  - API设计\ncategories:\n  - 软件开发\ndate: 2016-11-01 15:54:00\n---\n\n\n# 前言\n\n对于大多数mobile App，当 App 发出请求时，通常不会在单个响应中收到该请求的全部结果，而是以分片的方式获取部分结果。\n\n随着业务需求的变化，某些情况下 App 的翻页机制可能会调整。一般我们通过 App 重新发版，服务端和客户端同步调整分页机制来完成调整。而本文提供了一种通用协议，支持仅通过服务端发版来调整 App 的分页机制。\n\n# 常见分页机制\n\n## 基于游标的分页\n\n游标是指标记数据列表中特定项目的一个随机字符串。该项目未被删除时，游标将始终指向列表的相同部分，项目被删除时游标即失效。因此，客户端应用不应存储任何旧的游标，也不能假定它们仍然有效。\n\nRequest的结构一般如下：\n\n```\nhttps://api.sample.com/v3/users/?limit=30&before=NDMyNzQyODI3OTQw\nhttps://api.sample.com/v3/users/?limit=30&after=MTAxNTExOTQ1MjAwNzI5NDE=\n```\n\n参数说明：\n\n- **limit**：每个页面返回的单独对象的数量。请注意这是上限，如果数据列表中没有足够的剩余对象，那么返回的数量将小于这个数。为防止客户端传入过大的值，某些列表的 `limit` 值将设置上限。\n- **before**：向后查询的起始位置。\n- **after**：向前查询的起始位置。\n\nResponse结构一般如下：\n\n```json\n{\n  \"rows\": [\n     ... Endpoint data is here\n  ],\n  \"paging\": {\n    \"cursors\": {\n      \"top\": \"MTAxNTExOTQ1MjAwNzI5NDE=\",\n      \"last\": \"NDMyNzQyODI3OTQw\"\n    },\n    \"previous\": \"NDMyNzQyODI3OTQw\",\n    \"next\": \"MTAxNTExOTQ1MjAwNzI5NDE=\"\n  }\n}\n```\n\n参数说明：\n\n- **rows**：如果当前页没有数据，或者根据过滤规则（比如隐私）当前页所有数据都被过滤掉，返回空的数组。客户端程序不能根据`rows`是否为空数组来判断，是否已经滚动到列表的末尾，而应根据下面的`next`字段是否有值来决定是否滚动到了列表尾部。\n- **top**：已返回的数据页面开头的游标。\n- **last**：已返回的数据页面末尾的游标。\n- **previous**：上一页数据的 API 端点。如果是`null`或者没有此字段，则表示返回的是第一页数据。\n- **next**：下一页数据的 API 端点。如果是`null`或者没有此字段，则表示返回的是最后一页数据。\n\n## 基于偏移量的分页\n\nRequest的结构一般如下：\n\n```\nhttps://api.sample.com/v3/users/?limit=30&offset=30\n```\n\n参数说明：\n\n- **limit**：每个页面返回的单独对象的数量。\n- **offset**：偏移量，查询的起始位置。\n\n> 一般情况下，还会包含其他查询条件，比如根据关键字查找姓名和关键字匹配的用户\n\nResponse结构一般如下：\n\n```json\n{\n  \"rows\": [\n     ... Endpoint data is here\n  ],\n  \"count\": 10765\n}\n```\n\n参数说明：\n\n- **count**：符合查询条件的总记录数。客户端根据`offset`和`count`判断是否已经滚动到列表尾部。\n\n> 注意，如果正分页的项目列表添加了新的对象，后续基于偏移量的查询的内容都将发生更改。\n\n# 支持游标和偏移量的通用分页机制\n\n每个API视场景需要实现部分规范（比如仅实现向后翻页，不实现向前翻页），没有实现的行为统一返回一个特定错误码 \"not supported\"\n\n## HTTP Request\n\n- `limit`: 必填项；期望返回的记录数量；整数类型；必须大于等于0\n- `after`: 可选项；字符串类型；表示查询从`after`指向的记录之后（不包括`after`指向的当前记录）的`limit`条记录\n- `before`: 可选项；字符串类型；表示查询从`before`指向的记录之前（不包括`before`指向的当前记录）的`limit`条记录\n- 备注：\n    - Request中`before`、`after`不能并存\n    - 如果Request中没有`before`和`after`，视为从结果集起始位置向后查询\n    - **MySQL和MongoDB均不支持基于游标位置的向前查询**，如需支持需要在程序逻辑中实现\n\n## HTTP Response\n\n```json\n{\n    \"code\": 0,\n    \"result\": {\n        \"rows\": [\n            //\"... Endpoint data is here\"\n        ],\n        \"paging\": {\n            \"cursors\": {\n                \"top\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n                \"last\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\"\n            },\n            \"previous\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n            \"next\": \"MTAxNTExOTQ1MjAwNzI5NDE=\" or \"19\",\n            \"count\": 1087\n        }\n    }\n}\n```\n\n- `paging.cursors.top`: 必填项；字符串或者null；指向已返回的数据页面开头的游标\n- `paging.cursors.last`: 必填项；字符串或者null；指向已返回的数据页面末尾的游标\n- `paging.previous`: 必填项；字符串或者null；查询前一页数据的末尾位置，Request中将此值赋给`before`，为null时，表示没有前一页\n- `paging.next`: 必填项；字符串或者null；查询后一页数据的起始位置，Request中将此值赋给`after`，为null时，表示没有后一页\n- `paging.count`: 可选项；整型；结果集总数\n- 备注：\n    - `rows`为空结果集时：`paging.cursors.top`、`paging.cursors.last`为`null`，`paging.previous`、`paging.next`不一定为`null`\n    - 仅一条结果集是，`paging.cursors.top`、`paging.cursors.last`相同\n\n# 参考\n\n- [twitter API - GET statuses/user_timeline](https://dev.twitter.com/rest/reference/get/statuses/user_timeline)\n","slug":"general-pagination-for-mobile-app","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneoq000sv7bf44rkzffm","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于大多数mobile App，当 App 发出请求时，通常不会在单个响应中收到该请求的全部结果，而是以分片的方式获取部分结果。</p>\n<p>随着业务需求的变化，某些情况下 App 的翻页机制可能会调整。一般我们通过 App 重新发版，服务端和客户端同步调整分页机制来完成调整。而本文提供了一种通用协议，支持仅通过服务端发版来调整 App 的分页机制。</p>\n<h1 id=\"常见分页机制\"><a href=\"#常见分页机制\" class=\"headerlink\" title=\"常见分页机制\"></a>常见分页机制</h1><h2 id=\"基于游标的分页\"><a href=\"#基于游标的分页\" class=\"headerlink\" title=\"基于游标的分页\"></a>基于游标的分页</h2><p>游标是指标记数据列表中特定项目的一个随机字符串。该项目未被删除时，游标将始终指向列表的相同部分，项目被删除时游标即失效。因此，客户端应用不应存储任何旧的游标，也不能假定它们仍然有效。</p>\n<p>Request的结构一般如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;before=NDMyNzQyODI3OTQw</div><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;after=MTAxNTExOTQ1MjAwNzI5NDE=</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>limit</strong>：每个页面返回的单独对象的数量。请注意这是上限，如果数据列表中没有足够的剩余对象，那么返回的数量将小于这个数。为防止客户端传入过大的值，某些列表的 <code>limit</code> 值将设置上限。</li>\n<li><strong>before</strong>：向后查询的起始位置。</li>\n<li><strong>after</strong>：向前查询的起始位置。</li>\n</ul>\n<p>Response结构一般如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">     ... Endpoint data is here</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"paging\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"cursors\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"top\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"NDMyNzQyODI3OTQw\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"previous\"</span>: <span class=\"string\">\"NDMyNzQyODI3OTQw\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"next\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>rows</strong>：如果当前页没有数据，或者根据过滤规则（比如隐私）当前页所有数据都被过滤掉，返回空的数组。客户端程序不能根据<code>rows</code>是否为空数组来判断，是否已经滚动到列表的末尾，而应根据下面的<code>next</code>字段是否有值来决定是否滚动到了列表尾部。</li>\n<li><strong>top</strong>：已返回的数据页面开头的游标。</li>\n<li><strong>last</strong>：已返回的数据页面末尾的游标。</li>\n<li><strong>previous</strong>：上一页数据的 API 端点。如果是<code>null</code>或者没有此字段，则表示返回的是第一页数据。</li>\n<li><strong>next</strong>：下一页数据的 API 端点。如果是<code>null</code>或者没有此字段，则表示返回的是最后一页数据。</li>\n</ul>\n<h2 id=\"基于偏移量的分页\"><a href=\"#基于偏移量的分页\" class=\"headerlink\" title=\"基于偏移量的分页\"></a>基于偏移量的分页</h2><p>Request的结构一般如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;offset=30</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>limit</strong>：每个页面返回的单独对象的数量。</li>\n<li><strong>offset</strong>：偏移量，查询的起始位置。</li>\n</ul>\n<blockquote>\n<p>一般情况下，还会包含其他查询条件，比如根据关键字查找姓名和关键字匹配的用户</p>\n</blockquote>\n<p>Response结构一般如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">     ... Endpoint data is here</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"count\"</span>: <span class=\"number\">10765</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>count</strong>：符合查询条件的总记录数。客户端根据<code>offset</code>和<code>count</code>判断是否已经滚动到列表尾部。</li>\n</ul>\n<blockquote>\n<p>注意，如果正分页的项目列表添加了新的对象，后续基于偏移量的查询的内容都将发生更改。</p>\n</blockquote>\n<h1 id=\"支持游标和偏移量的通用分页机制\"><a href=\"#支持游标和偏移量的通用分页机制\" class=\"headerlink\" title=\"支持游标和偏移量的通用分页机制\"></a>支持游标和偏移量的通用分页机制</h1><p>每个API视场景需要实现部分规范（比如仅实现向后翻页，不实现向前翻页），没有实现的行为统一返回一个特定错误码 “not supported”</p>\n<h2 id=\"HTTP-Request\"><a href=\"#HTTP-Request\" class=\"headerlink\" title=\"HTTP Request\"></a>HTTP Request</h2><ul>\n<li><code>limit</code>: 必填项；期望返回的记录数量；整数类型；必须大于等于0</li>\n<li><code>after</code>: 可选项；字符串类型；表示查询从<code>after</code>指向的记录之后（不包括<code>after</code>指向的当前记录）的<code>limit</code>条记录</li>\n<li><code>before</code>: 可选项；字符串类型；表示查询从<code>before</code>指向的记录之前（不包括<code>before</code>指向的当前记录）的<code>limit</code>条记录</li>\n<li>备注：<ul>\n<li>Request中<code>before</code>、<code>after</code>不能并存</li>\n<li>如果Request中没有<code>before</code>和<code>after</code>，视为从结果集起始位置向后查询</li>\n<li><strong>MySQL和MongoDB均不支持基于游标位置的向前查询</strong>，如需支持需要在程序逻辑中实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP-Response\"><a href=\"#HTTP-Response\" class=\"headerlink\" title=\"HTTP Response\"></a>HTTP Response</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">            //<span class=\"string\">\"... Endpoint data is here\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"paging\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"cursors\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"top\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"previous\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"next\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"count\"</span>: <span class=\"number\">1087</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>paging.cursors.top</code>: 必填项；字符串或者null；指向已返回的数据页面开头的游标</li>\n<li><code>paging.cursors.last</code>: 必填项；字符串或者null；指向已返回的数据页面末尾的游标</li>\n<li><code>paging.previous</code>: 必填项；字符串或者null；查询前一页数据的末尾位置，Request中将此值赋给<code>before</code>，为null时，表示没有前一页</li>\n<li><code>paging.next</code>: 必填项；字符串或者null；查询后一页数据的起始位置，Request中将此值赋给<code>after</code>，为null时，表示没有后一页</li>\n<li><code>paging.count</code>: 可选项；整型；结果集总数</li>\n<li>备注：<ul>\n<li><code>rows</code>为空结果集时：<code>paging.cursors.top</code>、<code>paging.cursors.last</code>为<code>null</code>，<code>paging.previous</code>、<code>paging.next</code>不一定为<code>null</code></li>\n<li>仅一条结果集是，<code>paging.cursors.top</code>、<code>paging.cursors.last</code>相同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://dev.twitter.com/rest/reference/get/statuses/user_timeline\" target=\"_blank\" rel=\"external\">twitter API - GET statuses/user_timeline</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于大多数mobile App，当 App 发出请求时，通常不会在单个响应中收到该请求的全部结果，而是以分片的方式获取部分结果。</p>\n<p>随着业务需求的变化，某些情况下 App 的翻页机制可能会调整。一般我们通过 App 重新发版，服务端和客户端同步调整分页机制来完成调整。而本文提供了一种通用协议，支持仅通过服务端发版来调整 App 的分页机制。</p>\n<h1 id=\"常见分页机制\"><a href=\"#常见分页机制\" class=\"headerlink\" title=\"常见分页机制\"></a>常见分页机制</h1><h2 id=\"基于游标的分页\"><a href=\"#基于游标的分页\" class=\"headerlink\" title=\"基于游标的分页\"></a>基于游标的分页</h2><p>游标是指标记数据列表中特定项目的一个随机字符串。该项目未被删除时，游标将始终指向列表的相同部分，项目被删除时游标即失效。因此，客户端应用不应存储任何旧的游标，也不能假定它们仍然有效。</p>\n<p>Request的结构一般如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;before=NDMyNzQyODI3OTQw</div><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;after=MTAxNTExOTQ1MjAwNzI5NDE=</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>limit</strong>：每个页面返回的单独对象的数量。请注意这是上限，如果数据列表中没有足够的剩余对象，那么返回的数量将小于这个数。为防止客户端传入过大的值，某些列表的 <code>limit</code> 值将设置上限。</li>\n<li><strong>before</strong>：向后查询的起始位置。</li>\n<li><strong>after</strong>：向前查询的起始位置。</li>\n</ul>\n<p>Response结构一般如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">     ... Endpoint data is here</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"paging\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"cursors\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"top\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"NDMyNzQyODI3OTQw\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"previous\"</span>: <span class=\"string\">\"NDMyNzQyODI3OTQw\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"next\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>rows</strong>：如果当前页没有数据，或者根据过滤规则（比如隐私）当前页所有数据都被过滤掉，返回空的数组。客户端程序不能根据<code>rows</code>是否为空数组来判断，是否已经滚动到列表的末尾，而应根据下面的<code>next</code>字段是否有值来决定是否滚动到了列表尾部。</li>\n<li><strong>top</strong>：已返回的数据页面开头的游标。</li>\n<li><strong>last</strong>：已返回的数据页面末尾的游标。</li>\n<li><strong>previous</strong>：上一页数据的 API 端点。如果是<code>null</code>或者没有此字段，则表示返回的是第一页数据。</li>\n<li><strong>next</strong>：下一页数据的 API 端点。如果是<code>null</code>或者没有此字段，则表示返回的是最后一页数据。</li>\n</ul>\n<h2 id=\"基于偏移量的分页\"><a href=\"#基于偏移量的分页\" class=\"headerlink\" title=\"基于偏移量的分页\"></a>基于偏移量的分页</h2><p>Request的结构一般如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.sample.com/v3/users/?limit=30&amp;offset=30</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>limit</strong>：每个页面返回的单独对象的数量。</li>\n<li><strong>offset</strong>：偏移量，查询的起始位置。</li>\n</ul>\n<blockquote>\n<p>一般情况下，还会包含其他查询条件，比如根据关键字查找姓名和关键字匹配的用户</p>\n</blockquote>\n<p>Response结构一般如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">     ... Endpoint data is here</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"count\"</span>: <span class=\"number\">10765</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><strong>count</strong>：符合查询条件的总记录数。客户端根据<code>offset</code>和<code>count</code>判断是否已经滚动到列表尾部。</li>\n</ul>\n<blockquote>\n<p>注意，如果正分页的项目列表添加了新的对象，后续基于偏移量的查询的内容都将发生更改。</p>\n</blockquote>\n<h1 id=\"支持游标和偏移量的通用分页机制\"><a href=\"#支持游标和偏移量的通用分页机制\" class=\"headerlink\" title=\"支持游标和偏移量的通用分页机制\"></a>支持游标和偏移量的通用分页机制</h1><p>每个API视场景需要实现部分规范（比如仅实现向后翻页，不实现向前翻页），没有实现的行为统一返回一个特定错误码 “not supported”</p>\n<h2 id=\"HTTP-Request\"><a href=\"#HTTP-Request\" class=\"headerlink\" title=\"HTTP Request\"></a>HTTP Request</h2><ul>\n<li><code>limit</code>: 必填项；期望返回的记录数量；整数类型；必须大于等于0</li>\n<li><code>after</code>: 可选项；字符串类型；表示查询从<code>after</code>指向的记录之后（不包括<code>after</code>指向的当前记录）的<code>limit</code>条记录</li>\n<li><code>before</code>: 可选项；字符串类型；表示查询从<code>before</code>指向的记录之前（不包括<code>before</code>指向的当前记录）的<code>limit</code>条记录</li>\n<li>备注：<ul>\n<li>Request中<code>before</code>、<code>after</code>不能并存</li>\n<li>如果Request中没有<code>before</code>和<code>after</code>，视为从结果集起始位置向后查询</li>\n<li><strong>MySQL和MongoDB均不支持基于游标位置的向前查询</strong>，如需支持需要在程序逻辑中实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP-Response\"><a href=\"#HTTP-Response\" class=\"headerlink\" title=\"HTTP Response\"></a>HTTP Response</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"rows\"</span>: [</div><div class=\"line\">            //<span class=\"string\">\"... Endpoint data is here\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"paging\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"cursors\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"top\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"previous\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"next\"</span>: <span class=\"string\">\"MTAxNTExOTQ1MjAwNzI5NDE=\"</span> or <span class=\"string\">\"19\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"count\"</span>: <span class=\"number\">1087</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>paging.cursors.top</code>: 必填项；字符串或者null；指向已返回的数据页面开头的游标</li>\n<li><code>paging.cursors.last</code>: 必填项；字符串或者null；指向已返回的数据页面末尾的游标</li>\n<li><code>paging.previous</code>: 必填项；字符串或者null；查询前一页数据的末尾位置，Request中将此值赋给<code>before</code>，为null时，表示没有前一页</li>\n<li><code>paging.next</code>: 必填项；字符串或者null；查询后一页数据的起始位置，Request中将此值赋给<code>after</code>，为null时，表示没有后一页</li>\n<li><code>paging.count</code>: 可选项；整型；结果集总数</li>\n<li>备注：<ul>\n<li><code>rows</code>为空结果集时：<code>paging.cursors.top</code>、<code>paging.cursors.last</code>为<code>null</code>，<code>paging.previous</code>、<code>paging.next</code>不一定为<code>null</code></li>\n<li>仅一条结果集是，<code>paging.cursors.top</code>、<code>paging.cursors.last</code>相同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://dev.twitter.com/rest/reference/get/statuses/user_timeline\" target=\"_blank\" rel=\"external\">twitter API - GET statuses/user_timeline</a></li>\n</ul>\n"},{"title":"学习Elasticsearch之2：在Ubuntu 14.04上安装Elasticsearch","date":"2016-08-05T16:40:48.000Z","_content":"\n{% asset_img logo-elastic.png %}\n\n\n#  Elasticsearch的安装有两种方式\n\n- 通过`tar.gz`压缩包方式安装，参考[ElasticSearch Reference 2.3 - Installation](https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html)\n- 通过`apt`命令安装，参考[ElasticSearch Reference 2.3 - Repositories](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html)\n\n## 通过`tar.gz`压缩包安装步骤\n\n- SSH远程连接Ubuntu Server，`ssh ethancai@###.###.###.###`\n- 下载Elasticsearch\n    - `mkdir ~/Downloads && cd ~/Downloads && curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.1/elasticsearch-2.3.1.tar.gz`\n- 解压\n    - `tar -xzvf elasticsearch-2.3.1.tar.gz && sudo mv elasticsearch-2.3.1 /var/`\n- 运行\n    - `cd /var/elasticsearch-2.3.1/bin`\n    - `./elasticsearch`，或者以指定`cluster`和`node`名称的方式运行`./elasticsearch --cluster.name my_cluster_name --node.name my_node_name`\n\n## 通过`apt`命令安装\n\n- Download and install the Public Signing Key\n    - `wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -`\n- Save the repository definition\n    - `echo \"deb http://packages.elastic.co/elasticsearch/2.x/debian stable main\" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list`\n- Install elasticsearch, 注意这里需要指定安装版本\n    - `sudo apt-get update && sudo apt-get install elasticsearch=2.3.2`\n- Configure Elasticsearch to automatically start during bootup\n    - `sudo update-rc.d elasticsearch defaults 95 10`\n\n## 验证安装是否成功\n\nBy default, Elasticsearch uses port 9200 to provide access to its REST API. 你可以通过下面命令验证是否启动成功：\n\n- `curl 'localhost:9200/_cat/health?v'`\n- `curl 'localhost:9200/_cat/nodes?v'`\n- 验证后记得重启，`sudo shutdown -r 0`\n\n# 默认目录\n\n不同安装方式，默认的目录位置不一样，参考[ElasticSearch Reference 2.3 - Directory Layout](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-dir-layout.html)\n\n通过`tar.gz`方式安装的默认目录如下:\n\n| Type    | Description                                                                 | Location Debian/Ubuntu          |\n|:--------|:----------------------------------------------------------------------------|:--------------------------------|\n| home    | Home of elasticsearch installation.                                         | `{extract.path}`                |\n| bin     | Binary scripts including elasticsearch to start a node.                     | `{extract.path}/bin`            |\n| conf    | Configuration files elasticsearch.yml and logging.yml.                      | `{extract.path}/config`         |\n| data    | The location of the data files of each index / shard allocated on the node. | `{extract.path}/data`           |\n| logs    | Log files location                                                          | `{extract.path}/logs`           |\n| plugins | Plugin files location. Each plugin will be contained in a subdirectory.     | `{extract.path}/plugins`        |\n| repo    | Shared file system repository locations.                                    | Not configured                  |\n| script  | Location of script files.                                                   | `{extract.path}/config/scripts` |\n\n通过`apt`方式安装的默认目录如下：\n\n| Type    | Description                                                                                                          | Location Debian/Ubuntu             |\n|:--------|:---------------------------------------------------------------------------------------------------------------------|:-----------------------------------|\n| home    | Home of elasticsearch installation.                                                                                  | `/usr/share/elasticsearch`         |\n| bin     | Binary scripts including elasticsearch to start a node.                                                              | `/usr/share/elasticsearch/bin`     |\n| conf    | Configuration files elasticsearch.yml and logging.yml.                                                               | `/etc/elasticsearch`               |\n| conf    | Environment variables including heap size, file descriptors. **There isn't this folder when install using `tar.gz`** | `/etc/default/elasticsearch`       |\n| data    | The location of the data files of each index / shard allocated on the node.                                          | `/var/lib/elasticsearch`           |\n| logs    | Log files location                                                                                                   | `/var/log/elasticsearch`           |\n| plugins | Plugin files location. Each plugin will be contained in a subdirectory.                                              | `/usr/share/elasticsearch/plugins` |\n| repo    | Shared file system repository locations.                                                                             | Not configured                     |\n| script  | Location of script files.                                                                                            | `/etc/elasticsearch/scripts`       |\n\n# 安装Elasticsearch插件\n\nPlugins are a way to enhance the core Elasticsearch functionality in a custom manner. They range from adding custom mapping types, custom analyzers, native scripts, custom discovery and more.\n\nThere are three types of plugins:\n\n- `Java Plugins`: These plugins contain only JAR files, and must be installed on every node in the cluster. **After installation, each node must be restarted before the plugin becomes visible.**\n- `Site Plugins`: These plugins contain static web content like Javascript, HTML, and CSS files, that can be served directly from Elasticsearch. Site plugins may only need to be installed on one node, and do not require a restart to become visible.\n    - The content of site plugins is accessible via a URL like: `http://yournode:9200/_plugin/[plugin name]`\n- `Mixed Plugins`: Mixed plugins contain both JAR files and web content.\n\n## 安装`Site Plugins`\n\n```bash\n$ sudo su -\n$ cd /\n\n# 查看已安装插件\n$ /usr/share/elasticsearch/bin/plugin list\n\n# 安装elasticsearch-head，访问http://localhost:9200/_plugin/head\n$ /usr/share/elasticsearch/bin/plugin install mobz/elasticsearch-head\n\n# 安装elasticsearch-kopf，访问http://localhost:9200/_plugin/kopf\n$ /usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf\n\n# 安装elastichq，访问http://localhost:9200/_plugin/hq\n$ /usr/share/elasticsearch/bin/plugin install royrusso/elasticsearch-HQ\n\n# 安装elasticsearch-inquisitor，访问http://localhost:9200/_plugin/elasticsearch-inquisitor\n$ /usr/share/elasticsearch/bin/plugin install polyfractal/elasticsearch-inquisitor\n```\n\n## 安装`Jar Plugins`\n\n### 安装`elasticsearch-analysis-ik`\n\n安装前请注意和Elasticsearch的适配版本，安装[elasticsearch-analysis-ik](https://github.com/medcl/elasticsearch-analysis-ik)有两种方式：\n\n- 通过源代码手动编译安装\n    - 请先[安装apache maven](http://maven.apache.org/install.html)\n    - 下载`Apache Maven`的源代码\n        - `git clone https://github.com/medcl/elasticsearch-analysis-ik.git`\n    - 编译打包\n        - `cd [elasticsearch-analysis-ik所在目录]`\n        - `git checkout v1.9.2`\n        - `mvn package`\n    - 解压编译生成的打包文件`target/releases/elasticsearch-analysis-ik-{version}.zip`，并拷贝解压后的文件到Elasticsearch的plugins目录\n        - `unzip elasticsearch-analysis-ik-{version}.zip -d elasticsearch-analysis-ik-{version}`\n        - `scp -r elasticsearch-analysis-ik-{version} ubuntu@xxx.xxx.xxx.xxx:/var/tmp/`\n        - `cp -R /var/tmp/elasticsearch-analysis-ik-{version} /usr/share/elasticsearch/plugins`\n        - `chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-{version}`\n    - 重启elasticsearch服务\n        - `service elasticsearch restart`\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-ik/releases)\n    - 下载指定版本的打包文件\n    - 后续步骤同上\n\n注意：\n\n- v2.2.1版本以后安装`elasticsearch-analysis-ik`并不需要修改`elasticsearch.yml`配置文件\n\n### 安装`elasticsearch-analysis-pinyin`\n\n安装前请注意和Elasticsearch的适配版本, 安装[elasticsearch-analysis-pinyin](https://github.com/medcl/elasticsearch-analysis-pinyin)有两种方式：\n\n- 通过源代码手动编译安装\n    - 具体操作参考`elasticsearch-analysis-ik`的安装步骤\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-pinyin/releases)\n\n### 安装`elasticsearch-analysis-stconvert`\n\n安装前请注意和Elasticsearch的适配版本, 安装[elasticsearch-analysis-stconvert](https://github.com/medcl/elasticsearch-analysis-stconvert)有两种方式：\n\n- 通过源代码手动编译安装\n    - 具体操作参考`elasticsearch-analysis-ik`的安装步骤\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-stconvert/releases)\n\n# 总结\n\n建议Oracle JDK和Elasticsearch均使用`apt`安装方式安装，原因如下：\n\n- 安装方便\n- 默认目录的配置更规范\n- 和Elasticsearch官方的Docker镜像的目录结构一致，未来切换到Docker方式部署障碍少，参考[Dockerfile](https://github.com/docker-library/elasticsearch/blob/8267f6c29f06373373b4379473291d3082728cc0/2.3/Dockerfile)\n","source":"_posts/install-elasticsearch-on-ubuntu-14-04.md","raw":"---\ntitle: 学习Elasticsearch之2：在Ubuntu 14.04上安装Elasticsearch\ntags:\n  - jdk\n  - elasticsearch\ncategories:\n  - 软件开发\ndate: 2016-08-06 00:40:48\n---\n\n{% asset_img logo-elastic.png %}\n\n\n#  Elasticsearch的安装有两种方式\n\n- 通过`tar.gz`压缩包方式安装，参考[ElasticSearch Reference 2.3 - Installation](https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html)\n- 通过`apt`命令安装，参考[ElasticSearch Reference 2.3 - Repositories](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html)\n\n## 通过`tar.gz`压缩包安装步骤\n\n- SSH远程连接Ubuntu Server，`ssh ethancai@###.###.###.###`\n- 下载Elasticsearch\n    - `mkdir ~/Downloads && cd ~/Downloads && curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.1/elasticsearch-2.3.1.tar.gz`\n- 解压\n    - `tar -xzvf elasticsearch-2.3.1.tar.gz && sudo mv elasticsearch-2.3.1 /var/`\n- 运行\n    - `cd /var/elasticsearch-2.3.1/bin`\n    - `./elasticsearch`，或者以指定`cluster`和`node`名称的方式运行`./elasticsearch --cluster.name my_cluster_name --node.name my_node_name`\n\n## 通过`apt`命令安装\n\n- Download and install the Public Signing Key\n    - `wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -`\n- Save the repository definition\n    - `echo \"deb http://packages.elastic.co/elasticsearch/2.x/debian stable main\" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list`\n- Install elasticsearch, 注意这里需要指定安装版本\n    - `sudo apt-get update && sudo apt-get install elasticsearch=2.3.2`\n- Configure Elasticsearch to automatically start during bootup\n    - `sudo update-rc.d elasticsearch defaults 95 10`\n\n## 验证安装是否成功\n\nBy default, Elasticsearch uses port 9200 to provide access to its REST API. 你可以通过下面命令验证是否启动成功：\n\n- `curl 'localhost:9200/_cat/health?v'`\n- `curl 'localhost:9200/_cat/nodes?v'`\n- 验证后记得重启，`sudo shutdown -r 0`\n\n# 默认目录\n\n不同安装方式，默认的目录位置不一样，参考[ElasticSearch Reference 2.3 - Directory Layout](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-dir-layout.html)\n\n通过`tar.gz`方式安装的默认目录如下:\n\n| Type    | Description                                                                 | Location Debian/Ubuntu          |\n|:--------|:----------------------------------------------------------------------------|:--------------------------------|\n| home    | Home of elasticsearch installation.                                         | `{extract.path}`                |\n| bin     | Binary scripts including elasticsearch to start a node.                     | `{extract.path}/bin`            |\n| conf    | Configuration files elasticsearch.yml and logging.yml.                      | `{extract.path}/config`         |\n| data    | The location of the data files of each index / shard allocated on the node. | `{extract.path}/data`           |\n| logs    | Log files location                                                          | `{extract.path}/logs`           |\n| plugins | Plugin files location. Each plugin will be contained in a subdirectory.     | `{extract.path}/plugins`        |\n| repo    | Shared file system repository locations.                                    | Not configured                  |\n| script  | Location of script files.                                                   | `{extract.path}/config/scripts` |\n\n通过`apt`方式安装的默认目录如下：\n\n| Type    | Description                                                                                                          | Location Debian/Ubuntu             |\n|:--------|:---------------------------------------------------------------------------------------------------------------------|:-----------------------------------|\n| home    | Home of elasticsearch installation.                                                                                  | `/usr/share/elasticsearch`         |\n| bin     | Binary scripts including elasticsearch to start a node.                                                              | `/usr/share/elasticsearch/bin`     |\n| conf    | Configuration files elasticsearch.yml and logging.yml.                                                               | `/etc/elasticsearch`               |\n| conf    | Environment variables including heap size, file descriptors. **There isn't this folder when install using `tar.gz`** | `/etc/default/elasticsearch`       |\n| data    | The location of the data files of each index / shard allocated on the node.                                          | `/var/lib/elasticsearch`           |\n| logs    | Log files location                                                                                                   | `/var/log/elasticsearch`           |\n| plugins | Plugin files location. Each plugin will be contained in a subdirectory.                                              | `/usr/share/elasticsearch/plugins` |\n| repo    | Shared file system repository locations.                                                                             | Not configured                     |\n| script  | Location of script files.                                                                                            | `/etc/elasticsearch/scripts`       |\n\n# 安装Elasticsearch插件\n\nPlugins are a way to enhance the core Elasticsearch functionality in a custom manner. They range from adding custom mapping types, custom analyzers, native scripts, custom discovery and more.\n\nThere are three types of plugins:\n\n- `Java Plugins`: These plugins contain only JAR files, and must be installed on every node in the cluster. **After installation, each node must be restarted before the plugin becomes visible.**\n- `Site Plugins`: These plugins contain static web content like Javascript, HTML, and CSS files, that can be served directly from Elasticsearch. Site plugins may only need to be installed on one node, and do not require a restart to become visible.\n    - The content of site plugins is accessible via a URL like: `http://yournode:9200/_plugin/[plugin name]`\n- `Mixed Plugins`: Mixed plugins contain both JAR files and web content.\n\n## 安装`Site Plugins`\n\n```bash\n$ sudo su -\n$ cd /\n\n# 查看已安装插件\n$ /usr/share/elasticsearch/bin/plugin list\n\n# 安装elasticsearch-head，访问http://localhost:9200/_plugin/head\n$ /usr/share/elasticsearch/bin/plugin install mobz/elasticsearch-head\n\n# 安装elasticsearch-kopf，访问http://localhost:9200/_plugin/kopf\n$ /usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf\n\n# 安装elastichq，访问http://localhost:9200/_plugin/hq\n$ /usr/share/elasticsearch/bin/plugin install royrusso/elasticsearch-HQ\n\n# 安装elasticsearch-inquisitor，访问http://localhost:9200/_plugin/elasticsearch-inquisitor\n$ /usr/share/elasticsearch/bin/plugin install polyfractal/elasticsearch-inquisitor\n```\n\n## 安装`Jar Plugins`\n\n### 安装`elasticsearch-analysis-ik`\n\n安装前请注意和Elasticsearch的适配版本，安装[elasticsearch-analysis-ik](https://github.com/medcl/elasticsearch-analysis-ik)有两种方式：\n\n- 通过源代码手动编译安装\n    - 请先[安装apache maven](http://maven.apache.org/install.html)\n    - 下载`Apache Maven`的源代码\n        - `git clone https://github.com/medcl/elasticsearch-analysis-ik.git`\n    - 编译打包\n        - `cd [elasticsearch-analysis-ik所在目录]`\n        - `git checkout v1.9.2`\n        - `mvn package`\n    - 解压编译生成的打包文件`target/releases/elasticsearch-analysis-ik-{version}.zip`，并拷贝解压后的文件到Elasticsearch的plugins目录\n        - `unzip elasticsearch-analysis-ik-{version}.zip -d elasticsearch-analysis-ik-{version}`\n        - `scp -r elasticsearch-analysis-ik-{version} ubuntu@xxx.xxx.xxx.xxx:/var/tmp/`\n        - `cp -R /var/tmp/elasticsearch-analysis-ik-{version} /usr/share/elasticsearch/plugins`\n        - `chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-{version}`\n    - 重启elasticsearch服务\n        - `service elasticsearch restart`\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-ik/releases)\n    - 下载指定版本的打包文件\n    - 后续步骤同上\n\n注意：\n\n- v2.2.1版本以后安装`elasticsearch-analysis-ik`并不需要修改`elasticsearch.yml`配置文件\n\n### 安装`elasticsearch-analysis-pinyin`\n\n安装前请注意和Elasticsearch的适配版本, 安装[elasticsearch-analysis-pinyin](https://github.com/medcl/elasticsearch-analysis-pinyin)有两种方式：\n\n- 通过源代码手动编译安装\n    - 具体操作参考`elasticsearch-analysis-ik`的安装步骤\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-pinyin/releases)\n\n### 安装`elasticsearch-analysis-stconvert`\n\n安装前请注意和Elasticsearch的适配版本, 安装[elasticsearch-analysis-stconvert](https://github.com/medcl/elasticsearch-analysis-stconvert)有两种方式：\n\n- 通过源代码手动编译安装\n    - 具体操作参考`elasticsearch-analysis-ik`的安装步骤\n- 直接[下载安装程序包](https://github.com/medcl/elasticsearch-analysis-stconvert/releases)\n\n# 总结\n\n建议Oracle JDK和Elasticsearch均使用`apt`安装方式安装，原因如下：\n\n- 安装方便\n- 默认目录的配置更规范\n- 和Elasticsearch官方的Docker镜像的目录结构一致，未来切换到Docker方式部署障碍少，参考[Dockerfile](https://github.com/docker-library/elasticsearch/blob/8267f6c29f06373373b4379473291d3082728cc0/2.3/Dockerfile)\n","slug":"install-elasticsearch-on-ubuntu-14-04","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneou000vv7bfdk2p3ars","content":"<img src=\"/2016/08/06/install-elasticsearch-on-ubuntu-14-04/logo-elastic.png\" alt=\"logo-elastic.png\" title=\"\">\n<h1 id=\"Elasticsearch的安装有两种方式\"><a href=\"#Elasticsearch的安装有两种方式\" class=\"headerlink\" title=\"Elasticsearch的安装有两种方式\"></a>Elasticsearch的安装有两种方式</h1><ul>\n<li>通过<code>tar.gz</code>压缩包方式安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Installation</a></li>\n<li>通过<code>apt</code>命令安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Repositories</a></li>\n</ul>\n<h2 id=\"通过tar-gz压缩包安装步骤\"><a href=\"#通过tar-gz压缩包安装步骤\" class=\"headerlink\" title=\"通过tar.gz压缩包安装步骤\"></a>通过<code>tar.gz</code>压缩包安装步骤</h2><ul>\n<li>SSH远程连接Ubuntu Server，<code>ssh ethancai@###.###.###.###</code></li>\n<li>下载Elasticsearch<ul>\n<li><code>mkdir ~/Downloads &amp;&amp; cd ~/Downloads &amp;&amp; curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.1/elasticsearch-2.3.1.tar.gz</code></li>\n</ul>\n</li>\n<li>解压<ul>\n<li><code>tar -xzvf elasticsearch-2.3.1.tar.gz &amp;&amp; sudo mv elasticsearch-2.3.1 /var/</code></li>\n</ul>\n</li>\n<li>运行<ul>\n<li><code>cd /var/elasticsearch-2.3.1/bin</code></li>\n<li><code>./elasticsearch</code>，或者以指定<code>cluster</code>和<code>node</code>名称的方式运行<code>./elasticsearch --cluster.name my_cluster_name --node.name my_node_name</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通过apt命令安装\"><a href=\"#通过apt命令安装\" class=\"headerlink\" title=\"通过apt命令安装\"></a>通过<code>apt</code>命令安装</h2><ul>\n<li>Download and install the Public Signing Key<ul>\n<li><code>wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</code></li>\n</ul>\n</li>\n<li>Save the repository definition<ul>\n<li><code>echo &quot;deb http://packages.elastic.co/elasticsearch/2.x/debian stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list</code></li>\n</ul>\n</li>\n<li>Install elasticsearch, 注意这里需要指定安装版本<ul>\n<li><code>sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch=2.3.2</code></li>\n</ul>\n</li>\n<li>Configure Elasticsearch to automatically start during bootup<ul>\n<li><code>sudo update-rc.d elasticsearch defaults 95 10</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h2><p>By default, Elasticsearch uses port 9200 to provide access to its REST API. 你可以通过下面命令验证是否启动成功：</p>\n<ul>\n<li><code>curl &#39;localhost:9200/_cat/health?v&#39;</code></li>\n<li><code>curl &#39;localhost:9200/_cat/nodes?v&#39;</code></li>\n<li>验证后记得重启，<code>sudo shutdown -r 0</code></li>\n</ul>\n<h1 id=\"默认目录\"><a href=\"#默认目录\" class=\"headerlink\" title=\"默认目录\"></a>默认目录</h1><p>不同安装方式，默认的目录位置不一样，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-dir-layout.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Directory Layout</a></p>\n<p>通过<code>tar.gz</code>方式安装的默认目录如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">Location Debian/Ubuntu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">Home of elasticsearch installation.</td>\n<td style=\"text-align:left\"><code>{extract.path}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">Binary scripts including elasticsearch to start a node.</td>\n<td style=\"text-align:left\"><code>{extract.path}/bin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Configuration files elasticsearch.yml and logging.yml.</td>\n<td style=\"text-align:left\"><code>{extract.path}/config</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">The location of the data files of each index / shard allocated on the node.</td>\n<td style=\"text-align:left\"><code>{extract.path}/data</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">Log files location</td>\n<td style=\"text-align:left\"><code>{extract.path}/logs</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">plugins</td>\n<td style=\"text-align:left\">Plugin files location. Each plugin will be contained in a subdirectory.</td>\n<td style=\"text-align:left\"><code>{extract.path}/plugins</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">repo</td>\n<td style=\"text-align:left\">Shared file system repository locations.</td>\n<td style=\"text-align:left\">Not configured</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">script</td>\n<td style=\"text-align:left\">Location of script files.</td>\n<td style=\"text-align:left\"><code>{extract.path}/config/scripts</code></td>\n</tr>\n</tbody>\n</table>\n<p>通过<code>apt</code>方式安装的默认目录如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">Location Debian/Ubuntu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">Home of elasticsearch installation.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">Binary scripts including elasticsearch to start a node.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch/bin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Configuration files elasticsearch.yml and logging.yml.</td>\n<td style=\"text-align:left\"><code>/etc/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Environment variables including heap size, file descriptors. <strong>There isn’t this folder when install using <code>tar.gz</code></strong></td>\n<td style=\"text-align:left\"><code>/etc/default/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">The location of the data files of each index / shard allocated on the node.</td>\n<td style=\"text-align:left\"><code>/var/lib/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">Log files location</td>\n<td style=\"text-align:left\"><code>/var/log/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">plugins</td>\n<td style=\"text-align:left\">Plugin files location. Each plugin will be contained in a subdirectory.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch/plugins</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">repo</td>\n<td style=\"text-align:left\">Shared file system repository locations.</td>\n<td style=\"text-align:left\">Not configured</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">script</td>\n<td style=\"text-align:left\">Location of script files.</td>\n<td style=\"text-align:left\"><code>/etc/elasticsearch/scripts</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"安装Elasticsearch插件\"><a href=\"#安装Elasticsearch插件\" class=\"headerlink\" title=\"安装Elasticsearch插件\"></a>安装Elasticsearch插件</h1><p>Plugins are a way to enhance the core Elasticsearch functionality in a custom manner. They range from adding custom mapping types, custom analyzers, native scripts, custom discovery and more.</p>\n<p>There are three types of plugins:</p>\n<ul>\n<li><code>Java Plugins</code>: These plugins contain only JAR files, and must be installed on every node in the cluster. <strong>After installation, each node must be restarted before the plugin becomes visible.</strong></li>\n<li><code>Site Plugins</code>: These plugins contain static web content like Javascript, HTML, and CSS files, that can be served directly from Elasticsearch. Site plugins may only need to be installed on one node, and do not require a restart to become visible.<ul>\n<li>The content of site plugins is accessible via a URL like: <code>http://yournode:9200/_plugin/[plugin name]</code></li>\n</ul>\n</li>\n<li><code>Mixed Plugins</code>: Mixed plugins contain both JAR files and web content.</li>\n</ul>\n<h2 id=\"安装Site-Plugins\"><a href=\"#安装Site-Plugins\" class=\"headerlink\" title=\"安装Site Plugins\"></a>安装<code>Site Plugins</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo su -</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看已安装插件</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-head，访问http://localhost:9200/_plugin/head</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install mobz/elasticsearch-head</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-kopf，访问http://localhost:9200/_plugin/kopf</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elastichq，访问http://localhost:9200/_plugin/hq</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install royrusso/elasticsearch-HQ</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-inquisitor，访问http://localhost:9200/_plugin/elasticsearch-inquisitor</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install polyfractal/elasticsearch-inquisitor</div></pre></td></tr></table></figure>\n<h2 id=\"安装Jar-Plugins\"><a href=\"#安装Jar-Plugins\" class=\"headerlink\" title=\"安装Jar Plugins\"></a>安装<code>Jar Plugins</code></h2><h3 id=\"安装elasticsearch-analysis-ik\"><a href=\"#安装elasticsearch-analysis-ik\" class=\"headerlink\" title=\"安装elasticsearch-analysis-ik\"></a>安装<code>elasticsearch-analysis-ik</code></h3><p>安装前请注意和Elasticsearch的适配版本，安装<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-ik</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>请先<a href=\"http://maven.apache.org/install.html\" target=\"_blank\" rel=\"external\">安装apache maven</a></li>\n<li>下载<code>Apache Maven</code>的源代码<ul>\n<li><code>git clone https://github.com/medcl/elasticsearch-analysis-ik.git</code></li>\n</ul>\n</li>\n<li>编译打包<ul>\n<li><code>cd [elasticsearch-analysis-ik所在目录]</code></li>\n<li><code>git checkout v1.9.2</code></li>\n<li><code>mvn package</code></li>\n</ul>\n</li>\n<li>解压编译生成的打包文件<code>target/releases/elasticsearch-analysis-ik-{version}.zip</code>，并拷贝解压后的文件到Elasticsearch的plugins目录<ul>\n<li><code>unzip elasticsearch-analysis-ik-{version}.zip -d elasticsearch-analysis-ik-{version}</code></li>\n<li><code>scp -r elasticsearch-analysis-ik-{version} ubuntu@xxx.xxx.xxx.xxx:/var/tmp/</code></li>\n<li><code>cp -R /var/tmp/elasticsearch-analysis-ik-{version} /usr/share/elasticsearch/plugins</code></li>\n<li><code>chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-{version}</code></li>\n</ul>\n</li>\n<li>重启elasticsearch服务<ul>\n<li><code>service elasticsearch restart</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a><ul>\n<li>下载指定版本的打包文件</li>\n<li>后续步骤同上</li>\n</ul>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>v2.2.1版本以后安装<code>elasticsearch-analysis-ik</code>并不需要修改<code>elasticsearch.yml</code>配置文件</li>\n</ul>\n<h3 id=\"安装elasticsearch-analysis-pinyin\"><a href=\"#安装elasticsearch-analysis-pinyin\" class=\"headerlink\" title=\"安装elasticsearch-analysis-pinyin\"></a>安装<code>elasticsearch-analysis-pinyin</code></h3><p>安装前请注意和Elasticsearch的适配版本, 安装<a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-pinyin</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>具体操作参考<code>elasticsearch-analysis-ik</code>的安装步骤</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a></li>\n</ul>\n<h3 id=\"安装elasticsearch-analysis-stconvert\"><a href=\"#安装elasticsearch-analysis-stconvert\" class=\"headerlink\" title=\"安装elasticsearch-analysis-stconvert\"></a>安装<code>elasticsearch-analysis-stconvert</code></h3><p>安装前请注意和Elasticsearch的适配版本, 安装<a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-stconvert</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>具体操作参考<code>elasticsearch-analysis-ik</code>的安装步骤</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>建议Oracle JDK和Elasticsearch均使用<code>apt</code>安装方式安装，原因如下：</p>\n<ul>\n<li>安装方便</li>\n<li>默认目录的配置更规范</li>\n<li>和Elasticsearch官方的Docker镜像的目录结构一致，未来切换到Docker方式部署障碍少，参考<a href=\"https://github.com/docker-library/elasticsearch/blob/8267f6c29f06373373b4379473291d3082728cc0/2.3/Dockerfile\" target=\"_blank\" rel=\"external\">Dockerfile</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2016/08/06/install-elasticsearch-on-ubuntu-14-04/logo-elastic.png\" alt=\"logo-elastic.png\" title=\"\">\n<h1 id=\"Elasticsearch的安装有两种方式\"><a href=\"#Elasticsearch的安装有两种方式\" class=\"headerlink\" title=\"Elasticsearch的安装有两种方式\"></a>Elasticsearch的安装有两种方式</h1><ul>\n<li>通过<code>tar.gz</code>压缩包方式安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Installation</a></li>\n<li>通过<code>apt</code>命令安装，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Repositories</a></li>\n</ul>\n<h2 id=\"通过tar-gz压缩包安装步骤\"><a href=\"#通过tar-gz压缩包安装步骤\" class=\"headerlink\" title=\"通过tar.gz压缩包安装步骤\"></a>通过<code>tar.gz</code>压缩包安装步骤</h2><ul>\n<li>SSH远程连接Ubuntu Server，<code>ssh ethancai@###.###.###.###</code></li>\n<li>下载Elasticsearch<ul>\n<li><code>mkdir ~/Downloads &amp;&amp; cd ~/Downloads &amp;&amp; curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.1/elasticsearch-2.3.1.tar.gz</code></li>\n</ul>\n</li>\n<li>解压<ul>\n<li><code>tar -xzvf elasticsearch-2.3.1.tar.gz &amp;&amp; sudo mv elasticsearch-2.3.1 /var/</code></li>\n</ul>\n</li>\n<li>运行<ul>\n<li><code>cd /var/elasticsearch-2.3.1/bin</code></li>\n<li><code>./elasticsearch</code>，或者以指定<code>cluster</code>和<code>node</code>名称的方式运行<code>./elasticsearch --cluster.name my_cluster_name --node.name my_node_name</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通过apt命令安装\"><a href=\"#通过apt命令安装\" class=\"headerlink\" title=\"通过apt命令安装\"></a>通过<code>apt</code>命令安装</h2><ul>\n<li>Download and install the Public Signing Key<ul>\n<li><code>wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</code></li>\n</ul>\n</li>\n<li>Save the repository definition<ul>\n<li><code>echo &quot;deb http://packages.elastic.co/elasticsearch/2.x/debian stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list</code></li>\n</ul>\n</li>\n<li>Install elasticsearch, 注意这里需要指定安装版本<ul>\n<li><code>sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch=2.3.2</code></li>\n</ul>\n</li>\n<li>Configure Elasticsearch to automatically start during bootup<ul>\n<li><code>sudo update-rc.d elasticsearch defaults 95 10</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h2><p>By default, Elasticsearch uses port 9200 to provide access to its REST API. 你可以通过下面命令验证是否启动成功：</p>\n<ul>\n<li><code>curl &#39;localhost:9200/_cat/health?v&#39;</code></li>\n<li><code>curl &#39;localhost:9200/_cat/nodes?v&#39;</code></li>\n<li>验证后记得重启，<code>sudo shutdown -r 0</code></li>\n</ul>\n<h1 id=\"默认目录\"><a href=\"#默认目录\" class=\"headerlink\" title=\"默认目录\"></a>默认目录</h1><p>不同安装方式，默认的目录位置不一样，参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-dir-layout.html\" target=\"_blank\" rel=\"external\">ElasticSearch Reference 2.3 - Directory Layout</a></p>\n<p>通过<code>tar.gz</code>方式安装的默认目录如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">Location Debian/Ubuntu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">Home of elasticsearch installation.</td>\n<td style=\"text-align:left\"><code>{extract.path}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">Binary scripts including elasticsearch to start a node.</td>\n<td style=\"text-align:left\"><code>{extract.path}/bin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Configuration files elasticsearch.yml and logging.yml.</td>\n<td style=\"text-align:left\"><code>{extract.path}/config</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">The location of the data files of each index / shard allocated on the node.</td>\n<td style=\"text-align:left\"><code>{extract.path}/data</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">Log files location</td>\n<td style=\"text-align:left\"><code>{extract.path}/logs</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">plugins</td>\n<td style=\"text-align:left\">Plugin files location. Each plugin will be contained in a subdirectory.</td>\n<td style=\"text-align:left\"><code>{extract.path}/plugins</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">repo</td>\n<td style=\"text-align:left\">Shared file system repository locations.</td>\n<td style=\"text-align:left\">Not configured</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">script</td>\n<td style=\"text-align:left\">Location of script files.</td>\n<td style=\"text-align:left\"><code>{extract.path}/config/scripts</code></td>\n</tr>\n</tbody>\n</table>\n<p>通过<code>apt</code>方式安装的默认目录如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">Location Debian/Ubuntu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">Home of elasticsearch installation.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">Binary scripts including elasticsearch to start a node.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch/bin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Configuration files elasticsearch.yml and logging.yml.</td>\n<td style=\"text-align:left\"><code>/etc/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">Environment variables including heap size, file descriptors. <strong>There isn’t this folder when install using <code>tar.gz</code></strong></td>\n<td style=\"text-align:left\"><code>/etc/default/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">The location of the data files of each index / shard allocated on the node.</td>\n<td style=\"text-align:left\"><code>/var/lib/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">Log files location</td>\n<td style=\"text-align:left\"><code>/var/log/elasticsearch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">plugins</td>\n<td style=\"text-align:left\">Plugin files location. Each plugin will be contained in a subdirectory.</td>\n<td style=\"text-align:left\"><code>/usr/share/elasticsearch/plugins</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">repo</td>\n<td style=\"text-align:left\">Shared file system repository locations.</td>\n<td style=\"text-align:left\">Not configured</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">script</td>\n<td style=\"text-align:left\">Location of script files.</td>\n<td style=\"text-align:left\"><code>/etc/elasticsearch/scripts</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"安装Elasticsearch插件\"><a href=\"#安装Elasticsearch插件\" class=\"headerlink\" title=\"安装Elasticsearch插件\"></a>安装Elasticsearch插件</h1><p>Plugins are a way to enhance the core Elasticsearch functionality in a custom manner. They range from adding custom mapping types, custom analyzers, native scripts, custom discovery and more.</p>\n<p>There are three types of plugins:</p>\n<ul>\n<li><code>Java Plugins</code>: These plugins contain only JAR files, and must be installed on every node in the cluster. <strong>After installation, each node must be restarted before the plugin becomes visible.</strong></li>\n<li><code>Site Plugins</code>: These plugins contain static web content like Javascript, HTML, and CSS files, that can be served directly from Elasticsearch. Site plugins may only need to be installed on one node, and do not require a restart to become visible.<ul>\n<li>The content of site plugins is accessible via a URL like: <code>http://yournode:9200/_plugin/[plugin name]</code></li>\n</ul>\n</li>\n<li><code>Mixed Plugins</code>: Mixed plugins contain both JAR files and web content.</li>\n</ul>\n<h2 id=\"安装Site-Plugins\"><a href=\"#安装Site-Plugins\" class=\"headerlink\" title=\"安装Site Plugins\"></a>安装<code>Site Plugins</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo su -</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看已安装插件</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-head，访问http://localhost:9200/_plugin/head</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install mobz/elasticsearch-head</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-kopf，访问http://localhost:9200/_plugin/kopf</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elastichq，访问http://localhost:9200/_plugin/hq</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install royrusso/elasticsearch-HQ</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装elasticsearch-inquisitor，访问http://localhost:9200/_plugin/elasticsearch-inquisitor</span></div><div class=\"line\">$ /usr/share/elasticsearch/bin/plugin install polyfractal/elasticsearch-inquisitor</div></pre></td></tr></table></figure>\n<h2 id=\"安装Jar-Plugins\"><a href=\"#安装Jar-Plugins\" class=\"headerlink\" title=\"安装Jar Plugins\"></a>安装<code>Jar Plugins</code></h2><h3 id=\"安装elasticsearch-analysis-ik\"><a href=\"#安装elasticsearch-analysis-ik\" class=\"headerlink\" title=\"安装elasticsearch-analysis-ik\"></a>安装<code>elasticsearch-analysis-ik</code></h3><p>安装前请注意和Elasticsearch的适配版本，安装<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-ik</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>请先<a href=\"http://maven.apache.org/install.html\" target=\"_blank\" rel=\"external\">安装apache maven</a></li>\n<li>下载<code>Apache Maven</code>的源代码<ul>\n<li><code>git clone https://github.com/medcl/elasticsearch-analysis-ik.git</code></li>\n</ul>\n</li>\n<li>编译打包<ul>\n<li><code>cd [elasticsearch-analysis-ik所在目录]</code></li>\n<li><code>git checkout v1.9.2</code></li>\n<li><code>mvn package</code></li>\n</ul>\n</li>\n<li>解压编译生成的打包文件<code>target/releases/elasticsearch-analysis-ik-{version}.zip</code>，并拷贝解压后的文件到Elasticsearch的plugins目录<ul>\n<li><code>unzip elasticsearch-analysis-ik-{version}.zip -d elasticsearch-analysis-ik-{version}</code></li>\n<li><code>scp -r elasticsearch-analysis-ik-{version} ubuntu@xxx.xxx.xxx.xxx:/var/tmp/</code></li>\n<li><code>cp -R /var/tmp/elasticsearch-analysis-ik-{version} /usr/share/elasticsearch/plugins</code></li>\n<li><code>chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-{version}</code></li>\n</ul>\n</li>\n<li>重启elasticsearch服务<ul>\n<li><code>service elasticsearch restart</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a><ul>\n<li>下载指定版本的打包文件</li>\n<li>后续步骤同上</li>\n</ul>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>v2.2.1版本以后安装<code>elasticsearch-analysis-ik</code>并不需要修改<code>elasticsearch.yml</code>配置文件</li>\n</ul>\n<h3 id=\"安装elasticsearch-analysis-pinyin\"><a href=\"#安装elasticsearch-analysis-pinyin\" class=\"headerlink\" title=\"安装elasticsearch-analysis-pinyin\"></a>安装<code>elasticsearch-analysis-pinyin</code></h3><p>安装前请注意和Elasticsearch的适配版本, 安装<a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-pinyin</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>具体操作参考<code>elasticsearch-analysis-ik</code>的安装步骤</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-pinyin/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a></li>\n</ul>\n<h3 id=\"安装elasticsearch-analysis-stconvert\"><a href=\"#安装elasticsearch-analysis-stconvert\" class=\"headerlink\" title=\"安装elasticsearch-analysis-stconvert\"></a>安装<code>elasticsearch-analysis-stconvert</code></h3><p>安装前请注意和Elasticsearch的适配版本, 安装<a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert\" target=\"_blank\" rel=\"external\">elasticsearch-analysis-stconvert</a>有两种方式：</p>\n<ul>\n<li>通过源代码手动编译安装<ul>\n<li>具体操作参考<code>elasticsearch-analysis-ik</code>的安装步骤</li>\n</ul>\n</li>\n<li>直接<a href=\"https://github.com/medcl/elasticsearch-analysis-stconvert/releases\" target=\"_blank\" rel=\"external\">下载安装程序包</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>建议Oracle JDK和Elasticsearch均使用<code>apt</code>安装方式安装，原因如下：</p>\n<ul>\n<li>安装方便</li>\n<li>默认目录的配置更规范</li>\n<li>和Elasticsearch官方的Docker镜像的目录结构一致，未来切换到Docker方式部署障碍少，参考<a href=\"https://github.com/docker-library/elasticsearch/blob/8267f6c29f06373373b4379473291d3082728cc0/2.3/Dockerfile\" target=\"_blank\" rel=\"external\">Dockerfile</a></li>\n</ul>\n"},{"title":"记一次结对开发Golang组件的过程","date":"2016-04-19T18:09:39.000Z","_content":"\n\n# 目录\n\n<!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 -->\n\n- 前言\n- `dlog`的用途\n- 对`dlog`的一些非功能性需求\n- 碰到问题及解决方案\n    - 何时使用`panic`，何时使用`return error`\n    - 如何实现一个`logger`只能接收对应类型的`data log`\n    - 如何实现批量发送`data log`\n    - 如何实现对`Logger.Log`方法的调用超时机制\n    - 如何在`logger`没有收到新`msg`情况下，保证`buf`中的数据依然会定期发送给AWS Kinesis\n    - 如何向程序外部暴露运行指标\n    - 如何在单元测试中实现`Setup`和`TearDown`\n    - 如何实现`kinesisMock`\n    - 如何模拟AWS Kinesis响应慢或者不可用\n    - 提交到代码库中的测试代码是否可以保留`log.Print`\n- 踩过的一些坑\n- 未来可以优化的地方\n- 参考\n\n<!-- /TOC -->\n\n# 前言\n\n本文记录了前段时间我和[王益](https://segmentfault.com/a/1190000002416822)使用Go语言合作开发一个log组件[dlog](https://github.com/topicai/dlog)的过程中学到的一些知识。在整个合作开发的过程中，王益严谨认真的态度，对开发质量的严格要求，给我留下了极其深刻的印象。能够和王益这样的顶级工程师切磋技艺，对我学习Go语言帮助非常大。也谨以此文表达对王益的感谢。\n\n> 注：本文假设读者已经对Go语法已经有基本了解。\n\n# `dlog`的用途\n\n首先引用项目**readme文档**的第一段文字介绍一下`dlog`的用途：\n\n> dlog is a Go package for distributed structure logging using Amazon AWS Kinesis/Firehose.\n\n更多介绍和设计请阅读[readme文档](https://github.com/topicai/dlog/blob/develop/README.md)\n\n`dlog`主要是用来记录程序的`data log`的这样一个Golang package，那什么是`data log`？这里先简要解释一下。一般程序运行过程中主要产生两类日志：\n\n- `status log`：主要用于帮助调试、定位程序Bug、或者找到性能瓶颈，比如方法调用日志、错误日志、方法执行时间日志等\n- `data log`：主要用于记录用户行为，收集的`data log`用于后期的个性化搜索、智能推荐等，比如搜索行为、点击行为等\n\n\n# 对`dlog`的一些非功能性需求\n\n- 每一种类型的`data log`对应一种`logger`，一个`logger`只能记录对应类型的`data log`\n- `dlog`内部发生的错误，不能影响调用的程序代码的执行\n    - 应考虑到AWS Kinesis服务响应慢或者不可用的场景（暂未实现）\n- 程序代码中通过调用`dlog`的方法记录`data log`，`dlog`的方法不能阻塞调用的程序代码的执行（这一点`dlog`暂时未满足要求，需要后期改进）\n- AWS Kinesis提供两个API接收数据，一个是[PutRecord](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html), 另一个是[PutRecords](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html)，为了减少对Kinesis的调用次数，采用后者批量发送`data log`\n    - `PutRecords`对一次调用的`record`数量限制是`500`，每个`record`大小必须小于等于1MB，整个`request`的大小必须小于等于5MB\n    - 每一个Kinesis Stream能够承受的最大TPS和写数据量，与这个stream拥有的shard的数量有关。一个shard支持最大TPS是`1000 records per second`， 写数据量是`1MB per second`\n- 通过单元测试保证功能正确性\n\n\n# 碰到问题及解决方案\n\n## 何时使用`panic`，何时使用`return error`\n\n先看看`panic`和`return error`的执行机制。\n\n### `panic`的执行机制\n\n`panic`会中断当前`goroutine`的执行，如果不对`panic`的错误进行`recover`，那么整个进程都会崩溃。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n)\n\nfunc main() {\n    go func() {\n        log.Panic(\"some error before work2\")\n        fmt.Println(\"do some work2\")\n    }()\n\n    time.Sleep(time.Second)\n    fmt.Println(\"do some work1\")\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/off1y9tBax)_\n\n可以通过`recover`捕捉当前`goroutine`中`panic`的错误并进行错误处理，整个进程的正常运行不受影响。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n)\n\nfunc main() {\n    go func() {\n        defer func() {\n            if err := recover(); err != nil {\n                log.Printf(\"error: %v\", err)\n            }\n        }()\n        log.Panic(\"some error before work2\")\n        fmt.Println(\"do some work2\")\n    }()\n\n    time.Sleep(time.Second)\n    fmt.Println(\"do some work1\")\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/RLWyb813Uw)_\n\n我们可以发现Go语言中的`panic`、`recover`机制，和Java、.NET中的`throw`、`try...catch`机制非常类似。\n\n### `return error`的执行机制\n\n`return error`是利用Go语言函数的多值返回的特性，通过函数的其中一个返回值（一般是第一个或者最后一个），向`caller`返回函数执行过程中产生的异常，其它值返回执行结果。\n\n这种方式的问题，主要在于：如果函数调用层次比较多，每一层函数都通过`return error`方式返回错误，都需要处理被调用函数的`return error`，增加代码复杂度。对于无法恢复的错误也没有必要一层一层往上抛，直接`panic/recover`更加简洁。\n\n```go\npackage main\n\nimport (\n    \"errors\"\n    \"log\"\n)\n\ntype R struct {\n}\n\nfunc f1() (error, *R) {\n    return errors.New(\"an error\"), nil\n}\n\nfunc f2() (error, *R) {\n    err, r := f1()\n    if err != nil {\n        return err, nil\n    }\n\n    return nil, r\n}\n\nfunc f3() (error, *R) {\n    err, r := f2()\n    if err != nil {\n        return err, nil\n    }\n\n    return nil, r\n}\n\nfunc main() {\n    err, _ := f3()\n    if err != nil {\n        log.Print(err)\n    }\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/GhE5JpzZvn)_\n\n### `dlog`错误处理原则\n\n使用`panic`还是`return error`的方式处理错误，要区分不同的场景。重要是不论使用`panic`还是`return error`，都需要符合架构上更高层面错误处理需求。\n\n`dlog`是一个日志记录`package`，暴露给其它程序调用的方法如下：\n\n- `func NewLogger(example interface{}, opts *Options) (*Logger, error)`\n- `func (l *Logger) Log(msg interface{}) error`\n\n这两个方法的使用场景并不一样，错误处理原则也不完全一致：\n\n- `NewLogger`方法一般是在程序初始化的时候调用，用于创建记录程序运行过程中产生的data log的记录器。通过`NewLogger`创建一个`logger`的时候，如果传入参数不正确，使用`panic`方式，在上层调用程序不处理错误情况下会导致程序崩溃，所以使用`return error`方式向`caller`报告错误。大多数Golang package也是按此原则处理。\n- 上层程序调用`logger.Log`时，如果`Log`方法内部发生的错误，不能影响调用的代码的执行，所以这里绝对不能用`panic`方式抛出错误。日志记录是辅助功能，如果日志记录行为失败，导致业务逻辑代码执行不下去，估计负责业务逻辑开发的工程师会和你拼命。\n    - `logger.Log`可以使用`return error`方式返回`msg`校验类的错误\n    - `logger.Log`发送日志采用的是异步批量方式向AWS Kinesis发送数据，向AWS Kinesis发送数据相关的错误无法通过`panic`或者`return error`方式直接报告给调用程序。最好的方式是允许调用程序向`logger`注册发送失败处理的`handler`，出现发送失败错误时执行`handler`逻辑。（暂未实现）\n\n## 如何实现一个`logger`只能接收对应类型的`data log`\n\n要实现一个`logger`只能接收对应类型的`data log`，主要思路如下：\n\n- `Logger`的定义中通过属性`msgType reflect.Type`记住能够接受的消息类型\n- 通过`NewLogger`方法创建`logger`的时候，指定`logger`可以接受的消息类型\n- `Log`方法中首先校验`msg`的类型是否是创建`logger`时指定的类型\n\n以下是相关代码：\n\n```go\n// msgType保存Logger能够接受的消息类型\ntype Logger struct {\n    ...\n    msgType    reflect.Type\n    ...\n}\n\n// 获得msg的reflect.Type\nfunc msgType(msg interface{}) (reflect.Type, error) {\n    t := reflect.TypeOf(msg)\n\n    if t.Kind() == reflect.Ptr {\n        t = t.Elem()\n    }\n\n    if t.Kind() != reflect.Struct {\n        return nil, fmt.Errorf(\"dlog message must be either *struct or struct\")\n    }\n\n    return t, nil\n}\n\nfunc NewLogger(example interface{}, opts *Options) (*Logger, error) {\n    t, e := msgType(example)\n    if e != nil {\n        return nil, e\n    }\n\n    ...\n\n    l := &Logger{\n        ...\n        msgType:    t,\n        ...\n    }\n\n    ...\n    return l, nil\n}\n\nfunc (l *Logger) Log(msg interface{}) error {\n    if t, e := msgType(msg); e != nil {\n        return e\n    } else if !t.AssignableTo(l.msgType) {\n        return fmt.Errorf(\"parameter (%+v) not assignable to %v\", msg, l.msgType)\n    }\n\n    ...\n}\n```\n\n`Log`方法中为什么要用`AssignableTo`，而不是直接判断两个类型相等。其实都可以，在`msg`是`struct`情况下，`AssignableTo`返回`True`意味着两个类型相等。参考下面的例子：\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"reflect\"\n)\n\nfunc main() {\n    type Fn func(int) int\n    id := func(x int) int {\n        return x\n    }\n    var zeroFn Fn\n    log.Println(reflect.TypeOf(id).AssignableTo(reflect.TypeOf(zeroFn)))\n\n    type MyInt int\n    mi := 1\n    log.Println(reflect.TypeOf(2).AssignableTo(reflect.TypeOf(mi)))\n\n    type S1 struct {\n        name string\n    }\n    type S2 S1\n\n    s1 := S1{\n        name: \"ethan\",\n    }\n    s2 := S2{\n        name: \"ethan\",\n    }\n    // s2 = s1\t// if uncomment this line, will report \"cannot use s1 (type S1) as type S2 in assignment\" when compile\n    log.Println(reflect.TypeOf(s1).AssignableTo(reflect.TypeOf(s2)))\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/eDmzxW-ayk)_\n\n## 如何实现批量发送`data log`\n\n要实现批量发送，首先我们可以想到应该要有个`buffer`用来收集一定数量的的`message`，等待`buffer`中的数据积累到一定程度后，一次性发送给AWS Kinesis。设计`buffer`结构不难，难点在于如何解决多线程(goroutine)并发读写`buffer`的问题，主要的解决方案有两种：\n\n- 基于锁机制实现对`buffer`访问控制\n- 基于`channel`实现对`buffer`的访问控制\n\n前者对于有Java、.NET等语言的并发编程经验的工程师来说，非常熟悉。而后者则体现了CSP(Communicating Sequential Processes)并发编程模型的优势。\n\n{% asset_img channel.png CSP Model %}\n\n`dlog`的`Log`方法把收到的`msg`写到名字叫`buffer`的`channel`中，另外一个单独的`goroutine`在`channel`的另一头收集编码后的日志信息，然后保存到`buf := make([][]byte, 0)`中。当`buf`中的数据量要达到一次向AWS Kinesis发送的最大量时，调用`flush`方法向AWS Kinesis发送数据。由于只有一个`goroutine`对`buf`进行访问，所以不需要通过锁机制控制对`buf`的读写。\n\n<!--\ndigraph G {\n    fontname=\"Microsoft YaHei\";\n    fontsize=10;\n    rankdir = LR;\n\n    \"buffer channel\" [shape=box];\n\n    \"Logger.Log goroutine 1\" -> \"buffer channel\";\n    \"Logger.Log goroutine 2\" -> \"buffer channel\";\n    \"Logger.Log goroutine 3\" -> \"buffer channel\";\n    \"buffer channel\" -> \"sync goroutine\";\n    \"sync goroutine\" -> \"AWS Kinesis Stream\";\n}\n-->\n\n<!-- ![Thread Model](http://g.gravizo.com/g?digraph%20G%20%7B%0A%20%20%20%20fontname%3D%22Microsoft%20YaHei%22%3B%0A%20%20%20%20fontsize%3D10%3B%0A%20%20%20%20rankdir%20%3D%20LR%3B%0A%0A%20%20%20%20%22buffer%20channel%22%20%5Bshape%3Dbox%5D%3B%0A%0A%20%20%20%20%22Logger.Log%20goroutine%201%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%202%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%203%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22buffer%20channel%22%20-%3E%20%22sync%20goroutine%22%3B%0A%20%20%20%20%22sync%20goroutine%22%20-%3E%20%22AWS%20Kinesis%20Stream%22%3B%0A%20%7D) -->\n\n{% asset_img use_channel.png 使用Channel %}\n\n具体代码实现：\n\n```go\nfunc NewLogger(example interface{}, opts *Options) (*Logger, error) {\n    ...\n\n    go l.sync()    // 启动sync goroutine\n    return l, nil\n}\n\nfunc (l *Logger) Log(msg interface{}) error {\n    ...\n\n    en := encode(msg)       // 对msg进行编码\n    ...\n        select {\n        case l.buffer <- en:    // 向buffer channel写入编码后的msg\n        ...\n        }\n    ...\n    return nil\n}\n\nfunc (l *Logger) sync() {\n    ...\n\n    buf := make([][]byte, 0) // 用于收集从buffer channel读取的日志数据\n    bufSize := 0\n\n    for {\n        select {\n        case msg := <-l.buffer:\n            if bufSize+len(msg)+partitionKeySize >= maxBatchSize {  // 如果buf的大小接近一次批量发送的最大数据量\n                l.flush(&buf, &bufSize)                             // 向AWS Kinesis批量发送数据\n            }\n\n            buf = append(buf, msg)                                  // 将从buffer channel读取日志数据保存到buf中\n            bufSize += len(msg) + partitionKeySize\n\n        ...\n    }\n}\n```\n\n## 如何实现对`Logger.Log`方法的调用超时机制\n\n如果一个IO操作耗时较长，并且调用比较频繁的情况下，不仅会阻塞`caller`的执行，还会消耗大量系统资源。我们通常会使用超时机制，避免程序长时间等待或者对系统资源大量占用。\n\n`Logger.Log`方法利用Go语言`channel`非常简洁的实现了超时机制：\n\n```go\nfunc (l *Logger) Log(msg interface{}) error {\n    ...\n\n    var timeout <-chan time.Time\n    if l.WriteTimeout > 0 {\n        timeout = time.After(l.WriteTimeout)    // 初始化时长为l.WriteTimeout的计时器\n    }\n\n    ...\n        select {\n        case l.buffer <- en:\n        case <-timeout: // 如果上一行代码一直阻塞，timeout计时器时间到点后会触发执行当前case下的代码\n            return fmt.Errorf(\"dlog writes %+v timeout after %v\", msg, l.WriteTimeout)\n        }\n    ...\n    return nil\n}\n```\n\n对比Java、.NET语言中超时机制的实现方法，Go语言的实现简洁的令人发指：\n\n- C#\n    - [Implementing .Net method timeout](http://weblogs.asp.net/israelio/159985)\n    - [How to implement Task Async for a timer in C#?](http://stackoverflow.com/questions/18646650/how-to-implement-task-async-for-a-timer-in-c)\n    - [Implementing a timeout in c#](http://stackoverflow.com/questions/10143980/implementing-a-timeout-in-c-sharp)\n- Java\n    - [How to implement timeout using threads](http://www.coderanch.com/t/232213/threads/java/implement-timeout-threads)\n    - [How to timeout a thread](http://stackoverflow.com/questions/2275443/how-to-timeout-a-thread)\n\n## 如何在`logger`没有收到新`msg`情况下，保证`buf`中的数据依然会定期发送给AWS Kinesis\n\n`dlog`在`Logger.sync()`方法中通过一个定时器，定期将`buf`中数据发送给AWS Kinesis。\n\n```go\nfunc (l *Logger) sync() {\n    if l.SyncPeriod <= 0 {\n        l.SyncPeriod = time.Second\n    }\n    ticker := time.NewTicker(l.SyncPeriod)  // l.SyncPeriod是定期发送的数据的时间间隔，ticker定时触发器\n\n    buf := make([][]byte, 0)\n    bufSize := 0\n\n    for {  // 无限循环保证sync goroutine一直工作\n        select {\n        case msg := <-l.buffer:\n            ...\n\n        case <-ticker.C: // ticker.C的类型是<-chan Time，每隔l.SyncPeriod时间会触发执行当前case的代码\n            if bufSize > 0 {\n                l.flush(&buf, &bufSize)\n            }\n        }\n    }\n}\n```\n\n通过`ticker`，`dlog`保证了即使没有收到新的`msg`的时候，保存在`buf`中的数据最长`l.SyncPeriod`时间后也会发送给AWS Kinesis。\n\n互联网产品的生产环境的上线，通常的做法是，将现有服务分组，然后交替切流量、升级。如果没有类似的机制，那么在服务程序断掉流量，没有收到新的访问时候，保存在内存中的数据就不会发送出去，升级时就可能导致数据丢失。\n\n## 如何向程序外部暴露运行指标\n\nGo语言的官方Package `expvar`提供一种标准化的接口，允许程序暴露公开访问的变量。`expvar`通过HTTP地址`/debug/vars`提供访问入口，并以JSON格式展示这些变量。下面是关于`expvar`常见用法的一个例子：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"expvar\"\n    \"fmt\"\n    \"net/http\"\n    \"sync\"\n    \"time\"\n)\n\n// Stats is used to collect runtime metrics\ntype Stats struct {\n    sync.Mutex\n    TotalHit  int\n    ErrorNums int\n}\n\nfunc (s *Stats) IncreaseTotalHit(i int) {\n    s.Lock()\n    defer s.Unlock()\n\n    s.TotalHit += i\n}\n\nfunc (s *Stats) IncreaseErrorNums(i int) {\n    s.Lock()\n    defer s.Unlock()\n\n    s.ErrorNums += i\n}\n\nfunc (s *Stats) String() string {\n    s.Lock()\n    defer s.Unlock()\n\n    b, err := json.Marshal(*s)\n    if err != nil {\n        return \"{}\"\n    } else {\n        return string(b)\n    }\n}\n\nvar (\n    stats *Stats\n    hits  *expvar.Map\n)\n\nfunc init() {\n\n    expvar.Publish(\"now\", expvar.Func(func() interface{} {\n        return time.Now().Format(\"\\\"2006-01-02 15:04:05\\\"\")\n    }))\n\n    stats = &Stats{}\n    expvar.Publish(\"stats\", stats)\n\n    hits = expvar.NewMap(\"hits\").Init()\n}\n\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\n    p := r.URL.Path[1:]\n    hits.Add(p, 1)\n    stats.IncreaseTotalHit(1)\n    fmt.Fprintf(w, \"Hey! I love %s! hits: %v\\n\", p, hits.Get(p))\n}\n\nfunc errHandler(w http.ResponseWriter, r *http.Request) {\n    stats.IncreaseErrorNums(1)\n    fmt.Fprintf(w, \"Error Nums: %v\\n\", stats.ErrorNums)\n}\n\nfunc main() {\n    http.HandleFunc(\"/err\", errHandler)\n    http.HandleFunc(\"/\", homeHandler)\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n按照如下步骤测试运行效果：\n\n- `go run expvarexample.go`运行例子代码\n- 在浏览器中访问`http://localhost:8080/ethan`\n- 在浏览器中访问`http://localhost:8080/err`\n- 在浏览器中访问`http://localhost:8080/debug/vars`，得到如下结果：\n```json\n{\n    \"cmdline\": [\"/var/folders/jf/65ft181j33j_d75ktgv67bsc0000gn/T/go-build467453980/command-line-arguments/_obj/exe/expvarsample\"],\n    \"hits\": {\n        \"ethan\": 1,\n        \"favicon.ico\": 2\n    },\n    \"memstats\": { ... },\n    \"now\": \"\\\"2016-04-19 20:17:40\\\"\",\n    \"stats\": {\n        \"TotalHit\":3,\n        \"ErrorNums\":1\n    }\n}\n```\n\n[expvarmon](https://github.com/divan/expvarmon)是一个帮助查看`expvar`暴露运行指标的工具，用法如下：\n\n- 安装：`go get github.com/divan/expvarmon`\n- 运行：`expvarmon -ports=\"8080\" -vars=\"hits.ethan,stats.TotalHit,stats.ErrorNums,now\"`\n- 效果如下：\n{% asset_img expvarmon_screen.png expvarmon screen %}\n\n`dlog`使用`expvar`向程序外部（比如监控程序）暴露运行指标，目前`dlog`中定义的运行指标包括：\n\n- `writtenRecords`: 成功写到AWS Kinesis的`msg`数量\n- `writtenBatches`: 成功调用AWS Kinesis批量写数据API的次数\n- `failedRecords`: 写到AWS Kinesis失败的`msg`数量\n- `tooBigMesssages`: 编码后体积过大(加上partitionKeySize大于1MB)的`msg`数量\n\n未来还需要根据运维的需求对运行指标进行调整，当前的用法也有一些问题，后期需要重构。\n\n## 如何在单元测试中实现`Setup`和`TearDown`\n\nGo语言提供一种**轻量级**的单元测试框架（无需第三方工具或者程序包）。通过使用`go test`命令和`testing` package，可以非常快速的实现单元测试。先借用官方文档中的[例子](http://docs.studygolang.com/doc/code.html#Testing)回顾一下Go单元测试框架的用法：\n\n```go\n//$GOPATH/src/github.com/user/stringutil/reverse_test.go\npackage stringutil\n\nimport \"testing\"\n\nfunc TestReverse(t *testing.T) {\n    cases := []struct {\n        in, want string\n    }{\n        {\"Hello, world\", \"dlrow ,olleH\"},\n        {\"Hello, 世界\", \"界世 ,olleH\"},\n        {\"\", \"\"},\n    }\n    for _, c := range cases {\n        got := Reverse(c.in)\n        if got != c.want {\n            t.Errorf(\"Reverse(%q) == %q, want %q\", c.in, got, c.want)\n        }\n    }\n}\n```\n\n运行测试只需要简单的输入命令：\n\n```go\n$ go test github.com/user/stringutil\nok  \tgithub.com/user/stringutil 0.165s\n```\n\n很多情况下，要执行单元测试，我们需要依赖一些外部资源，比如已完成初始化数据的数据库、公有云上的一些IaaS服务等。这些依赖资源，我们希望在单元测试执行前，能够自动的被初始化；单元测试完成后，能够自动的被清理。[testify/suite](https://github.com/stretchr/testify/suite) package就提供这样的支持。通过[testify/suite](https://github.com/stretchr/testify/suite)，你可以构建一个测试集`struct`，建立测试集的`setup`(初始化)/`teardown`(清理)方法，和最终实现测试用例逻辑的方法。而运行测试，仍然只需要一句简单的`go test`。\n\n以下是使用[testify/suite](https://github.com/stretchr/testify/suite)实现测试集的常见模式：\n\n```go\npackage suite\n\nimport (\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n)\n\ntype SuiteTester struct {\n    // Include our basic suite logic.\n    Suite\n\n    // Other properties\n    propertyN string\n}\n\n// The SetupSuite method will be run by testify once, at the very\n// start of the testing suite, before any tests are run.\nfunc (suite *SuiteTester) SetupSuite() {\n    // ...\n}\n\n// The TearDownSuite method will be run by testify once, at the very\n// end of the testing suite, after all tests have been run.\nfunc (suite *SuiteTester) TearDownSuite() {\n    // ...\n}\n\n// The SetupTest method will be run before every test in the suite.\nfunc (suite *SuiteTester) SetupTest() {\n    // ...\n}\n\n// The TearDownTest method will be run after every test in the suite.\nfunc (suite *SuiteTester) TearDownTest() {\n    // ...\n}\n\n// a test method\nfunc (suite *SuiteTester) TestOne() {\n    // ...\n}\n\n// another test method\nfunc (suite *SuiteTester) TestTwo() {\n    // ...\n}\n\n// TestRunSuite will be run by the 'go test' command, so within it, we\n// can run our suite using the Run(*testing.T, TestingSuite) function.\nfunc TestRunSuite(t *testing.T) {\n    suiteTester := new(SuiteTester)\n    Run(t, suiteTester)\n}\n```\n\n`dlog`中为了测试`Logger.Log`方法能否正常工作，按照上面的模式编写了相应的测试代码：\n\n```go\npackage dlog\n\n//...\n\ntype WriteLogSuiteTester struct {\n    suite.Suite\n\n    options     *Options\n    seachLogger *Logger\n    clickLogger *Logger\n    streamNames []string // save the created AWS Kinesis Streams, which will be removed in TearDownSuite()\n}\n\n// The SetupSuite method will be run by testify once, at the very\n// start of the testing suite, before any tests are run.\nfunc (s *WriteLogSuiteTester) SetupSuite() {\n\n    //...\n\n    // create stream 1\n    err = s.seachLogger.kinesis.CreateStream(s.seachLogger.streamName, testingShardCount)\n    s.Nil(err)\n\n    // create stream 2\n    err = s.clickLogger.kinesis.CreateStream(s.clickLogger.streamName, testingShardCount)\n    s.Nil(err)\n\n    s.streamNames = []string{s.seachLogger.streamName, s.clickLogger.streamName}\n\n    for { // waiting created stream's status to be active\n        time.Sleep(1 * time.Second)\n        resp1, err1 := s.seachLogger.kinesis.DescribeStream(s.seachLogger.streamName)\n        s.Nil(err1)\n\n        resp2, err2 := s.seachLogger.kinesis.DescribeStream(s.clickLogger.streamName)\n        s.Nil(err2)\n\n        status1 := strings.ToLower(string(resp1.StreamStatus))\n        status2 := strings.ToLower(string(resp2.StreamStatus))\n        if status1 == \"active\" && status2 == \"active\" {\n            break\n        }\n    }\n}\n\n// The TearDownSuite method will be run by testify once, at the very\n// end of the testing suite, after all tests have been run.\nfunc (s *WriteLogSuiteTester) TearDownSuite() {\n    if s.streamNames == nil || len(s.streamNames) == 0 {\n        return\n    }\n\n    for _, streamName := range s.streamNames {\n        err := s.seachLogger.kinesis.DeleteStream(streamName)\n        s.Nil(err)\n    }\n}\n\nfunc (s *WriteLogSuiteTester) TestWriteLog() {\n    defer func() { // Recover if panicking to make sure TearDownSuite will be executed\n        if r := recover(); r != nil {\n            s.Fail(fmt.Sprint(r))\n        }\n    }()\n\n    //...\n}\n\nfunc TestRunWriteLogSuite(t *testing.T) {\n    suiteTester := new(WriteLogSuiteTester)\n    suite.Run(t, suiteTester)\n}\n```\n\n注：\n\n- 很多场景下，测试程序自动创建依赖的资源需要运维部门的授权，所以实现前有必要先和运维部门沟通。\n- 云环境下，出于安全上的考虑，需要对创建、删除测试资源的账户管理严格管理\n    - 账户信息不能写在可以公开访问的测试代码、配置文件中\n    - 只给账户分配必要资源的最小权限\n    - 为账户能够创建的资源设定配额\n\n## 如何实现`kinesisMock`\n\n上一节我们提到在测试执行前初始化依赖资源，现实场景中，并不是任何情况下都能够获得依赖的测试资源，或者测试资源也会出现不可用的情况。通过Mock技术，可以减少测试代码对其它资源（或模块）的依赖。\n\n`dlog`的测试代码中，首先定义了一个`KinesisInterface`:\n\n```go\ntype KinesisInterface interface {\n    PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error)\n    CreateStream(name string, shardCount int) error\n    DescribeStream(name string) (resp *kinesis.StreamDescription, err error)\n    DeleteStream(name string) error\n}\n```\n\n`KinesisInterface`包含了`dlog`用到的[github.com/AdRoll/goamz/kinesis/kinesis](https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go)的所有方法。因为Go语言`interface`实现**非侵入式**的特点，[github.com/AdRoll/goamz/kinesis/kinesis](https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go)自动实现了`KinesisInterface`，我们再定义一个`kinesisMock`实现`KinesisInterface`：\n\n```go\ntype kinesisMock struct {\n    // Mapping from steam name to batches of batches\n    storage map[string][][]kinesis.PutRecordsRequestEntry\n\n    // simulate lantency that sync to Kinesis\n    putRecordLatency time.Duration\n\n    // created streams' names\n    streamNames []string\n\n    // lock to solve concurrent call\n    lock sync.RWMutex\n}\n\nfunc newKinesisMock(putRecordsLatency time.Duration) *kinesisMock {\n    return &kinesisMock{\n        storage:          make(map[string][][]kinesis.PutRecordsRequestEntry),\n        putRecordLatency: putRecordsLatency,\n        streamNames:      make([]string, 0),\n    }\n}\n\nfunc (mock *kinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    // ...\n}\n\nfunc (mock *kinesisMock) CreateStream(name string, shardCount int) error {\n    // ...\n}\n\nfunc (mock *kinesisMock) DescribeStream(name string) (resp *kinesis.StreamDescription, err error) {\n    // ...\n}\n\nfunc (mock *kinesisMock) DeleteStream(name string) error {\n    // ...\n}\n```\n\n然后，把业务代码中所有类型`kinesis`的变量，替换成`KinesisInterface`类型。\n\n```go\ntype Logger struct {\n    //...\n    kinesis    KinesisInterface\n    //...\n}\n```\n\n测试代码中，在构造`Logger`时传入`kinesisMock`，而不是真实的`kinesis`，这样就做到了“狸猫换太子”。\n\n```go\nfunc TestLoggingToMockKinesis(t *testing.T) {\n    assert := assert.New(t)\n\n    l, e := NewLogger(&impression{}, &Options{\n        // ...\n        UseMockKinesis: true,\n        MockKinesis:    newKinesisMock(0),\n    })\n\n    // ...\n}\n```\n\n## 如何模拟AWS Kinesis响应慢或者不可用\n\n`kinesisMock`完全是我们“虚构”出来的一个`kinesis`，在它的基础上，我们完全可以模拟响应慢或者不可用的情况。\n\n上一节中，不知道大家注意到没有，`kinesisMock`有个属性叫`putRecordLatency`，用来模拟调用`PutRecords`方法的延迟时间。\n\n```go\ntype kinesisMock struct {\n    // ...\n\n    // simulate lantency that sync to Kinesis\n    putRecordLatency time.Duration\n\n    // ...\n}\n\nfunc (mock *kinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    //...\n\n    time.Sleep(mock.putRecordLatency) // 模拟延迟\n\n    //...\n}\n```\n\n模拟不可用的`kinesis`则重新定义了一个`brokenKinesisMock`：\n\n```go\ntype brokenKinesisMock struct {\n    *kinesisMock\n}\n\nfunc newBrokenKinesisMock() *brokenKinesisMock {\n    return &brokenKinesisMock{\n        kinesisMock: newKinesisMock(0),\n    }\n}\n\nfunc (mock *brokenKinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    return nil, fmt.Errorf(\"Kinesis is broken\")\n}\n```\n\n`kinesisMock`是`brokenKinesisMock`的嵌入`struct`，`brokenKinesisMock`会自动拥有`kinesisMock`的所有公开方法，这样也就实现了`KinesisInterface`。\n\n## 提交到代码库中的测试代码是否可以保留`log.Print`\n\n结论是“不可以”，原因总结如下：\n\n- 测试代码中的`log.Print`，一般用于调试代码，或者在`stdout`打印出一些信息帮助判断测试失败原因。不论哪种目的，这样的代码目的都仅仅是为了辅助开发，而不应该出现在最终交付的产品代码中。\n- `go test`命令会在控制台输出失败的测试方法，如果加上`-v`标志会打印出所有测试方法的执行结果，`log.Print`会影响执行结果的展示效果。团队合作开发，如果每个人都在测试代码中加上自己的`log.Print`，那么控制台打印出来的测试结果就没法看了。\n\n\n# 踩过的一些坑\n\n- [AWS Kinesis API - CreateStream](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_CreateStream.html)是异步创建Stream，而且耗时10+秒，才能完成一个Stream的创建。开始以为是同步创建，结果执行测试逻辑的时候总是出错。\n- [github.com/AdRoll/goamz/aws/regions.go](https://github.com/AdRoll/goamz/blob/master/aws/regions.go)中缺少中国区AWS Kinesis的URL地址，调用中国区AWS Kinesis会出错。\n- Travis CI会Kill掉执行时间超过1分钟的CI过程，而不是如它文档中介绍的“10分钟”\n\n\n# 未来可以优化的地方\n\n- 发送失败的错误事件机制\n- 实现Kinesis服务不可用或者响应慢的场景下`dlog`的容错处理\n\n\n# 参考\n\n- [Effective Go](http://docs.studygolang.com/doc/effective_go.html)\n- [Amazon Kinesis Documentation](https://aws.amazon.com/cn/documentation/kinesis/)\n- [Advanced Go Concurrency Patterns](http://blog.golang.org/advanced-go-concurrency-patterns)\n- [hystrix-go](https://github.com/afex/hystrix-go)\n\n\n# 招聘消息\n\n我所在的[奥阁门科技有限公司](http://www.augmn.com)正在招聘后端、运维工程师，想加入的朋友、或者有朋友可以推荐的都可以联系我(ethancai@qq.com)。\n\n{% asset_img 2016-04-21_07-12-24.png 办公环境1 %}\n\n{% asset_img 2016-04-21_07-12-40.png 办公环境2 %}\n\n**后端工程师 / Backend Engineer**\n\n职责\n\n- 研讨和设计产品功能特性；\n- 设计研发系统后端的一个或多个独立服务（micro-service）模块；\n- 设计研发业务运营管理系统；\n- Code Review。\n\n要求\n\n- 有良好的编程习惯和代码风格；\n- 精通至少一种后台开发语言，包括但不限于Go、Node.js、C++、Python；\n- 对RESTful、RPC等架构有深刻理解和运用经验；\n- 有丰富的web service、web app开发经验；使用过著名的开源应用框架，并完整阅读过源代码；\n- 对Mysql、Redis、MongoDB或同类数据存储技术有丰富的使用经验；\n- 有提交代码到著名开源库或创建过开源项目者优先；\n- 能熟练查阅英文技术文档；\n- 有开放、坦诚的沟通心态，乐于分享；\n- 5年以上工作经验，3年以上后台系统开发经验。\n\n\n**高级系统运维工程师 / Senior Ops Engineer**\n\n职责\n\n- 负责日常业务系统基础实施（AWS）、网络及各子系统的管理维护。\n- 负责设计并部署相关应用平台，并提出平台的实施、运行报告。\n- 负责配合开发搭建测试平台，协助开发设计、推行、实施和持续改进。\n- 负责相关故障、疑难问题排查处理，编制汇总故障、问题，定期提交汇总报告。\n- 负责网络监控和应急反应，以确保网络系统有7*24小时的持续运作能力。\n- 负责日常系统维护，及监控，提供IT方面的服务和支持，保证系统的稳定。\n\n要求\n\n- 深入理解Linux/Unix操作系统并能熟练使用，了解Linux系统内核，有相关操作系统调优经验优先；\n- 熟悉计算机网络基础知识，了解TCP/IP、HTTP等网络协议；\n- 熟悉系统服务的管理和维护，例如：Nginx、DNS服务器、NTP服务等；\n- 熟悉一种或者多种脚本语言，例如：Shell、Python、Perl 、Ruby等；\n- 熟练掌握Linux管理相关命令行工具，例如：grep、awk、sed、tmux、vim等；\n- 对数据库系统（MySQL）运维管理有一定的了解；\n- 熟悉常见分布式系统系统架构部署管理，熟悉基础设施管理、并具有较强的故障排查和解决问题的能力；\n- 具有 2 年以上中大型互联网系统或亚马逊AWS管理经验者优先；\n- 有DevOps经验者优先；\n- 学习能力和沟通能力较强，具有良好的团队协作精神；\n- 工作中需要胆大心细，具备探索创新精神；\n- 具有良好的文档编写能力；\n- 具有一定的英文技术文档阅读能力。\n","source":"_posts/experiences-about-develop-dlog.md","raw":"---\ntitle: 记一次结对开发Golang组件的过程\ntags:\n  - data log\n  - golang\ncategories:\n  - 软件开发\ndate: 2016-04-20 02:09:39\n---\n\n\n# 目录\n\n<!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 -->\n\n- 前言\n- `dlog`的用途\n- 对`dlog`的一些非功能性需求\n- 碰到问题及解决方案\n    - 何时使用`panic`，何时使用`return error`\n    - 如何实现一个`logger`只能接收对应类型的`data log`\n    - 如何实现批量发送`data log`\n    - 如何实现对`Logger.Log`方法的调用超时机制\n    - 如何在`logger`没有收到新`msg`情况下，保证`buf`中的数据依然会定期发送给AWS Kinesis\n    - 如何向程序外部暴露运行指标\n    - 如何在单元测试中实现`Setup`和`TearDown`\n    - 如何实现`kinesisMock`\n    - 如何模拟AWS Kinesis响应慢或者不可用\n    - 提交到代码库中的测试代码是否可以保留`log.Print`\n- 踩过的一些坑\n- 未来可以优化的地方\n- 参考\n\n<!-- /TOC -->\n\n# 前言\n\n本文记录了前段时间我和[王益](https://segmentfault.com/a/1190000002416822)使用Go语言合作开发一个log组件[dlog](https://github.com/topicai/dlog)的过程中学到的一些知识。在整个合作开发的过程中，王益严谨认真的态度，对开发质量的严格要求，给我留下了极其深刻的印象。能够和王益这样的顶级工程师切磋技艺，对我学习Go语言帮助非常大。也谨以此文表达对王益的感谢。\n\n> 注：本文假设读者已经对Go语法已经有基本了解。\n\n# `dlog`的用途\n\n首先引用项目**readme文档**的第一段文字介绍一下`dlog`的用途：\n\n> dlog is a Go package for distributed structure logging using Amazon AWS Kinesis/Firehose.\n\n更多介绍和设计请阅读[readme文档](https://github.com/topicai/dlog/blob/develop/README.md)\n\n`dlog`主要是用来记录程序的`data log`的这样一个Golang package，那什么是`data log`？这里先简要解释一下。一般程序运行过程中主要产生两类日志：\n\n- `status log`：主要用于帮助调试、定位程序Bug、或者找到性能瓶颈，比如方法调用日志、错误日志、方法执行时间日志等\n- `data log`：主要用于记录用户行为，收集的`data log`用于后期的个性化搜索、智能推荐等，比如搜索行为、点击行为等\n\n\n# 对`dlog`的一些非功能性需求\n\n- 每一种类型的`data log`对应一种`logger`，一个`logger`只能记录对应类型的`data log`\n- `dlog`内部发生的错误，不能影响调用的程序代码的执行\n    - 应考虑到AWS Kinesis服务响应慢或者不可用的场景（暂未实现）\n- 程序代码中通过调用`dlog`的方法记录`data log`，`dlog`的方法不能阻塞调用的程序代码的执行（这一点`dlog`暂时未满足要求，需要后期改进）\n- AWS Kinesis提供两个API接收数据，一个是[PutRecord](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html), 另一个是[PutRecords](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html)，为了减少对Kinesis的调用次数，采用后者批量发送`data log`\n    - `PutRecords`对一次调用的`record`数量限制是`500`，每个`record`大小必须小于等于1MB，整个`request`的大小必须小于等于5MB\n    - 每一个Kinesis Stream能够承受的最大TPS和写数据量，与这个stream拥有的shard的数量有关。一个shard支持最大TPS是`1000 records per second`， 写数据量是`1MB per second`\n- 通过单元测试保证功能正确性\n\n\n# 碰到问题及解决方案\n\n## 何时使用`panic`，何时使用`return error`\n\n先看看`panic`和`return error`的执行机制。\n\n### `panic`的执行机制\n\n`panic`会中断当前`goroutine`的执行，如果不对`panic`的错误进行`recover`，那么整个进程都会崩溃。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n)\n\nfunc main() {\n    go func() {\n        log.Panic(\"some error before work2\")\n        fmt.Println(\"do some work2\")\n    }()\n\n    time.Sleep(time.Second)\n    fmt.Println(\"do some work1\")\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/off1y9tBax)_\n\n可以通过`recover`捕捉当前`goroutine`中`panic`的错误并进行错误处理，整个进程的正常运行不受影响。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n)\n\nfunc main() {\n    go func() {\n        defer func() {\n            if err := recover(); err != nil {\n                log.Printf(\"error: %v\", err)\n            }\n        }()\n        log.Panic(\"some error before work2\")\n        fmt.Println(\"do some work2\")\n    }()\n\n    time.Sleep(time.Second)\n    fmt.Println(\"do some work1\")\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/RLWyb813Uw)_\n\n我们可以发现Go语言中的`panic`、`recover`机制，和Java、.NET中的`throw`、`try...catch`机制非常类似。\n\n### `return error`的执行机制\n\n`return error`是利用Go语言函数的多值返回的特性，通过函数的其中一个返回值（一般是第一个或者最后一个），向`caller`返回函数执行过程中产生的异常，其它值返回执行结果。\n\n这种方式的问题，主要在于：如果函数调用层次比较多，每一层函数都通过`return error`方式返回错误，都需要处理被调用函数的`return error`，增加代码复杂度。对于无法恢复的错误也没有必要一层一层往上抛，直接`panic/recover`更加简洁。\n\n```go\npackage main\n\nimport (\n    \"errors\"\n    \"log\"\n)\n\ntype R struct {\n}\n\nfunc f1() (error, *R) {\n    return errors.New(\"an error\"), nil\n}\n\nfunc f2() (error, *R) {\n    err, r := f1()\n    if err != nil {\n        return err, nil\n    }\n\n    return nil, r\n}\n\nfunc f3() (error, *R) {\n    err, r := f2()\n    if err != nil {\n        return err, nil\n    }\n\n    return nil, r\n}\n\nfunc main() {\n    err, _ := f3()\n    if err != nil {\n        log.Print(err)\n    }\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/GhE5JpzZvn)_\n\n### `dlog`错误处理原则\n\n使用`panic`还是`return error`的方式处理错误，要区分不同的场景。重要是不论使用`panic`还是`return error`，都需要符合架构上更高层面错误处理需求。\n\n`dlog`是一个日志记录`package`，暴露给其它程序调用的方法如下：\n\n- `func NewLogger(example interface{}, opts *Options) (*Logger, error)`\n- `func (l *Logger) Log(msg interface{}) error`\n\n这两个方法的使用场景并不一样，错误处理原则也不完全一致：\n\n- `NewLogger`方法一般是在程序初始化的时候调用，用于创建记录程序运行过程中产生的data log的记录器。通过`NewLogger`创建一个`logger`的时候，如果传入参数不正确，使用`panic`方式，在上层调用程序不处理错误情况下会导致程序崩溃，所以使用`return error`方式向`caller`报告错误。大多数Golang package也是按此原则处理。\n- 上层程序调用`logger.Log`时，如果`Log`方法内部发生的错误，不能影响调用的代码的执行，所以这里绝对不能用`panic`方式抛出错误。日志记录是辅助功能，如果日志记录行为失败，导致业务逻辑代码执行不下去，估计负责业务逻辑开发的工程师会和你拼命。\n    - `logger.Log`可以使用`return error`方式返回`msg`校验类的错误\n    - `logger.Log`发送日志采用的是异步批量方式向AWS Kinesis发送数据，向AWS Kinesis发送数据相关的错误无法通过`panic`或者`return error`方式直接报告给调用程序。最好的方式是允许调用程序向`logger`注册发送失败处理的`handler`，出现发送失败错误时执行`handler`逻辑。（暂未实现）\n\n## 如何实现一个`logger`只能接收对应类型的`data log`\n\n要实现一个`logger`只能接收对应类型的`data log`，主要思路如下：\n\n- `Logger`的定义中通过属性`msgType reflect.Type`记住能够接受的消息类型\n- 通过`NewLogger`方法创建`logger`的时候，指定`logger`可以接受的消息类型\n- `Log`方法中首先校验`msg`的类型是否是创建`logger`时指定的类型\n\n以下是相关代码：\n\n```go\n// msgType保存Logger能够接受的消息类型\ntype Logger struct {\n    ...\n    msgType    reflect.Type\n    ...\n}\n\n// 获得msg的reflect.Type\nfunc msgType(msg interface{}) (reflect.Type, error) {\n    t := reflect.TypeOf(msg)\n\n    if t.Kind() == reflect.Ptr {\n        t = t.Elem()\n    }\n\n    if t.Kind() != reflect.Struct {\n        return nil, fmt.Errorf(\"dlog message must be either *struct or struct\")\n    }\n\n    return t, nil\n}\n\nfunc NewLogger(example interface{}, opts *Options) (*Logger, error) {\n    t, e := msgType(example)\n    if e != nil {\n        return nil, e\n    }\n\n    ...\n\n    l := &Logger{\n        ...\n        msgType:    t,\n        ...\n    }\n\n    ...\n    return l, nil\n}\n\nfunc (l *Logger) Log(msg interface{}) error {\n    if t, e := msgType(msg); e != nil {\n        return e\n    } else if !t.AssignableTo(l.msgType) {\n        return fmt.Errorf(\"parameter (%+v) not assignable to %v\", msg, l.msgType)\n    }\n\n    ...\n}\n```\n\n`Log`方法中为什么要用`AssignableTo`，而不是直接判断两个类型相等。其实都可以，在`msg`是`struct`情况下，`AssignableTo`返回`True`意味着两个类型相等。参考下面的例子：\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"reflect\"\n)\n\nfunc main() {\n    type Fn func(int) int\n    id := func(x int) int {\n        return x\n    }\n    var zeroFn Fn\n    log.Println(reflect.TypeOf(id).AssignableTo(reflect.TypeOf(zeroFn)))\n\n    type MyInt int\n    mi := 1\n    log.Println(reflect.TypeOf(2).AssignableTo(reflect.TypeOf(mi)))\n\n    type S1 struct {\n        name string\n    }\n    type S2 S1\n\n    s1 := S1{\n        name: \"ethan\",\n    }\n    s2 := S2{\n        name: \"ethan\",\n    }\n    // s2 = s1\t// if uncomment this line, will report \"cannot use s1 (type S1) as type S2 in assignment\" when compile\n    log.Println(reflect.TypeOf(s1).AssignableTo(reflect.TypeOf(s2)))\n}\n```\n\n_执行上面代码请点击[这里](https://play.golang.org/p/eDmzxW-ayk)_\n\n## 如何实现批量发送`data log`\n\n要实现批量发送，首先我们可以想到应该要有个`buffer`用来收集一定数量的的`message`，等待`buffer`中的数据积累到一定程度后，一次性发送给AWS Kinesis。设计`buffer`结构不难，难点在于如何解决多线程(goroutine)并发读写`buffer`的问题，主要的解决方案有两种：\n\n- 基于锁机制实现对`buffer`访问控制\n- 基于`channel`实现对`buffer`的访问控制\n\n前者对于有Java、.NET等语言的并发编程经验的工程师来说，非常熟悉。而后者则体现了CSP(Communicating Sequential Processes)并发编程模型的优势。\n\n{% asset_img channel.png CSP Model %}\n\n`dlog`的`Log`方法把收到的`msg`写到名字叫`buffer`的`channel`中，另外一个单独的`goroutine`在`channel`的另一头收集编码后的日志信息，然后保存到`buf := make([][]byte, 0)`中。当`buf`中的数据量要达到一次向AWS Kinesis发送的最大量时，调用`flush`方法向AWS Kinesis发送数据。由于只有一个`goroutine`对`buf`进行访问，所以不需要通过锁机制控制对`buf`的读写。\n\n<!--\ndigraph G {\n    fontname=\"Microsoft YaHei\";\n    fontsize=10;\n    rankdir = LR;\n\n    \"buffer channel\" [shape=box];\n\n    \"Logger.Log goroutine 1\" -> \"buffer channel\";\n    \"Logger.Log goroutine 2\" -> \"buffer channel\";\n    \"Logger.Log goroutine 3\" -> \"buffer channel\";\n    \"buffer channel\" -> \"sync goroutine\";\n    \"sync goroutine\" -> \"AWS Kinesis Stream\";\n}\n-->\n\n<!-- ![Thread Model](http://g.gravizo.com/g?digraph%20G%20%7B%0A%20%20%20%20fontname%3D%22Microsoft%20YaHei%22%3B%0A%20%20%20%20fontsize%3D10%3B%0A%20%20%20%20rankdir%20%3D%20LR%3B%0A%0A%20%20%20%20%22buffer%20channel%22%20%5Bshape%3Dbox%5D%3B%0A%0A%20%20%20%20%22Logger.Log%20goroutine%201%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%202%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%203%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22buffer%20channel%22%20-%3E%20%22sync%20goroutine%22%3B%0A%20%20%20%20%22sync%20goroutine%22%20-%3E%20%22AWS%20Kinesis%20Stream%22%3B%0A%20%7D) -->\n\n{% asset_img use_channel.png 使用Channel %}\n\n具体代码实现：\n\n```go\nfunc NewLogger(example interface{}, opts *Options) (*Logger, error) {\n    ...\n\n    go l.sync()    // 启动sync goroutine\n    return l, nil\n}\n\nfunc (l *Logger) Log(msg interface{}) error {\n    ...\n\n    en := encode(msg)       // 对msg进行编码\n    ...\n        select {\n        case l.buffer <- en:    // 向buffer channel写入编码后的msg\n        ...\n        }\n    ...\n    return nil\n}\n\nfunc (l *Logger) sync() {\n    ...\n\n    buf := make([][]byte, 0) // 用于收集从buffer channel读取的日志数据\n    bufSize := 0\n\n    for {\n        select {\n        case msg := <-l.buffer:\n            if bufSize+len(msg)+partitionKeySize >= maxBatchSize {  // 如果buf的大小接近一次批量发送的最大数据量\n                l.flush(&buf, &bufSize)                             // 向AWS Kinesis批量发送数据\n            }\n\n            buf = append(buf, msg)                                  // 将从buffer channel读取日志数据保存到buf中\n            bufSize += len(msg) + partitionKeySize\n\n        ...\n    }\n}\n```\n\n## 如何实现对`Logger.Log`方法的调用超时机制\n\n如果一个IO操作耗时较长，并且调用比较频繁的情况下，不仅会阻塞`caller`的执行，还会消耗大量系统资源。我们通常会使用超时机制，避免程序长时间等待或者对系统资源大量占用。\n\n`Logger.Log`方法利用Go语言`channel`非常简洁的实现了超时机制：\n\n```go\nfunc (l *Logger) Log(msg interface{}) error {\n    ...\n\n    var timeout <-chan time.Time\n    if l.WriteTimeout > 0 {\n        timeout = time.After(l.WriteTimeout)    // 初始化时长为l.WriteTimeout的计时器\n    }\n\n    ...\n        select {\n        case l.buffer <- en:\n        case <-timeout: // 如果上一行代码一直阻塞，timeout计时器时间到点后会触发执行当前case下的代码\n            return fmt.Errorf(\"dlog writes %+v timeout after %v\", msg, l.WriteTimeout)\n        }\n    ...\n    return nil\n}\n```\n\n对比Java、.NET语言中超时机制的实现方法，Go语言的实现简洁的令人发指：\n\n- C#\n    - [Implementing .Net method timeout](http://weblogs.asp.net/israelio/159985)\n    - [How to implement Task Async for a timer in C#?](http://stackoverflow.com/questions/18646650/how-to-implement-task-async-for-a-timer-in-c)\n    - [Implementing a timeout in c#](http://stackoverflow.com/questions/10143980/implementing-a-timeout-in-c-sharp)\n- Java\n    - [How to implement timeout using threads](http://www.coderanch.com/t/232213/threads/java/implement-timeout-threads)\n    - [How to timeout a thread](http://stackoverflow.com/questions/2275443/how-to-timeout-a-thread)\n\n## 如何在`logger`没有收到新`msg`情况下，保证`buf`中的数据依然会定期发送给AWS Kinesis\n\n`dlog`在`Logger.sync()`方法中通过一个定时器，定期将`buf`中数据发送给AWS Kinesis。\n\n```go\nfunc (l *Logger) sync() {\n    if l.SyncPeriod <= 0 {\n        l.SyncPeriod = time.Second\n    }\n    ticker := time.NewTicker(l.SyncPeriod)  // l.SyncPeriod是定期发送的数据的时间间隔，ticker定时触发器\n\n    buf := make([][]byte, 0)\n    bufSize := 0\n\n    for {  // 无限循环保证sync goroutine一直工作\n        select {\n        case msg := <-l.buffer:\n            ...\n\n        case <-ticker.C: // ticker.C的类型是<-chan Time，每隔l.SyncPeriod时间会触发执行当前case的代码\n            if bufSize > 0 {\n                l.flush(&buf, &bufSize)\n            }\n        }\n    }\n}\n```\n\n通过`ticker`，`dlog`保证了即使没有收到新的`msg`的时候，保存在`buf`中的数据最长`l.SyncPeriod`时间后也会发送给AWS Kinesis。\n\n互联网产品的生产环境的上线，通常的做法是，将现有服务分组，然后交替切流量、升级。如果没有类似的机制，那么在服务程序断掉流量，没有收到新的访问时候，保存在内存中的数据就不会发送出去，升级时就可能导致数据丢失。\n\n## 如何向程序外部暴露运行指标\n\nGo语言的官方Package `expvar`提供一种标准化的接口，允许程序暴露公开访问的变量。`expvar`通过HTTP地址`/debug/vars`提供访问入口，并以JSON格式展示这些变量。下面是关于`expvar`常见用法的一个例子：\n\n```go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"expvar\"\n    \"fmt\"\n    \"net/http\"\n    \"sync\"\n    \"time\"\n)\n\n// Stats is used to collect runtime metrics\ntype Stats struct {\n    sync.Mutex\n    TotalHit  int\n    ErrorNums int\n}\n\nfunc (s *Stats) IncreaseTotalHit(i int) {\n    s.Lock()\n    defer s.Unlock()\n\n    s.TotalHit += i\n}\n\nfunc (s *Stats) IncreaseErrorNums(i int) {\n    s.Lock()\n    defer s.Unlock()\n\n    s.ErrorNums += i\n}\n\nfunc (s *Stats) String() string {\n    s.Lock()\n    defer s.Unlock()\n\n    b, err := json.Marshal(*s)\n    if err != nil {\n        return \"{}\"\n    } else {\n        return string(b)\n    }\n}\n\nvar (\n    stats *Stats\n    hits  *expvar.Map\n)\n\nfunc init() {\n\n    expvar.Publish(\"now\", expvar.Func(func() interface{} {\n        return time.Now().Format(\"\\\"2006-01-02 15:04:05\\\"\")\n    }))\n\n    stats = &Stats{}\n    expvar.Publish(\"stats\", stats)\n\n    hits = expvar.NewMap(\"hits\").Init()\n}\n\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\n    p := r.URL.Path[1:]\n    hits.Add(p, 1)\n    stats.IncreaseTotalHit(1)\n    fmt.Fprintf(w, \"Hey! I love %s! hits: %v\\n\", p, hits.Get(p))\n}\n\nfunc errHandler(w http.ResponseWriter, r *http.Request) {\n    stats.IncreaseErrorNums(1)\n    fmt.Fprintf(w, \"Error Nums: %v\\n\", stats.ErrorNums)\n}\n\nfunc main() {\n    http.HandleFunc(\"/err\", errHandler)\n    http.HandleFunc(\"/\", homeHandler)\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n按照如下步骤测试运行效果：\n\n- `go run expvarexample.go`运行例子代码\n- 在浏览器中访问`http://localhost:8080/ethan`\n- 在浏览器中访问`http://localhost:8080/err`\n- 在浏览器中访问`http://localhost:8080/debug/vars`，得到如下结果：\n```json\n{\n    \"cmdline\": [\"/var/folders/jf/65ft181j33j_d75ktgv67bsc0000gn/T/go-build467453980/command-line-arguments/_obj/exe/expvarsample\"],\n    \"hits\": {\n        \"ethan\": 1,\n        \"favicon.ico\": 2\n    },\n    \"memstats\": { ... },\n    \"now\": \"\\\"2016-04-19 20:17:40\\\"\",\n    \"stats\": {\n        \"TotalHit\":3,\n        \"ErrorNums\":1\n    }\n}\n```\n\n[expvarmon](https://github.com/divan/expvarmon)是一个帮助查看`expvar`暴露运行指标的工具，用法如下：\n\n- 安装：`go get github.com/divan/expvarmon`\n- 运行：`expvarmon -ports=\"8080\" -vars=\"hits.ethan,stats.TotalHit,stats.ErrorNums,now\"`\n- 效果如下：\n{% asset_img expvarmon_screen.png expvarmon screen %}\n\n`dlog`使用`expvar`向程序外部（比如监控程序）暴露运行指标，目前`dlog`中定义的运行指标包括：\n\n- `writtenRecords`: 成功写到AWS Kinesis的`msg`数量\n- `writtenBatches`: 成功调用AWS Kinesis批量写数据API的次数\n- `failedRecords`: 写到AWS Kinesis失败的`msg`数量\n- `tooBigMesssages`: 编码后体积过大(加上partitionKeySize大于1MB)的`msg`数量\n\n未来还需要根据运维的需求对运行指标进行调整，当前的用法也有一些问题，后期需要重构。\n\n## 如何在单元测试中实现`Setup`和`TearDown`\n\nGo语言提供一种**轻量级**的单元测试框架（无需第三方工具或者程序包）。通过使用`go test`命令和`testing` package，可以非常快速的实现单元测试。先借用官方文档中的[例子](http://docs.studygolang.com/doc/code.html#Testing)回顾一下Go单元测试框架的用法：\n\n```go\n//$GOPATH/src/github.com/user/stringutil/reverse_test.go\npackage stringutil\n\nimport \"testing\"\n\nfunc TestReverse(t *testing.T) {\n    cases := []struct {\n        in, want string\n    }{\n        {\"Hello, world\", \"dlrow ,olleH\"},\n        {\"Hello, 世界\", \"界世 ,olleH\"},\n        {\"\", \"\"},\n    }\n    for _, c := range cases {\n        got := Reverse(c.in)\n        if got != c.want {\n            t.Errorf(\"Reverse(%q) == %q, want %q\", c.in, got, c.want)\n        }\n    }\n}\n```\n\n运行测试只需要简单的输入命令：\n\n```go\n$ go test github.com/user/stringutil\nok  \tgithub.com/user/stringutil 0.165s\n```\n\n很多情况下，要执行单元测试，我们需要依赖一些外部资源，比如已完成初始化数据的数据库、公有云上的一些IaaS服务等。这些依赖资源，我们希望在单元测试执行前，能够自动的被初始化；单元测试完成后，能够自动的被清理。[testify/suite](https://github.com/stretchr/testify/suite) package就提供这样的支持。通过[testify/suite](https://github.com/stretchr/testify/suite)，你可以构建一个测试集`struct`，建立测试集的`setup`(初始化)/`teardown`(清理)方法，和最终实现测试用例逻辑的方法。而运行测试，仍然只需要一句简单的`go test`。\n\n以下是使用[testify/suite](https://github.com/stretchr/testify/suite)实现测试集的常见模式：\n\n```go\npackage suite\n\nimport (\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n)\n\ntype SuiteTester struct {\n    // Include our basic suite logic.\n    Suite\n\n    // Other properties\n    propertyN string\n}\n\n// The SetupSuite method will be run by testify once, at the very\n// start of the testing suite, before any tests are run.\nfunc (suite *SuiteTester) SetupSuite() {\n    // ...\n}\n\n// The TearDownSuite method will be run by testify once, at the very\n// end of the testing suite, after all tests have been run.\nfunc (suite *SuiteTester) TearDownSuite() {\n    // ...\n}\n\n// The SetupTest method will be run before every test in the suite.\nfunc (suite *SuiteTester) SetupTest() {\n    // ...\n}\n\n// The TearDownTest method will be run after every test in the suite.\nfunc (suite *SuiteTester) TearDownTest() {\n    // ...\n}\n\n// a test method\nfunc (suite *SuiteTester) TestOne() {\n    // ...\n}\n\n// another test method\nfunc (suite *SuiteTester) TestTwo() {\n    // ...\n}\n\n// TestRunSuite will be run by the 'go test' command, so within it, we\n// can run our suite using the Run(*testing.T, TestingSuite) function.\nfunc TestRunSuite(t *testing.T) {\n    suiteTester := new(SuiteTester)\n    Run(t, suiteTester)\n}\n```\n\n`dlog`中为了测试`Logger.Log`方法能否正常工作，按照上面的模式编写了相应的测试代码：\n\n```go\npackage dlog\n\n//...\n\ntype WriteLogSuiteTester struct {\n    suite.Suite\n\n    options     *Options\n    seachLogger *Logger\n    clickLogger *Logger\n    streamNames []string // save the created AWS Kinesis Streams, which will be removed in TearDownSuite()\n}\n\n// The SetupSuite method will be run by testify once, at the very\n// start of the testing suite, before any tests are run.\nfunc (s *WriteLogSuiteTester) SetupSuite() {\n\n    //...\n\n    // create stream 1\n    err = s.seachLogger.kinesis.CreateStream(s.seachLogger.streamName, testingShardCount)\n    s.Nil(err)\n\n    // create stream 2\n    err = s.clickLogger.kinesis.CreateStream(s.clickLogger.streamName, testingShardCount)\n    s.Nil(err)\n\n    s.streamNames = []string{s.seachLogger.streamName, s.clickLogger.streamName}\n\n    for { // waiting created stream's status to be active\n        time.Sleep(1 * time.Second)\n        resp1, err1 := s.seachLogger.kinesis.DescribeStream(s.seachLogger.streamName)\n        s.Nil(err1)\n\n        resp2, err2 := s.seachLogger.kinesis.DescribeStream(s.clickLogger.streamName)\n        s.Nil(err2)\n\n        status1 := strings.ToLower(string(resp1.StreamStatus))\n        status2 := strings.ToLower(string(resp2.StreamStatus))\n        if status1 == \"active\" && status2 == \"active\" {\n            break\n        }\n    }\n}\n\n// The TearDownSuite method will be run by testify once, at the very\n// end of the testing suite, after all tests have been run.\nfunc (s *WriteLogSuiteTester) TearDownSuite() {\n    if s.streamNames == nil || len(s.streamNames) == 0 {\n        return\n    }\n\n    for _, streamName := range s.streamNames {\n        err := s.seachLogger.kinesis.DeleteStream(streamName)\n        s.Nil(err)\n    }\n}\n\nfunc (s *WriteLogSuiteTester) TestWriteLog() {\n    defer func() { // Recover if panicking to make sure TearDownSuite will be executed\n        if r := recover(); r != nil {\n            s.Fail(fmt.Sprint(r))\n        }\n    }()\n\n    //...\n}\n\nfunc TestRunWriteLogSuite(t *testing.T) {\n    suiteTester := new(WriteLogSuiteTester)\n    suite.Run(t, suiteTester)\n}\n```\n\n注：\n\n- 很多场景下，测试程序自动创建依赖的资源需要运维部门的授权，所以实现前有必要先和运维部门沟通。\n- 云环境下，出于安全上的考虑，需要对创建、删除测试资源的账户管理严格管理\n    - 账户信息不能写在可以公开访问的测试代码、配置文件中\n    - 只给账户分配必要资源的最小权限\n    - 为账户能够创建的资源设定配额\n\n## 如何实现`kinesisMock`\n\n上一节我们提到在测试执行前初始化依赖资源，现实场景中，并不是任何情况下都能够获得依赖的测试资源，或者测试资源也会出现不可用的情况。通过Mock技术，可以减少测试代码对其它资源（或模块）的依赖。\n\n`dlog`的测试代码中，首先定义了一个`KinesisInterface`:\n\n```go\ntype KinesisInterface interface {\n    PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error)\n    CreateStream(name string, shardCount int) error\n    DescribeStream(name string) (resp *kinesis.StreamDescription, err error)\n    DeleteStream(name string) error\n}\n```\n\n`KinesisInterface`包含了`dlog`用到的[github.com/AdRoll/goamz/kinesis/kinesis](https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go)的所有方法。因为Go语言`interface`实现**非侵入式**的特点，[github.com/AdRoll/goamz/kinesis/kinesis](https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go)自动实现了`KinesisInterface`，我们再定义一个`kinesisMock`实现`KinesisInterface`：\n\n```go\ntype kinesisMock struct {\n    // Mapping from steam name to batches of batches\n    storage map[string][][]kinesis.PutRecordsRequestEntry\n\n    // simulate lantency that sync to Kinesis\n    putRecordLatency time.Duration\n\n    // created streams' names\n    streamNames []string\n\n    // lock to solve concurrent call\n    lock sync.RWMutex\n}\n\nfunc newKinesisMock(putRecordsLatency time.Duration) *kinesisMock {\n    return &kinesisMock{\n        storage:          make(map[string][][]kinesis.PutRecordsRequestEntry),\n        putRecordLatency: putRecordsLatency,\n        streamNames:      make([]string, 0),\n    }\n}\n\nfunc (mock *kinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    // ...\n}\n\nfunc (mock *kinesisMock) CreateStream(name string, shardCount int) error {\n    // ...\n}\n\nfunc (mock *kinesisMock) DescribeStream(name string) (resp *kinesis.StreamDescription, err error) {\n    // ...\n}\n\nfunc (mock *kinesisMock) DeleteStream(name string) error {\n    // ...\n}\n```\n\n然后，把业务代码中所有类型`kinesis`的变量，替换成`KinesisInterface`类型。\n\n```go\ntype Logger struct {\n    //...\n    kinesis    KinesisInterface\n    //...\n}\n```\n\n测试代码中，在构造`Logger`时传入`kinesisMock`，而不是真实的`kinesis`，这样就做到了“狸猫换太子”。\n\n```go\nfunc TestLoggingToMockKinesis(t *testing.T) {\n    assert := assert.New(t)\n\n    l, e := NewLogger(&impression{}, &Options{\n        // ...\n        UseMockKinesis: true,\n        MockKinesis:    newKinesisMock(0),\n    })\n\n    // ...\n}\n```\n\n## 如何模拟AWS Kinesis响应慢或者不可用\n\n`kinesisMock`完全是我们“虚构”出来的一个`kinesis`，在它的基础上，我们完全可以模拟响应慢或者不可用的情况。\n\n上一节中，不知道大家注意到没有，`kinesisMock`有个属性叫`putRecordLatency`，用来模拟调用`PutRecords`方法的延迟时间。\n\n```go\ntype kinesisMock struct {\n    // ...\n\n    // simulate lantency that sync to Kinesis\n    putRecordLatency time.Duration\n\n    // ...\n}\n\nfunc (mock *kinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    //...\n\n    time.Sleep(mock.putRecordLatency) // 模拟延迟\n\n    //...\n}\n```\n\n模拟不可用的`kinesis`则重新定义了一个`brokenKinesisMock`：\n\n```go\ntype brokenKinesisMock struct {\n    *kinesisMock\n}\n\nfunc newBrokenKinesisMock() *brokenKinesisMock {\n    return &brokenKinesisMock{\n        kinesisMock: newKinesisMock(0),\n    }\n}\n\nfunc (mock *brokenKinesisMock) PutRecords(streamName string, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error) {\n    return nil, fmt.Errorf(\"Kinesis is broken\")\n}\n```\n\n`kinesisMock`是`brokenKinesisMock`的嵌入`struct`，`brokenKinesisMock`会自动拥有`kinesisMock`的所有公开方法，这样也就实现了`KinesisInterface`。\n\n## 提交到代码库中的测试代码是否可以保留`log.Print`\n\n结论是“不可以”，原因总结如下：\n\n- 测试代码中的`log.Print`，一般用于调试代码，或者在`stdout`打印出一些信息帮助判断测试失败原因。不论哪种目的，这样的代码目的都仅仅是为了辅助开发，而不应该出现在最终交付的产品代码中。\n- `go test`命令会在控制台输出失败的测试方法，如果加上`-v`标志会打印出所有测试方法的执行结果，`log.Print`会影响执行结果的展示效果。团队合作开发，如果每个人都在测试代码中加上自己的`log.Print`，那么控制台打印出来的测试结果就没法看了。\n\n\n# 踩过的一些坑\n\n- [AWS Kinesis API - CreateStream](http://docs.aws.amazon.com/kinesis/latest/APIReference/API_CreateStream.html)是异步创建Stream，而且耗时10+秒，才能完成一个Stream的创建。开始以为是同步创建，结果执行测试逻辑的时候总是出错。\n- [github.com/AdRoll/goamz/aws/regions.go](https://github.com/AdRoll/goamz/blob/master/aws/regions.go)中缺少中国区AWS Kinesis的URL地址，调用中国区AWS Kinesis会出错。\n- Travis CI会Kill掉执行时间超过1分钟的CI过程，而不是如它文档中介绍的“10分钟”\n\n\n# 未来可以优化的地方\n\n- 发送失败的错误事件机制\n- 实现Kinesis服务不可用或者响应慢的场景下`dlog`的容错处理\n\n\n# 参考\n\n- [Effective Go](http://docs.studygolang.com/doc/effective_go.html)\n- [Amazon Kinesis Documentation](https://aws.amazon.com/cn/documentation/kinesis/)\n- [Advanced Go Concurrency Patterns](http://blog.golang.org/advanced-go-concurrency-patterns)\n- [hystrix-go](https://github.com/afex/hystrix-go)\n\n\n# 招聘消息\n\n我所在的[奥阁门科技有限公司](http://www.augmn.com)正在招聘后端、运维工程师，想加入的朋友、或者有朋友可以推荐的都可以联系我(ethancai@qq.com)。\n\n{% asset_img 2016-04-21_07-12-24.png 办公环境1 %}\n\n{% asset_img 2016-04-21_07-12-40.png 办公环境2 %}\n\n**后端工程师 / Backend Engineer**\n\n职责\n\n- 研讨和设计产品功能特性；\n- 设计研发系统后端的一个或多个独立服务（micro-service）模块；\n- 设计研发业务运营管理系统；\n- Code Review。\n\n要求\n\n- 有良好的编程习惯和代码风格；\n- 精通至少一种后台开发语言，包括但不限于Go、Node.js、C++、Python；\n- 对RESTful、RPC等架构有深刻理解和运用经验；\n- 有丰富的web service、web app开发经验；使用过著名的开源应用框架，并完整阅读过源代码；\n- 对Mysql、Redis、MongoDB或同类数据存储技术有丰富的使用经验；\n- 有提交代码到著名开源库或创建过开源项目者优先；\n- 能熟练查阅英文技术文档；\n- 有开放、坦诚的沟通心态，乐于分享；\n- 5年以上工作经验，3年以上后台系统开发经验。\n\n\n**高级系统运维工程师 / Senior Ops Engineer**\n\n职责\n\n- 负责日常业务系统基础实施（AWS）、网络及各子系统的管理维护。\n- 负责设计并部署相关应用平台，并提出平台的实施、运行报告。\n- 负责配合开发搭建测试平台，协助开发设计、推行、实施和持续改进。\n- 负责相关故障、疑难问题排查处理，编制汇总故障、问题，定期提交汇总报告。\n- 负责网络监控和应急反应，以确保网络系统有7*24小时的持续运作能力。\n- 负责日常系统维护，及监控，提供IT方面的服务和支持，保证系统的稳定。\n\n要求\n\n- 深入理解Linux/Unix操作系统并能熟练使用，了解Linux系统内核，有相关操作系统调优经验优先；\n- 熟悉计算机网络基础知识，了解TCP/IP、HTTP等网络协议；\n- 熟悉系统服务的管理和维护，例如：Nginx、DNS服务器、NTP服务等；\n- 熟悉一种或者多种脚本语言，例如：Shell、Python、Perl 、Ruby等；\n- 熟练掌握Linux管理相关命令行工具，例如：grep、awk、sed、tmux、vim等；\n- 对数据库系统（MySQL）运维管理有一定的了解；\n- 熟悉常见分布式系统系统架构部署管理，熟悉基础设施管理、并具有较强的故障排查和解决问题的能力；\n- 具有 2 年以上中大型互联网系统或亚马逊AWS管理经验者优先；\n- 有DevOps经验者优先；\n- 学习能力和沟通能力较强，具有良好的团队协作精神；\n- 工作中需要胆大心细，具备探索创新精神；\n- 具有良好的文档编写能力；\n- 具有一定的英文技术文档阅读能力。\n","slug":"experiences-about-develop-dlog","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneow000yv7bfckpk025j","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 -->\n<ul>\n<li>前言</li>\n<li><code>dlog</code>的用途</li>\n<li>对<code>dlog</code>的一些非功能性需求</li>\n<li>碰到问题及解决方案<ul>\n<li>何时使用<code>panic</code>，何时使用<code>return error</code></li>\n<li>如何实现一个<code>logger</code>只能接收对应类型的<code>data log</code></li>\n<li>如何实现批量发送<code>data log</code></li>\n<li>如何实现对<code>Logger.Log</code>方法的调用超时机制</li>\n<li>如何在<code>logger</code>没有收到新<code>msg</code>情况下，保证<code>buf</code>中的数据依然会定期发送给AWS Kinesis</li>\n<li>如何向程序外部暴露运行指标</li>\n<li>如何在单元测试中实现<code>Setup</code>和<code>TearDown</code></li>\n<li>如何实现<code>kinesisMock</code></li>\n<li>如何模拟AWS Kinesis响应慢或者不可用</li>\n<li>提交到代码库中的测试代码是否可以保留<code>log.Print</code></li>\n</ul>\n</li>\n<li>踩过的一些坑</li>\n<li>未来可以优化的地方</li>\n<li>参考</li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文记录了前段时间我和<a href=\"https://segmentfault.com/a/1190000002416822\" target=\"_blank\" rel=\"external\">王益</a>使用Go语言合作开发一个log组件<a href=\"https://github.com/topicai/dlog\" target=\"_blank\" rel=\"external\">dlog</a>的过程中学到的一些知识。在整个合作开发的过程中，王益严谨认真的态度，对开发质量的严格要求，给我留下了极其深刻的印象。能够和王益这样的顶级工程师切磋技艺，对我学习Go语言帮助非常大。也谨以此文表达对王益的感谢。</p>\n<blockquote>\n<p>注：本文假设读者已经对Go语法已经有基本了解。</p>\n</blockquote>\n<h1 id=\"dlog的用途\"><a href=\"#dlog的用途\" class=\"headerlink\" title=\"dlog的用途\"></a><code>dlog</code>的用途</h1><p>首先引用项目<strong>readme文档</strong>的第一段文字介绍一下<code>dlog</code>的用途：</p>\n<blockquote>\n<p>dlog is a Go package for distributed structure logging using Amazon AWS Kinesis/Firehose.</p>\n</blockquote>\n<p>更多介绍和设计请阅读<a href=\"https://github.com/topicai/dlog/blob/develop/README.md\" target=\"_blank\" rel=\"external\">readme文档</a></p>\n<p><code>dlog</code>主要是用来记录程序的<code>data log</code>的这样一个Golang package，那什么是<code>data log</code>？这里先简要解释一下。一般程序运行过程中主要产生两类日志：</p>\n<ul>\n<li><code>status log</code>：主要用于帮助调试、定位程序Bug、或者找到性能瓶颈，比如方法调用日志、错误日志、方法执行时间日志等</li>\n<li><code>data log</code>：主要用于记录用户行为，收集的<code>data log</code>用于后期的个性化搜索、智能推荐等，比如搜索行为、点击行为等</li>\n</ul>\n<h1 id=\"对dlog的一些非功能性需求\"><a href=\"#对dlog的一些非功能性需求\" class=\"headerlink\" title=\"对dlog的一些非功能性需求\"></a>对<code>dlog</code>的一些非功能性需求</h1><ul>\n<li>每一种类型的<code>data log</code>对应一种<code>logger</code>，一个<code>logger</code>只能记录对应类型的<code>data log</code></li>\n<li><code>dlog</code>内部发生的错误，不能影响调用的程序代码的执行<ul>\n<li>应考虑到AWS Kinesis服务响应慢或者不可用的场景（暂未实现）</li>\n</ul>\n</li>\n<li>程序代码中通过调用<code>dlog</code>的方法记录<code>data log</code>，<code>dlog</code>的方法不能阻塞调用的程序代码的执行（这一点<code>dlog</code>暂时未满足要求，需要后期改进）</li>\n<li>AWS Kinesis提供两个API接收数据，一个是<a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html\" target=\"_blank\" rel=\"external\">PutRecord</a>, 另一个是<a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html\" target=\"_blank\" rel=\"external\">PutRecords</a>，为了减少对Kinesis的调用次数，采用后者批量发送<code>data log</code><ul>\n<li><code>PutRecords</code>对一次调用的<code>record</code>数量限制是<code>500</code>，每个<code>record</code>大小必须小于等于1MB，整个<code>request</code>的大小必须小于等于5MB</li>\n<li>每一个Kinesis Stream能够承受的最大TPS和写数据量，与这个stream拥有的shard的数量有关。一个shard支持最大TPS是<code>1000 records per second</code>， 写数据量是<code>1MB per second</code></li>\n</ul>\n</li>\n<li>通过单元测试保证功能正确性</li>\n</ul>\n<h1 id=\"碰到问题及解决方案\"><a href=\"#碰到问题及解决方案\" class=\"headerlink\" title=\"碰到问题及解决方案\"></a>碰到问题及解决方案</h1><h2 id=\"何时使用panic，何时使用return-error\"><a href=\"#何时使用panic，何时使用return-error\" class=\"headerlink\" title=\"何时使用panic，何时使用return error\"></a>何时使用<code>panic</code>，何时使用<code>return error</code></h2><p>先看看<code>panic</code>和<code>return error</code>的执行机制。</p>\n<h3 id=\"panic的执行机制\"><a href=\"#panic的执行机制\" class=\"headerlink\" title=\"panic的执行机制\"></a><code>panic</code>的执行机制</h3><p><code>panic</code>会中断当前<code>goroutine</code>的执行，如果不对<code>panic</code>的错误进行<code>recover</code>，那么整个进程都会崩溃。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        log.Panic(<span class=\"string\">\"some error before work2\"</span>)</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"do some work2\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    time.Sleep(time.Second)</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"do some work1\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/off1y9tBax\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<p>可以通过<code>recover</code>捕捉当前<code>goroutine</code>中<code>panic</code>的错误并进行错误处理，整个进程的正常运行不受影响。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                log.Printf(<span class=\"string\">\"error: %v\"</span>, err)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;()</div><div class=\"line\">        log.Panic(<span class=\"string\">\"some error before work2\"</span>)</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"do some work2\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    time.Sleep(time.Second)</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"do some work1\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/RLWyb813Uw\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<p>我们可以发现Go语言中的<code>panic</code>、<code>recover</code>机制，和Java、.NET中的<code>throw</code>、<code>try...catch</code>机制非常类似。</p>\n<h3 id=\"return-error的执行机制\"><a href=\"#return-error的执行机制\" class=\"headerlink\" title=\"return error的执行机制\"></a><code>return error</code>的执行机制</h3><p><code>return error</code>是利用Go语言函数的多值返回的特性，通过函数的其中一个返回值（一般是第一个或者最后一个），向<code>caller</code>返回函数执行过程中产生的异常，其它值返回执行结果。</p>\n<p>这种方式的问题，主要在于：如果函数调用层次比较多，每一层函数都通过<code>return error</code>方式返回错误，都需要处理被调用函数的<code>return error</code>，增加代码复杂度。对于无法恢复的错误也没有必要一层一层往上抛，直接<code>panic/recover</code>更加简洁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"errors\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> R <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"an error\"</span>), <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    err, r := f1()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> err, <span class=\"literal\">nil</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, r</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f3</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    err, r := f2()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> err, <span class=\"literal\">nil</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, r</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    err, _ := f3()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Print(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/GhE5JpzZvn\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<h3 id=\"dlog错误处理原则\"><a href=\"#dlog错误处理原则\" class=\"headerlink\" title=\"dlog错误处理原则\"></a><code>dlog</code>错误处理原则</h3><p>使用<code>panic</code>还是<code>return error</code>的方式处理错误，要区分不同的场景。重要是不论使用<code>panic</code>还是<code>return error</code>，都需要符合架构上更高层面错误处理需求。</p>\n<p><code>dlog</code>是一个日志记录<code>package</code>，暴露给其它程序调用的方法如下：</p>\n<ul>\n<li><code>func NewLogger(example interface{}, opts *Options) (*Logger, error)</code></li>\n<li><code>func (l *Logger) Log(msg interface{}) error</code></li>\n</ul>\n<p>这两个方法的使用场景并不一样，错误处理原则也不完全一致：</p>\n<ul>\n<li><code>NewLogger</code>方法一般是在程序初始化的时候调用，用于创建记录程序运行过程中产生的data log的记录器。通过<code>NewLogger</code>创建一个<code>logger</code>的时候，如果传入参数不正确，使用<code>panic</code>方式，在上层调用程序不处理错误情况下会导致程序崩溃，所以使用<code>return error</code>方式向<code>caller</code>报告错误。大多数Golang package也是按此原则处理。</li>\n<li>上层程序调用<code>logger.Log</code>时，如果<code>Log</code>方法内部发生的错误，不能影响调用的代码的执行，所以这里绝对不能用<code>panic</code>方式抛出错误。日志记录是辅助功能，如果日志记录行为失败，导致业务逻辑代码执行不下去，估计负责业务逻辑开发的工程师会和你拼命。<ul>\n<li><code>logger.Log</code>可以使用<code>return error</code>方式返回<code>msg</code>校验类的错误</li>\n<li><code>logger.Log</code>发送日志采用的是异步批量方式向AWS Kinesis发送数据，向AWS Kinesis发送数据相关的错误无法通过<code>panic</code>或者<code>return error</code>方式直接报告给调用程序。最好的方式是允许调用程序向<code>logger</code>注册发送失败处理的<code>handler</code>，出现发送失败错误时执行<code>handler</code>逻辑。（暂未实现）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现一个logger只能接收对应类型的data-log\"><a href=\"#如何实现一个logger只能接收对应类型的data-log\" class=\"headerlink\" title=\"如何实现一个logger只能接收对应类型的data log\"></a>如何实现一个<code>logger</code>只能接收对应类型的<code>data log</code></h2><p>要实现一个<code>logger</code>只能接收对应类型的<code>data log</code>，主要思路如下：</p>\n<ul>\n<li><code>Logger</code>的定义中通过属性<code>msgType reflect.Type</code>记住能够接受的消息类型</li>\n<li>通过<code>NewLogger</code>方法创建<code>logger</code>的时候，指定<code>logger</code>可以接受的消息类型</li>\n<li><code>Log</code>方法中首先校验<code>msg</code>的类型是否是创建<code>logger</code>时指定的类型</li>\n</ul>\n<p>以下是相关代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// msgType保存Logger能够接受的消息类型</span></div><div class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    msgType    reflect.Type</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获得msg的reflect.Type</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">msgType</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(reflect.Type, error)</span></span> &#123;</div><div class=\"line\">    t := reflect.TypeOf(msg)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> t.Kind() == reflect.Ptr &#123;</div><div class=\"line\">        t = t.Elem()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> t.Kind() != reflect.Struct &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"dlog message must be either *struct or struct\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> t, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLogger</span><span class=\"params\">(example <span class=\"keyword\">interface</span>&#123;&#125;, opts *Options)</span> <span class=\"params\">(*Logger, error)</span></span> &#123;</div><div class=\"line\">    t, e := msgType(example)</div><div class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, e</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    l := &amp;Logger&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        msgType:    t,</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> l, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> t, e := msgType(msg); e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> !t.AssignableTo(l.msgType) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"parameter (%+v) not assignable to %v\"</span>, msg, l.msgType)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Log</code>方法中为什么要用<code>AssignableTo</code>，而不是直接判断两个类型相等。其实都可以，在<code>msg</code>是<code>struct</code>情况下，<code>AssignableTo</code>返回<code>True</code>意味着两个类型相等。参考下面的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">type</span> Fn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></div><div class=\"line\">    <span class=\"title\">id</span> := <span class=\"title\">func</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> zeroFn Fn</div><div class=\"line\">    log.Println(reflect.TypeOf(id).AssignableTo(reflect.TypeOf(zeroFn)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></div><div class=\"line\">    mi := <span class=\"number\">1</span></div><div class=\"line\">    log.Println(reflect.TypeOf(<span class=\"number\">2</span>).AssignableTo(reflect.TypeOf(mi)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">type</span> S1 <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">type</span> S2 S1</div><div class=\"line\"></div><div class=\"line\">    s1 := S1&#123;</div><div class=\"line\">        name: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    s2 := S2&#123;</div><div class=\"line\">        name: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// s2 = s1\t// if uncomment this line, will report \"cannot use s1 (type S1) as type S2 in assignment\" when compile</span></div><div class=\"line\">    log.Println(reflect.TypeOf(s1).AssignableTo(reflect.TypeOf(s2)))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/eDmzxW-ayk\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<h2 id=\"如何实现批量发送data-log\"><a href=\"#如何实现批量发送data-log\" class=\"headerlink\" title=\"如何实现批量发送data log\"></a>如何实现批量发送<code>data log</code></h2><p>要实现批量发送，首先我们可以想到应该要有个<code>buffer</code>用来收集一定数量的的<code>message</code>，等待<code>buffer</code>中的数据积累到一定程度后，一次性发送给AWS Kinesis。设计<code>buffer</code>结构不难，难点在于如何解决多线程(goroutine)并发读写<code>buffer</code>的问题，主要的解决方案有两种：</p>\n<ul>\n<li>基于锁机制实现对<code>buffer</code>访问控制</li>\n<li>基于<code>channel</code>实现对<code>buffer</code>的访问控制</li>\n</ul>\n<p>前者对于有Java、.NET等语言的并发编程经验的工程师来说，非常熟悉。而后者则体现了CSP(Communicating Sequential Processes)并发编程模型的优势。</p>\n<img src=\"/2016/04/20/experiences-about-develop-dlog/channel.png\" alt=\"CSP Model\" title=\"CSP Model\">\n<p><code>dlog</code>的<code>Log</code>方法把收到的<code>msg</code>写到名字叫<code>buffer</code>的<code>channel</code>中，另外一个单独的<code>goroutine</code>在<code>channel</code>的另一头收集编码后的日志信息，然后保存到<code>buf := make([][]byte, 0)</code>中。当<code>buf</code>中的数据量要达到一次向AWS Kinesis发送的最大量时，调用<code>flush</code>方法向AWS Kinesis发送数据。由于只有一个<code>goroutine</code>对<code>buf</code>进行访问，所以不需要通过锁机制控制对<code>buf</code>的读写。</p>\n<!--\ndigraph G {\n    fontname=\"Microsoft YaHei\";\n    fontsize=10;\n    rankdir = LR;\n\n    \"buffer channel\" [shape=box];\n\n    \"Logger.Log goroutine 1\" -> \"buffer channel\";\n    \"Logger.Log goroutine 2\" -> \"buffer channel\";\n    \"Logger.Log goroutine 3\" -> \"buffer channel\";\n    \"buffer channel\" -> \"sync goroutine\";\n    \"sync goroutine\" -> \"AWS Kinesis Stream\";\n}\n-->\n<!-- ![Thread Model](http://g.gravizo.com/g?digraph%20G%20%7B%0A%20%20%20%20fontname%3D%22Microsoft%20YaHei%22%3B%0A%20%20%20%20fontsize%3D10%3B%0A%20%20%20%20rankdir%20%3D%20LR%3B%0A%0A%20%20%20%20%22buffer%20channel%22%20%5Bshape%3Dbox%5D%3B%0A%0A%20%20%20%20%22Logger.Log%20goroutine%201%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%202%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%203%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22buffer%20channel%22%20-%3E%20%22sync%20goroutine%22%3B%0A%20%20%20%20%22sync%20goroutine%22%20-%3E%20%22AWS%20Kinesis%20Stream%22%3B%0A%20%7D) -->\n<img src=\"/2016/04/20/experiences-about-develop-dlog/use_channel.png\" alt=\"使用Channel\" title=\"使用Channel\">\n<p>具体代码实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLogger</span><span class=\"params\">(example <span class=\"keyword\">interface</span>&#123;&#125;, opts *Options)</span> <span class=\"params\">(*Logger, error)</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">go</span> l.sync()    <span class=\"comment\">// 启动sync goroutine</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    en := encode(msg)       <span class=\"comment\">// 对msg进行编码</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> l.buffer &lt;- en:    <span class=\"comment\">// 向buffer channel写入编码后的msg</span></div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    buf := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>) <span class=\"comment\">// 用于收集从buffer channel读取的日志数据</span></div><div class=\"line\">    bufSize := <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> msg := &lt;-l.buffer:</div><div class=\"line\">            <span class=\"keyword\">if</span> bufSize+<span class=\"built_in\">len</span>(msg)+partitionKeySize &gt;= maxBatchSize &#123;  <span class=\"comment\">// 如果buf的大小接近一次批量发送的最大数据量</span></div><div class=\"line\">                l.flush(&amp;buf, &amp;bufSize)                             <span class=\"comment\">// 向AWS Kinesis批量发送数据</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            buf = <span class=\"built_in\">append</span>(buf, msg)                                  <span class=\"comment\">// 将从buffer channel读取日志数据保存到buf中</span></div><div class=\"line\">            bufSize += <span class=\"built_in\">len</span>(msg) + partitionKeySize</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"如何实现对Logger-Log方法的调用超时机制\"><a href=\"#如何实现对Logger-Log方法的调用超时机制\" class=\"headerlink\" title=\"如何实现对Logger.Log方法的调用超时机制\"></a>如何实现对<code>Logger.Log</code>方法的调用超时机制</h2><p>如果一个IO操作耗时较长，并且调用比较频繁的情况下，不仅会阻塞<code>caller</code>的执行，还会消耗大量系统资源。我们通常会使用超时机制，避免程序长时间等待或者对系统资源大量占用。</p>\n<p><code>Logger.Log</code>方法利用Go语言<code>channel</code>非常简洁的实现了超时机制：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> timeout &lt;-<span class=\"keyword\">chan</span> time.Time</div><div class=\"line\">    <span class=\"keyword\">if</span> l.WriteTimeout &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">        timeout = time.After(l.WriteTimeout)    <span class=\"comment\">// 初始化时长为l.WriteTimeout的计时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> l.buffer &lt;- en:</div><div class=\"line\">        <span class=\"keyword\">case</span> &lt;-timeout: <span class=\"comment\">// 如果上一行代码一直阻塞，timeout计时器时间到点后会触发执行当前case下的代码</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"dlog writes %+v timeout after %v\"</span>, msg, l.WriteTimeout)</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对比Java、.NET语言中超时机制的实现方法，Go语言的实现简洁的令人发指：</p>\n<ul>\n<li>C#<ul>\n<li><a href=\"http://weblogs.asp.net/israelio/159985\" target=\"_blank\" rel=\"external\">Implementing .Net method timeout</a></li>\n<li><a href=\"http://stackoverflow.com/questions/18646650/how-to-implement-task-async-for-a-timer-in-c\" target=\"_blank\" rel=\"external\">How to implement Task Async for a timer in C#?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10143980/implementing-a-timeout-in-c-sharp\" target=\"_blank\" rel=\"external\">Implementing a timeout in c#</a></li>\n</ul>\n</li>\n<li>Java<ul>\n<li><a href=\"http://www.coderanch.com/t/232213/threads/java/implement-timeout-threads\" target=\"_blank\" rel=\"external\">How to implement timeout using threads</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2275443/how-to-timeout-a-thread\" target=\"_blank\" rel=\"external\">How to timeout a thread</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS-Kinesis\"><a href=\"#如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS-Kinesis\" class=\"headerlink\" title=\"如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS Kinesis\"></a>如何在<code>logger</code>没有收到新<code>msg</code>情况下，保证<code>buf</code>中的数据依然会定期发送给AWS Kinesis</h2><p><code>dlog</code>在<code>Logger.sync()</code>方法中通过一个定时器，定期将<code>buf</code>中数据发送给AWS Kinesis。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> l.SyncPeriod &lt;= <span class=\"number\">0</span> &#123;</div><div class=\"line\">        l.SyncPeriod = time.Second</div><div class=\"line\">    &#125;</div><div class=\"line\">    ticker := time.NewTicker(l.SyncPeriod)  <span class=\"comment\">// l.SyncPeriod是定期发送的数据的时间间隔，ticker定时触发器</span></div><div class=\"line\"></div><div class=\"line\">    buf := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>)</div><div class=\"line\">    bufSize := <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;  <span class=\"comment\">// 无限循环保证sync goroutine一直工作</span></div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> msg := &lt;-l.buffer:</div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> &lt;-ticker.C: <span class=\"comment\">// ticker.C的类型是&lt;-chan Time，每隔l.SyncPeriod时间会触发执行当前case的代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> bufSize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">                l.flush(&amp;buf, &amp;bufSize)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过<code>ticker</code>，<code>dlog</code>保证了即使没有收到新的<code>msg</code>的时候，保存在<code>buf</code>中的数据最长<code>l.SyncPeriod</code>时间后也会发送给AWS Kinesis。</p>\n<p>互联网产品的生产环境的上线，通常的做法是，将现有服务分组，然后交替切流量、升级。如果没有类似的机制，那么在服务程序断掉流量，没有收到新的访问时候，保存在内存中的数据就不会发送出去，升级时就可能导致数据丢失。</p>\n<h2 id=\"如何向程序外部暴露运行指标\"><a href=\"#如何向程序外部暴露运行指标\" class=\"headerlink\" title=\"如何向程序外部暴露运行指标\"></a>如何向程序外部暴露运行指标</h2><p>Go语言的官方Package <code>expvar</code>提供一种标准化的接口，允许程序暴露公开访问的变量。<code>expvar</code>通过HTTP地址<code>/debug/vars</code>提供访问入口，并以JSON格式展示这些变量。下面是关于<code>expvar</code>常见用法的一个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"expvar\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"sync\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Stats is used to collect runtime metrics</span></div><div class=\"line\"><span class=\"keyword\">type</span> Stats <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    sync.Mutex</div><div class=\"line\">    TotalHit  <span class=\"keyword\">int</span></div><div class=\"line\">    ErrorNums <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">IncreaseTotalHit</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    s.TotalHit += i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">IncreaseErrorNums</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    s.ErrorNums += i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    b, err := json.Marshal(*s)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;&#125;\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">    stats *Stats</div><div class=\"line\">    hits  *expvar.Map</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    expvar.Publish(<span class=\"string\">\"now\"</span>, expvar.Func(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> time.Now().Format(<span class=\"string\">\"\\\"2006-01-02 15:04:05\\\"\"</span>)</div><div class=\"line\">    &#125;))</div><div class=\"line\"></div><div class=\"line\">    stats = &amp;Stats&#123;&#125;</div><div class=\"line\">    expvar.Publish(<span class=\"string\">\"stats\"</span>, stats)</div><div class=\"line\"></div><div class=\"line\">    hits = expvar.NewMap(<span class=\"string\">\"hits\"</span>).Init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">homeHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    p := r.URL.Path[<span class=\"number\">1</span>:]</div><div class=\"line\">    hits.Add(p, <span class=\"number\">1</span>)</div><div class=\"line\">    stats.IncreaseTotalHit(<span class=\"number\">1</span>)</div><div class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"Hey! I love %s! hits: %v\\n\"</span>, p, hits.Get(p))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">errHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    stats.IncreaseErrorNums(<span class=\"number\">1</span>)</div><div class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"Error Nums: %v\\n\"</span>, stats.ErrorNums)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/err\"</span>, errHandler)</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, homeHandler)</div><div class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>按照如下步骤测试运行效果：</p>\n<ul>\n<li><code>go run expvarexample.go</code>运行例子代码</li>\n<li>在浏览器中访问<code>http://localhost:8080/ethan</code></li>\n<li>在浏览器中访问<code>http://localhost:8080/err</code></li>\n<li>在浏览器中访问<code>http://localhost:8080/debug/vars</code>，得到如下结果：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"cmdline\": [\"/var/folders/jf/65ft181j33j_d75ktgv67bsc0000gn/T/go-build467453980/command-line-arguments/_obj/exe/expvarsample\"],</div><div class=\"line\">    \"hits\": &#123;</div><div class=\"line\">        \"ethan\": 1,</div><div class=\"line\">        \"favicon.ico\": 2</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"memstats\": &#123; ... &#125;,</div><div class=\"line\">    \"now\": \"\\\"2016-04-19 20:17:40\\\"\",</div><div class=\"line\">    \"stats\": &#123;</div><div class=\"line\">        \"TotalHit\":3,</div><div class=\"line\">        \"ErrorNums\":1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://github.com/divan/expvarmon\" target=\"_blank\" rel=\"external\">expvarmon</a>是一个帮助查看<code>expvar</code>暴露运行指标的工具，用法如下：</p>\n<ul>\n<li>安装：<code>go get github.com/divan/expvarmon</code></li>\n<li>运行：<code>expvarmon -ports=&quot;8080&quot; -vars=&quot;hits.ethan,stats.TotalHit,stats.ErrorNums,now&quot;</code></li>\n<li>效果如下：<img src=\"/2016/04/20/experiences-about-develop-dlog/expvarmon_screen.png\" alt=\"expvarmon screen\" title=\"expvarmon screen\">\n</li>\n</ul>\n<p><code>dlog</code>使用<code>expvar</code>向程序外部（比如监控程序）暴露运行指标，目前<code>dlog</code>中定义的运行指标包括：</p>\n<ul>\n<li><code>writtenRecords</code>: 成功写到AWS Kinesis的<code>msg</code>数量</li>\n<li><code>writtenBatches</code>: 成功调用AWS Kinesis批量写数据API的次数</li>\n<li><code>failedRecords</code>: 写到AWS Kinesis失败的<code>msg</code>数量</li>\n<li><code>tooBigMesssages</code>: 编码后体积过大(加上partitionKeySize大于1MB)的<code>msg</code>数量</li>\n</ul>\n<p>未来还需要根据运维的需求对运行指标进行调整，当前的用法也有一些问题，后期需要重构。</p>\n<h2 id=\"如何在单元测试中实现Setup和TearDown\"><a href=\"#如何在单元测试中实现Setup和TearDown\" class=\"headerlink\" title=\"如何在单元测试中实现Setup和TearDown\"></a>如何在单元测试中实现<code>Setup</code>和<code>TearDown</code></h2><p>Go语言提供一种<strong>轻量级</strong>的单元测试框架（无需第三方工具或者程序包）。通过使用<code>go test</code>命令和<code>testing</code> package，可以非常快速的实现单元测试。先借用官方文档中的<a href=\"http://docs.studygolang.com/doc/code.html#Testing\" target=\"_blank\" rel=\"external\">例子</a>回顾一下Go单元测试框架的用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$GOPATH/src/github.com/user/stringutil/reverse_test.go</span></div><div class=\"line\"><span class=\"keyword\">package</span> stringutil</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestReverse</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    cases := []<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        in, want <span class=\"keyword\">string</span></div><div class=\"line\">    &#125;&#123;</div><div class=\"line\">        &#123;<span class=\"string\">\"Hello, world\"</span>, <span class=\"string\">\"dlrow ,olleH\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"Hello, 世界\"</span>, <span class=\"string\">\"界世 ,olleH\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>&#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> _, c := <span class=\"keyword\">range</span> cases &#123;</div><div class=\"line\">        got := Reverse(c.in)</div><div class=\"line\">        <span class=\"keyword\">if</span> got != c.want &#123;</div><div class=\"line\">            t.Errorf(<span class=\"string\">\"Reverse(%q) == %q, want %q\"</span>, c.in, got, c.want)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行测试只需要简单的输入命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"keyword\">go</span> test github.com/user/stringutil</div><div class=\"line\">ok  \tgithub.com/user/stringutil <span class=\"number\">0.165s</span></div></pre></td></tr></table></figure>\n<p>很多情况下，要执行单元测试，我们需要依赖一些外部资源，比如已完成初始化数据的数据库、公有云上的一些IaaS服务等。这些依赖资源，我们希望在单元测试执行前，能够自动的被初始化；单元测试完成后，能够自动的被清理。<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a> package就提供这样的支持。通过<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a>，你可以构建一个测试集<code>struct</code>，建立测试集的<code>setup</code>(初始化)/<code>teardown</code>(清理)方法，和最终实现测试用例逻辑的方法。而运行测试，仍然只需要一句简单的<code>go test</code>。</p>\n<p>以下是使用<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a>实现测试集的常见模式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> suite</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"github.com/stretchr/testify/assert\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> SuiteTester <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Include our basic suite logic.</span></div><div class=\"line\">    Suite</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Other properties</span></div><div class=\"line\">    propertyN <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// start of the testing suite, before any tests are run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">SetupSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// end of the testing suite, after all tests have been run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TearDownSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupTest method will be run before every test in the suite.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">SetupTest</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownTest method will be run after every test in the suite.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TearDownTest</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a test method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TestOne</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// another test method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TestTwo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TestRunSuite will be run by the 'go test' command, so within it, we</span></div><div class=\"line\"><span class=\"comment\">// can run our suite using the Run(*testing.T, TestingSuite) function.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRunSuite</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    suiteTester := <span class=\"built_in\">new</span>(SuiteTester)</div><div class=\"line\">    Run(t, suiteTester)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>dlog</code>中为了测试<code>Logger.Log</code>方法能否正常工作，按照上面的模式编写了相应的测试代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> dlog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> WriteLogSuiteTester <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    suite.Suite</div><div class=\"line\"></div><div class=\"line\">    options     *Options</div><div class=\"line\">    seachLogger *Logger</div><div class=\"line\">    clickLogger *Logger</div><div class=\"line\">    streamNames []<span class=\"keyword\">string</span> <span class=\"comment\">// save the created AWS Kinesis Streams, which will be removed in TearDownSuite()</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// start of the testing suite, before any tests are run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">SetupSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create stream 1</span></div><div class=\"line\">    err = s.seachLogger.kinesis.CreateStream(s.seachLogger.streamName, testingShardCount)</div><div class=\"line\">    s.Nil(err)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create stream 2</span></div><div class=\"line\">    err = s.clickLogger.kinesis.CreateStream(s.clickLogger.streamName, testingShardCount)</div><div class=\"line\">    s.Nil(err)</div><div class=\"line\"></div><div class=\"line\">    s.streamNames = []<span class=\"keyword\">string</span>&#123;s.seachLogger.streamName, s.clickLogger.streamName&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123; <span class=\"comment\">// waiting created stream's status to be active</span></div><div class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)</div><div class=\"line\">        resp1, err1 := s.seachLogger.kinesis.DescribeStream(s.seachLogger.streamName)</div><div class=\"line\">        s.Nil(err1)</div><div class=\"line\"></div><div class=\"line\">        resp2, err2 := s.seachLogger.kinesis.DescribeStream(s.clickLogger.streamName)</div><div class=\"line\">        s.Nil(err2)</div><div class=\"line\"></div><div class=\"line\">        status1 := strings.ToLower(<span class=\"keyword\">string</span>(resp1.StreamStatus))</div><div class=\"line\">        status2 := strings.ToLower(<span class=\"keyword\">string</span>(resp2.StreamStatus))</div><div class=\"line\">        <span class=\"keyword\">if</span> status1 == <span class=\"string\">\"active\"</span> &amp;&amp; status2 == <span class=\"string\">\"active\"</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// end of the testing suite, after all tests have been run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">TearDownSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> s.streamNames == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(s.streamNames) == <span class=\"number\">0</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> _, streamName := <span class=\"keyword\">range</span> s.streamNames &#123;</div><div class=\"line\">        err := s.seachLogger.kinesis.DeleteStream(streamName)</div><div class=\"line\">        s.Nil(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">TestWriteLog</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">// Recover if panicking to make sure TearDownSuite will be executed</span></div><div class=\"line\">        <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            s.Fail(fmt.Sprint(r))</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRunWriteLogSuite</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    suiteTester := <span class=\"built_in\">new</span>(WriteLogSuiteTester)</div><div class=\"line\">    suite.Run(t, suiteTester)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>很多场景下，测试程序自动创建依赖的资源需要运维部门的授权，所以实现前有必要先和运维部门沟通。</li>\n<li>云环境下，出于安全上的考虑，需要对创建、删除测试资源的账户管理严格管理<ul>\n<li>账户信息不能写在可以公开访问的测试代码、配置文件中</li>\n<li>只给账户分配必要资源的最小权限</li>\n<li>为账户能够创建的资源设定配额</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现kinesisMock\"><a href=\"#如何实现kinesisMock\" class=\"headerlink\" title=\"如何实现kinesisMock\"></a>如何实现<code>kinesisMock</code></h2><p>上一节我们提到在测试执行前初始化依赖资源，现实场景中，并不是任何情况下都能够获得依赖的测试资源，或者测试资源也会出现不可用的情况。通过Mock技术，可以减少测试代码对其它资源（或模块）的依赖。</p>\n<p><code>dlog</code>的测试代码中，首先定义了一个<code>KinesisInterface</code>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> KinesisInterface <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    PutRecords(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error)</div><div class=\"line\">    CreateStream(name <span class=\"keyword\">string</span>, shardCount <span class=\"keyword\">int</span>) error</div><div class=\"line\">    DescribeStream(name <span class=\"keyword\">string</span>) (resp *kinesis.StreamDescription, err error)</div><div class=\"line\">    DeleteStream(name <span class=\"keyword\">string</span>) error</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>KinesisInterface</code>包含了<code>dlog</code>用到的<a href=\"https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/kinesis/kinesis</a>的所有方法。因为Go语言<code>interface</code>实现<strong>非侵入式</strong>的特点，<a href=\"https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/kinesis/kinesis</a>自动实现了<code>KinesisInterface</code>，我们再定义一个<code>kinesisMock</code>实现<code>KinesisInterface</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> kinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Mapping from steam name to batches of batches</span></div><div class=\"line\">    storage <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][][]kinesis.PutRecordsRequestEntry</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// simulate lantency that sync to Kinesis</span></div><div class=\"line\">    putRecordLatency time.Duration</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// created streams' names</span></div><div class=\"line\">    streamNames []<span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// lock to solve concurrent call</span></div><div class=\"line\">    lock sync.RWMutex</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newKinesisMock</span><span class=\"params\">(putRecordsLatency time.Duration)</span> *<span class=\"title\">kinesisMock</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;kinesisMock&#123;</div><div class=\"line\">        storage:          <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][][]kinesis.PutRecordsRequestEntry),</div><div class=\"line\">        putRecordLatency: putRecordsLatency,</div><div class=\"line\">        streamNames:      <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">CreateStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>, shardCount <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">DescribeStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"params\">(resp *kinesis.StreamDescription, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">DeleteStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后，把业务代码中所有类型<code>kinesis</code>的变量，替换成<code>KinesisInterface</code>类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    kinesis    KinesisInterface</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码中，在构造<code>Logger</code>时传入<code>kinesisMock</code>，而不是真实的<code>kinesis</code>，这样就做到了“狸猫换太子”。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestLoggingToMockKinesis</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    assert := assert.New(t)</div><div class=\"line\"></div><div class=\"line\">    l, e := NewLogger(&amp;impression&#123;&#125;, &amp;Options&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        UseMockKinesis: <span class=\"literal\">true</span>,</div><div class=\"line\">        MockKinesis:    newKinesisMock(<span class=\"number\">0</span>),</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"如何模拟AWS-Kinesis响应慢或者不可用\"><a href=\"#如何模拟AWS-Kinesis响应慢或者不可用\" class=\"headerlink\" title=\"如何模拟AWS Kinesis响应慢或者不可用\"></a>如何模拟AWS Kinesis响应慢或者不可用</h2><p><code>kinesisMock</code>完全是我们“虚构”出来的一个<code>kinesis</code>，在它的基础上，我们完全可以模拟响应慢或者不可用的情况。</p>\n<p>上一节中，不知道大家注意到没有，<code>kinesisMock</code>有个属性叫<code>putRecordLatency</code>，用来模拟调用<code>PutRecords</code>方法的延迟时间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> kinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// simulate lantency that sync to Kinesis</span></div><div class=\"line\">    putRecordLatency time.Duration</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    time.Sleep(mock.putRecordLatency) <span class=\"comment\">// 模拟延迟</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>模拟不可用的<code>kinesis</code>则重新定义了一个<code>brokenKinesisMock</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> brokenKinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    *kinesisMock</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newBrokenKinesisMock</span><span class=\"params\">()</span> *<span class=\"title\">brokenKinesisMock</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;brokenKinesisMock&#123;</div><div class=\"line\">        kinesisMock: newKinesisMock(<span class=\"number\">0</span>),</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *brokenKinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"Kinesis is broken\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>kinesisMock</code>是<code>brokenKinesisMock</code>的嵌入<code>struct</code>，<code>brokenKinesisMock</code>会自动拥有<code>kinesisMock</code>的所有公开方法，这样也就实现了<code>KinesisInterface</code>。</p>\n<h2 id=\"提交到代码库中的测试代码是否可以保留log-Print\"><a href=\"#提交到代码库中的测试代码是否可以保留log-Print\" class=\"headerlink\" title=\"提交到代码库中的测试代码是否可以保留log.Print\"></a>提交到代码库中的测试代码是否可以保留<code>log.Print</code></h2><p>结论是“不可以”，原因总结如下：</p>\n<ul>\n<li>测试代码中的<code>log.Print</code>，一般用于调试代码，或者在<code>stdout</code>打印出一些信息帮助判断测试失败原因。不论哪种目的，这样的代码目的都仅仅是为了辅助开发，而不应该出现在最终交付的产品代码中。</li>\n<li><code>go test</code>命令会在控制台输出失败的测试方法，如果加上<code>-v</code>标志会打印出所有测试方法的执行结果，<code>log.Print</code>会影响执行结果的展示效果。团队合作开发，如果每个人都在测试代码中加上自己的<code>log.Print</code>，那么控制台打印出来的测试结果就没法看了。</li>\n</ul>\n<h1 id=\"踩过的一些坑\"><a href=\"#踩过的一些坑\" class=\"headerlink\" title=\"踩过的一些坑\"></a>踩过的一些坑</h1><ul>\n<li><a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_CreateStream.html\" target=\"_blank\" rel=\"external\">AWS Kinesis API - CreateStream</a>是异步创建Stream，而且耗时10+秒，才能完成一个Stream的创建。开始以为是同步创建，结果执行测试逻辑的时候总是出错。</li>\n<li><a href=\"https://github.com/AdRoll/goamz/blob/master/aws/regions.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/aws/regions.go</a>中缺少中国区AWS Kinesis的URL地址，调用中国区AWS Kinesis会出错。</li>\n<li>Travis CI会Kill掉执行时间超过1分钟的CI过程，而不是如它文档中介绍的“10分钟”</li>\n</ul>\n<h1 id=\"未来可以优化的地方\"><a href=\"#未来可以优化的地方\" class=\"headerlink\" title=\"未来可以优化的地方\"></a>未来可以优化的地方</h1><ul>\n<li>发送失败的错误事件机制</li>\n<li>实现Kinesis服务不可用或者响应慢的场景下<code>dlog</code>的容错处理</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://docs.studygolang.com/doc/effective_go.html\" target=\"_blank\" rel=\"external\">Effective Go</a></li>\n<li><a href=\"https://aws.amazon.com/cn/documentation/kinesis/\" target=\"_blank\" rel=\"external\">Amazon Kinesis Documentation</a></li>\n<li><a href=\"http://blog.golang.org/advanced-go-concurrency-patterns\" target=\"_blank\" rel=\"external\">Advanced Go Concurrency Patterns</a></li>\n<li><a href=\"https://github.com/afex/hystrix-go\" target=\"_blank\" rel=\"external\">hystrix-go</a></li>\n</ul>\n<h1 id=\"招聘消息\"><a href=\"#招聘消息\" class=\"headerlink\" title=\"招聘消息\"></a>招聘消息</h1><p>我所在的<a href=\"http://www.augmn.com\" target=\"_blank\" rel=\"external\">奥阁门科技有限公司</a>正在招聘后端、运维工程师，想加入的朋友、或者有朋友可以推荐的都可以联系我(ethancai@qq.com)。</p>\n<img src=\"/2016/04/20/experiences-about-develop-dlog/2016-04-21_07-12-24.png\" alt=\"办公环境1\" title=\"办公环境1\">\n<img src=\"/2016/04/20/experiences-about-develop-dlog/2016-04-21_07-12-40.png\" alt=\"办公环境2\" title=\"办公环境2\">\n<p><strong>后端工程师 / Backend Engineer</strong></p>\n<p>职责</p>\n<ul>\n<li>研讨和设计产品功能特性；</li>\n<li>设计研发系统后端的一个或多个独立服务（micro-service）模块；</li>\n<li>设计研发业务运营管理系统；</li>\n<li>Code Review。</li>\n</ul>\n<p>要求</p>\n<ul>\n<li>有良好的编程习惯和代码风格；</li>\n<li>精通至少一种后台开发语言，包括但不限于Go、Node.js、C++、Python；</li>\n<li>对RESTful、RPC等架构有深刻理解和运用经验；</li>\n<li>有丰富的web service、web app开发经验；使用过著名的开源应用框架，并完整阅读过源代码；</li>\n<li>对Mysql、Redis、MongoDB或同类数据存储技术有丰富的使用经验；</li>\n<li>有提交代码到著名开源库或创建过开源项目者优先；</li>\n<li>能熟练查阅英文技术文档；</li>\n<li>有开放、坦诚的沟通心态，乐于分享；</li>\n<li>5年以上工作经验，3年以上后台系统开发经验。</li>\n</ul>\n<p><strong>高级系统运维工程师 / Senior Ops Engineer</strong></p>\n<p>职责</p>\n<ul>\n<li>负责日常业务系统基础实施（AWS）、网络及各子系统的管理维护。</li>\n<li>负责设计并部署相关应用平台，并提出平台的实施、运行报告。</li>\n<li>负责配合开发搭建测试平台，协助开发设计、推行、实施和持续改进。</li>\n<li>负责相关故障、疑难问题排查处理，编制汇总故障、问题，定期提交汇总报告。</li>\n<li>负责网络监控和应急反应，以确保网络系统有7*24小时的持续运作能力。</li>\n<li>负责日常系统维护，及监控，提供IT方面的服务和支持，保证系统的稳定。</li>\n</ul>\n<p>要求</p>\n<ul>\n<li>深入理解Linux/Unix操作系统并能熟练使用，了解Linux系统内核，有相关操作系统调优经验优先；</li>\n<li>熟悉计算机网络基础知识，了解TCP/IP、HTTP等网络协议；</li>\n<li>熟悉系统服务的管理和维护，例如：Nginx、DNS服务器、NTP服务等；</li>\n<li>熟悉一种或者多种脚本语言，例如：Shell、Python、Perl 、Ruby等；</li>\n<li>熟练掌握Linux管理相关命令行工具，例如：grep、awk、sed、tmux、vim等；</li>\n<li>对数据库系统（MySQL）运维管理有一定的了解；</li>\n<li>熟悉常见分布式系统系统架构部署管理，熟悉基础设施管理、并具有较强的故障排查和解决问题的能力；</li>\n<li>具有 2 年以上中大型互联网系统或亚马逊AWS管理经验者优先；</li>\n<li>有DevOps经验者优先；</li>\n<li>学习能力和沟通能力较强，具有良好的团队协作精神；</li>\n<li>工作中需要胆大心细，具备探索创新精神；</li>\n<li>具有良好的文档编写能力；</li>\n<li>具有一定的英文技术文档阅读能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 -->\n<ul>\n<li>前言</li>\n<li><code>dlog</code>的用途</li>\n<li>对<code>dlog</code>的一些非功能性需求</li>\n<li>碰到问题及解决方案<ul>\n<li>何时使用<code>panic</code>，何时使用<code>return error</code></li>\n<li>如何实现一个<code>logger</code>只能接收对应类型的<code>data log</code></li>\n<li>如何实现批量发送<code>data log</code></li>\n<li>如何实现对<code>Logger.Log</code>方法的调用超时机制</li>\n<li>如何在<code>logger</code>没有收到新<code>msg</code>情况下，保证<code>buf</code>中的数据依然会定期发送给AWS Kinesis</li>\n<li>如何向程序外部暴露运行指标</li>\n<li>如何在单元测试中实现<code>Setup</code>和<code>TearDown</code></li>\n<li>如何实现<code>kinesisMock</code></li>\n<li>如何模拟AWS Kinesis响应慢或者不可用</li>\n<li>提交到代码库中的测试代码是否可以保留<code>log.Print</code></li>\n</ul>\n</li>\n<li>踩过的一些坑</li>\n<li>未来可以优化的地方</li>\n<li>参考</li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文记录了前段时间我和<a href=\"https://segmentfault.com/a/1190000002416822\" target=\"_blank\" rel=\"external\">王益</a>使用Go语言合作开发一个log组件<a href=\"https://github.com/topicai/dlog\" target=\"_blank\" rel=\"external\">dlog</a>的过程中学到的一些知识。在整个合作开发的过程中，王益严谨认真的态度，对开发质量的严格要求，给我留下了极其深刻的印象。能够和王益这样的顶级工程师切磋技艺，对我学习Go语言帮助非常大。也谨以此文表达对王益的感谢。</p>\n<blockquote>\n<p>注：本文假设读者已经对Go语法已经有基本了解。</p>\n</blockquote>\n<h1 id=\"dlog的用途\"><a href=\"#dlog的用途\" class=\"headerlink\" title=\"dlog的用途\"></a><code>dlog</code>的用途</h1><p>首先引用项目<strong>readme文档</strong>的第一段文字介绍一下<code>dlog</code>的用途：</p>\n<blockquote>\n<p>dlog is a Go package for distributed structure logging using Amazon AWS Kinesis/Firehose.</p>\n</blockquote>\n<p>更多介绍和设计请阅读<a href=\"https://github.com/topicai/dlog/blob/develop/README.md\" target=\"_blank\" rel=\"external\">readme文档</a></p>\n<p><code>dlog</code>主要是用来记录程序的<code>data log</code>的这样一个Golang package，那什么是<code>data log</code>？这里先简要解释一下。一般程序运行过程中主要产生两类日志：</p>\n<ul>\n<li><code>status log</code>：主要用于帮助调试、定位程序Bug、或者找到性能瓶颈，比如方法调用日志、错误日志、方法执行时间日志等</li>\n<li><code>data log</code>：主要用于记录用户行为，收集的<code>data log</code>用于后期的个性化搜索、智能推荐等，比如搜索行为、点击行为等</li>\n</ul>\n<h1 id=\"对dlog的一些非功能性需求\"><a href=\"#对dlog的一些非功能性需求\" class=\"headerlink\" title=\"对dlog的一些非功能性需求\"></a>对<code>dlog</code>的一些非功能性需求</h1><ul>\n<li>每一种类型的<code>data log</code>对应一种<code>logger</code>，一个<code>logger</code>只能记录对应类型的<code>data log</code></li>\n<li><code>dlog</code>内部发生的错误，不能影响调用的程序代码的执行<ul>\n<li>应考虑到AWS Kinesis服务响应慢或者不可用的场景（暂未实现）</li>\n</ul>\n</li>\n<li>程序代码中通过调用<code>dlog</code>的方法记录<code>data log</code>，<code>dlog</code>的方法不能阻塞调用的程序代码的执行（这一点<code>dlog</code>暂时未满足要求，需要后期改进）</li>\n<li>AWS Kinesis提供两个API接收数据，一个是<a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html\" target=\"_blank\" rel=\"external\">PutRecord</a>, 另一个是<a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html\" target=\"_blank\" rel=\"external\">PutRecords</a>，为了减少对Kinesis的调用次数，采用后者批量发送<code>data log</code><ul>\n<li><code>PutRecords</code>对一次调用的<code>record</code>数量限制是<code>500</code>，每个<code>record</code>大小必须小于等于1MB，整个<code>request</code>的大小必须小于等于5MB</li>\n<li>每一个Kinesis Stream能够承受的最大TPS和写数据量，与这个stream拥有的shard的数量有关。一个shard支持最大TPS是<code>1000 records per second</code>， 写数据量是<code>1MB per second</code></li>\n</ul>\n</li>\n<li>通过单元测试保证功能正确性</li>\n</ul>\n<h1 id=\"碰到问题及解决方案\"><a href=\"#碰到问题及解决方案\" class=\"headerlink\" title=\"碰到问题及解决方案\"></a>碰到问题及解决方案</h1><h2 id=\"何时使用panic，何时使用return-error\"><a href=\"#何时使用panic，何时使用return-error\" class=\"headerlink\" title=\"何时使用panic，何时使用return error\"></a>何时使用<code>panic</code>，何时使用<code>return error</code></h2><p>先看看<code>panic</code>和<code>return error</code>的执行机制。</p>\n<h3 id=\"panic的执行机制\"><a href=\"#panic的执行机制\" class=\"headerlink\" title=\"panic的执行机制\"></a><code>panic</code>的执行机制</h3><p><code>panic</code>会中断当前<code>goroutine</code>的执行，如果不对<code>panic</code>的错误进行<code>recover</code>，那么整个进程都会崩溃。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        log.Panic(<span class=\"string\">\"some error before work2\"</span>)</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"do some work2\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    time.Sleep(time.Second)</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"do some work1\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/off1y9tBax\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<p>可以通过<code>recover</code>捕捉当前<code>goroutine</code>中<code>panic</code>的错误并进行错误处理，整个进程的正常运行不受影响。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                log.Printf(<span class=\"string\">\"error: %v\"</span>, err)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;()</div><div class=\"line\">        log.Panic(<span class=\"string\">\"some error before work2\"</span>)</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"do some work2\"</span>)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    time.Sleep(time.Second)</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"do some work1\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/RLWyb813Uw\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<p>我们可以发现Go语言中的<code>panic</code>、<code>recover</code>机制，和Java、.NET中的<code>throw</code>、<code>try...catch</code>机制非常类似。</p>\n<h3 id=\"return-error的执行机制\"><a href=\"#return-error的执行机制\" class=\"headerlink\" title=\"return error的执行机制\"></a><code>return error</code>的执行机制</h3><p><code>return error</code>是利用Go语言函数的多值返回的特性，通过函数的其中一个返回值（一般是第一个或者最后一个），向<code>caller</code>返回函数执行过程中产生的异常，其它值返回执行结果。</p>\n<p>这种方式的问题，主要在于：如果函数调用层次比较多，每一层函数都通过<code>return error</code>方式返回错误，都需要处理被调用函数的<code>return error</code>，增加代码复杂度。对于无法恢复的错误也没有必要一层一层往上抛，直接<code>panic/recover</code>更加简洁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"errors\"</span></div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> R <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"an error\"</span>), <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    err, r := f1()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> err, <span class=\"literal\">nil</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, r</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f3</span><span class=\"params\">()</span> <span class=\"params\">(error, *R)</span></span> &#123;</div><div class=\"line\">    err, r := f2()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> err, <span class=\"literal\">nil</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, r</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    err, _ := f3()</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        log.Print(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/GhE5JpzZvn\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<h3 id=\"dlog错误处理原则\"><a href=\"#dlog错误处理原则\" class=\"headerlink\" title=\"dlog错误处理原则\"></a><code>dlog</code>错误处理原则</h3><p>使用<code>panic</code>还是<code>return error</code>的方式处理错误，要区分不同的场景。重要是不论使用<code>panic</code>还是<code>return error</code>，都需要符合架构上更高层面错误处理需求。</p>\n<p><code>dlog</code>是一个日志记录<code>package</code>，暴露给其它程序调用的方法如下：</p>\n<ul>\n<li><code>func NewLogger(example interface{}, opts *Options) (*Logger, error)</code></li>\n<li><code>func (l *Logger) Log(msg interface{}) error</code></li>\n</ul>\n<p>这两个方法的使用场景并不一样，错误处理原则也不完全一致：</p>\n<ul>\n<li><code>NewLogger</code>方法一般是在程序初始化的时候调用，用于创建记录程序运行过程中产生的data log的记录器。通过<code>NewLogger</code>创建一个<code>logger</code>的时候，如果传入参数不正确，使用<code>panic</code>方式，在上层调用程序不处理错误情况下会导致程序崩溃，所以使用<code>return error</code>方式向<code>caller</code>报告错误。大多数Golang package也是按此原则处理。</li>\n<li>上层程序调用<code>logger.Log</code>时，如果<code>Log</code>方法内部发生的错误，不能影响调用的代码的执行，所以这里绝对不能用<code>panic</code>方式抛出错误。日志记录是辅助功能，如果日志记录行为失败，导致业务逻辑代码执行不下去，估计负责业务逻辑开发的工程师会和你拼命。<ul>\n<li><code>logger.Log</code>可以使用<code>return error</code>方式返回<code>msg</code>校验类的错误</li>\n<li><code>logger.Log</code>发送日志采用的是异步批量方式向AWS Kinesis发送数据，向AWS Kinesis发送数据相关的错误无法通过<code>panic</code>或者<code>return error</code>方式直接报告给调用程序。最好的方式是允许调用程序向<code>logger</code>注册发送失败处理的<code>handler</code>，出现发送失败错误时执行<code>handler</code>逻辑。（暂未实现）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现一个logger只能接收对应类型的data-log\"><a href=\"#如何实现一个logger只能接收对应类型的data-log\" class=\"headerlink\" title=\"如何实现一个logger只能接收对应类型的data log\"></a>如何实现一个<code>logger</code>只能接收对应类型的<code>data log</code></h2><p>要实现一个<code>logger</code>只能接收对应类型的<code>data log</code>，主要思路如下：</p>\n<ul>\n<li><code>Logger</code>的定义中通过属性<code>msgType reflect.Type</code>记住能够接受的消息类型</li>\n<li>通过<code>NewLogger</code>方法创建<code>logger</code>的时候，指定<code>logger</code>可以接受的消息类型</li>\n<li><code>Log</code>方法中首先校验<code>msg</code>的类型是否是创建<code>logger</code>时指定的类型</li>\n</ul>\n<p>以下是相关代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// msgType保存Logger能够接受的消息类型</span></div><div class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    msgType    reflect.Type</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获得msg的reflect.Type</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">msgType</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(reflect.Type, error)</span></span> &#123;</div><div class=\"line\">    t := reflect.TypeOf(msg)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> t.Kind() == reflect.Ptr &#123;</div><div class=\"line\">        t = t.Elem()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> t.Kind() != reflect.Struct &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"dlog message must be either *struct or struct\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> t, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLogger</span><span class=\"params\">(example <span class=\"keyword\">interface</span>&#123;&#125;, opts *Options)</span> <span class=\"params\">(*Logger, error)</span></span> &#123;</div><div class=\"line\">    t, e := msgType(example)</div><div class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, e</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    l := &amp;Logger&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        msgType:    t,</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> l, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> t, e := msgType(msg); e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> !t.AssignableTo(l.msgType) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"parameter (%+v) not assignable to %v\"</span>, msg, l.msgType)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Log</code>方法中为什么要用<code>AssignableTo</code>，而不是直接判断两个类型相等。其实都可以，在<code>msg</code>是<code>struct</code>情况下，<code>AssignableTo</code>返回<code>True</code>意味着两个类型相等。参考下面的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"log\"</span></div><div class=\"line\">    <span class=\"string\">\"reflect\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">type</span> Fn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></div><div class=\"line\">    <span class=\"title\">id</span> := <span class=\"title\">func</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> zeroFn Fn</div><div class=\"line\">    log.Println(reflect.TypeOf(id).AssignableTo(reflect.TypeOf(zeroFn)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></div><div class=\"line\">    mi := <span class=\"number\">1</span></div><div class=\"line\">    log.Println(reflect.TypeOf(<span class=\"number\">2</span>).AssignableTo(reflect.TypeOf(mi)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">type</span> S1 <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        name <span class=\"keyword\">string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">type</span> S2 S1</div><div class=\"line\"></div><div class=\"line\">    s1 := S1&#123;</div><div class=\"line\">        name: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    s2 := S2&#123;</div><div class=\"line\">        name: <span class=\"string\">\"ethan\"</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// s2 = s1\t// if uncomment this line, will report \"cannot use s1 (type S1) as type S2 in assignment\" when compile</span></div><div class=\"line\">    log.Println(reflect.TypeOf(s1).AssignableTo(reflect.TypeOf(s2)))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>执行上面代码请点击<a href=\"https://play.golang.org/p/eDmzxW-ayk\" target=\"_blank\" rel=\"external\">这里</a></em></p>\n<h2 id=\"如何实现批量发送data-log\"><a href=\"#如何实现批量发送data-log\" class=\"headerlink\" title=\"如何实现批量发送data log\"></a>如何实现批量发送<code>data log</code></h2><p>要实现批量发送，首先我们可以想到应该要有个<code>buffer</code>用来收集一定数量的的<code>message</code>，等待<code>buffer</code>中的数据积累到一定程度后，一次性发送给AWS Kinesis。设计<code>buffer</code>结构不难，难点在于如何解决多线程(goroutine)并发读写<code>buffer</code>的问题，主要的解决方案有两种：</p>\n<ul>\n<li>基于锁机制实现对<code>buffer</code>访问控制</li>\n<li>基于<code>channel</code>实现对<code>buffer</code>的访问控制</li>\n</ul>\n<p>前者对于有Java、.NET等语言的并发编程经验的工程师来说，非常熟悉。而后者则体现了CSP(Communicating Sequential Processes)并发编程模型的优势。</p>\n<img src=\"/2016/04/20/experiences-about-develop-dlog/channel.png\" alt=\"CSP Model\" title=\"CSP Model\">\n<p><code>dlog</code>的<code>Log</code>方法把收到的<code>msg</code>写到名字叫<code>buffer</code>的<code>channel</code>中，另外一个单独的<code>goroutine</code>在<code>channel</code>的另一头收集编码后的日志信息，然后保存到<code>buf := make([][]byte, 0)</code>中。当<code>buf</code>中的数据量要达到一次向AWS Kinesis发送的最大量时，调用<code>flush</code>方法向AWS Kinesis发送数据。由于只有一个<code>goroutine</code>对<code>buf</code>进行访问，所以不需要通过锁机制控制对<code>buf</code>的读写。</p>\n<!--\ndigraph G {\n    fontname=\"Microsoft YaHei\";\n    fontsize=10;\n    rankdir = LR;\n\n    \"buffer channel\" [shape=box];\n\n    \"Logger.Log goroutine 1\" -> \"buffer channel\";\n    \"Logger.Log goroutine 2\" -> \"buffer channel\";\n    \"Logger.Log goroutine 3\" -> \"buffer channel\";\n    \"buffer channel\" -> \"sync goroutine\";\n    \"sync goroutine\" -> \"AWS Kinesis Stream\";\n}\n-->\n<!-- ![Thread Model](http://g.gravizo.com/g?digraph%20G%20%7B%0A%20%20%20%20fontname%3D%22Microsoft%20YaHei%22%3B%0A%20%20%20%20fontsize%3D10%3B%0A%20%20%20%20rankdir%20%3D%20LR%3B%0A%0A%20%20%20%20%22buffer%20channel%22%20%5Bshape%3Dbox%5D%3B%0A%0A%20%20%20%20%22Logger.Log%20goroutine%201%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%202%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22Logger.Log%20goroutine%203%22%20-%3E%20%22buffer%20channel%22%3B%0A%20%20%20%20%22buffer%20channel%22%20-%3E%20%22sync%20goroutine%22%3B%0A%20%20%20%20%22sync%20goroutine%22%20-%3E%20%22AWS%20Kinesis%20Stream%22%3B%0A%20%7D) -->\n<img src=\"/2016/04/20/experiences-about-develop-dlog/use_channel.png\" alt=\"使用Channel\" title=\"使用Channel\">\n<p>具体代码实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLogger</span><span class=\"params\">(example <span class=\"keyword\">interface</span>&#123;&#125;, opts *Options)</span> <span class=\"params\">(*Logger, error)</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">go</span> l.sync()    <span class=\"comment\">// 启动sync goroutine</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l, <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    en := encode(msg)       <span class=\"comment\">// 对msg进行编码</span></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> l.buffer &lt;- en:    <span class=\"comment\">// 向buffer channel写入编码后的msg</span></div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    buf := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>) <span class=\"comment\">// 用于收集从buffer channel读取的日志数据</span></div><div class=\"line\">    bufSize := <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> msg := &lt;-l.buffer:</div><div class=\"line\">            <span class=\"keyword\">if</span> bufSize+<span class=\"built_in\">len</span>(msg)+partitionKeySize &gt;= maxBatchSize &#123;  <span class=\"comment\">// 如果buf的大小接近一次批量发送的最大数据量</span></div><div class=\"line\">                l.flush(&amp;buf, &amp;bufSize)                             <span class=\"comment\">// 向AWS Kinesis批量发送数据</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            buf = <span class=\"built_in\">append</span>(buf, msg)                                  <span class=\"comment\">// 将从buffer channel读取日志数据保存到buf中</span></div><div class=\"line\">            bufSize += <span class=\"built_in\">len</span>(msg) + partitionKeySize</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"如何实现对Logger-Log方法的调用超时机制\"><a href=\"#如何实现对Logger-Log方法的调用超时机制\" class=\"headerlink\" title=\"如何实现对Logger.Log方法的调用超时机制\"></a>如何实现对<code>Logger.Log</code>方法的调用超时机制</h2><p>如果一个IO操作耗时较长，并且调用比较频繁的情况下，不仅会阻塞<code>caller</code>的执行，还会消耗大量系统资源。我们通常会使用超时机制，避免程序长时间等待或者对系统资源大量占用。</p>\n<p><code>Logger.Log</code>方法利用Go语言<code>channel</code>非常简洁的实现了超时机制：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Log</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> timeout &lt;-<span class=\"keyword\">chan</span> time.Time</div><div class=\"line\">    <span class=\"keyword\">if</span> l.WriteTimeout &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">        timeout = time.After(l.WriteTimeout)    <span class=\"comment\">// 初始化时长为l.WriteTimeout的计时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> l.buffer &lt;- en:</div><div class=\"line\">        <span class=\"keyword\">case</span> &lt;-timeout: <span class=\"comment\">// 如果上一行代码一直阻塞，timeout计时器时间到点后会触发执行当前case下的代码</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"dlog writes %+v timeout after %v\"</span>, msg, l.WriteTimeout)</div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对比Java、.NET语言中超时机制的实现方法，Go语言的实现简洁的令人发指：</p>\n<ul>\n<li>C#<ul>\n<li><a href=\"http://weblogs.asp.net/israelio/159985\" target=\"_blank\" rel=\"external\">Implementing .Net method timeout</a></li>\n<li><a href=\"http://stackoverflow.com/questions/18646650/how-to-implement-task-async-for-a-timer-in-c\" target=\"_blank\" rel=\"external\">How to implement Task Async for a timer in C#?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10143980/implementing-a-timeout-in-c-sharp\" target=\"_blank\" rel=\"external\">Implementing a timeout in c#</a></li>\n</ul>\n</li>\n<li>Java<ul>\n<li><a href=\"http://www.coderanch.com/t/232213/threads/java/implement-timeout-threads\" target=\"_blank\" rel=\"external\">How to implement timeout using threads</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2275443/how-to-timeout-a-thread\" target=\"_blank\" rel=\"external\">How to timeout a thread</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS-Kinesis\"><a href=\"#如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS-Kinesis\" class=\"headerlink\" title=\"如何在logger没有收到新msg情况下，保证buf中的数据依然会定期发送给AWS Kinesis\"></a>如何在<code>logger</code>没有收到新<code>msg</code>情况下，保证<code>buf</code>中的数据依然会定期发送给AWS Kinesis</h2><p><code>dlog</code>在<code>Logger.sync()</code>方法中通过一个定时器，定期将<code>buf</code>中数据发送给AWS Kinesis。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> l.SyncPeriod &lt;= <span class=\"number\">0</span> &#123;</div><div class=\"line\">        l.SyncPeriod = time.Second</div><div class=\"line\">    &#125;</div><div class=\"line\">    ticker := time.NewTicker(l.SyncPeriod)  <span class=\"comment\">// l.SyncPeriod是定期发送的数据的时间间隔，ticker定时触发器</span></div><div class=\"line\"></div><div class=\"line\">    buf := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>)</div><div class=\"line\">    bufSize := <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;  <span class=\"comment\">// 无限循环保证sync goroutine一直工作</span></div><div class=\"line\">        <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> msg := &lt;-l.buffer:</div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> &lt;-ticker.C: <span class=\"comment\">// ticker.C的类型是&lt;-chan Time，每隔l.SyncPeriod时间会触发执行当前case的代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> bufSize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">                l.flush(&amp;buf, &amp;bufSize)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过<code>ticker</code>，<code>dlog</code>保证了即使没有收到新的<code>msg</code>的时候，保存在<code>buf</code>中的数据最长<code>l.SyncPeriod</code>时间后也会发送给AWS Kinesis。</p>\n<p>互联网产品的生产环境的上线，通常的做法是，将现有服务分组，然后交替切流量、升级。如果没有类似的机制，那么在服务程序断掉流量，没有收到新的访问时候，保存在内存中的数据就不会发送出去，升级时就可能导致数据丢失。</p>\n<h2 id=\"如何向程序外部暴露运行指标\"><a href=\"#如何向程序外部暴露运行指标\" class=\"headerlink\" title=\"如何向程序外部暴露运行指标\"></a>如何向程序外部暴露运行指标</h2><p>Go语言的官方Package <code>expvar</code>提供一种标准化的接口，允许程序暴露公开访问的变量。<code>expvar</code>通过HTTP地址<code>/debug/vars</code>提供访问入口，并以JSON格式展示这些变量。下面是关于<code>expvar</code>常见用法的一个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"expvar\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span></div><div class=\"line\">    <span class=\"string\">\"sync\"</span></div><div class=\"line\">    <span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Stats is used to collect runtime metrics</span></div><div class=\"line\"><span class=\"keyword\">type</span> Stats <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    sync.Mutex</div><div class=\"line\">    TotalHit  <span class=\"keyword\">int</span></div><div class=\"line\">    ErrorNums <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">IncreaseTotalHit</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    s.TotalHit += i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">IncreaseErrorNums</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    s.ErrorNums += i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stats)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    s.Lock()</div><div class=\"line\">    <span class=\"keyword\">defer</span> s.Unlock()</div><div class=\"line\"></div><div class=\"line\">    b, err := json.Marshal(*s)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;&#125;\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">    stats *Stats</div><div class=\"line\">    hits  *expvar.Map</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    expvar.Publish(<span class=\"string\">\"now\"</span>, expvar.Func(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> time.Now().Format(<span class=\"string\">\"\\\"2006-01-02 15:04:05\\\"\"</span>)</div><div class=\"line\">    &#125;))</div><div class=\"line\"></div><div class=\"line\">    stats = &amp;Stats&#123;&#125;</div><div class=\"line\">    expvar.Publish(<span class=\"string\">\"stats\"</span>, stats)</div><div class=\"line\"></div><div class=\"line\">    hits = expvar.NewMap(<span class=\"string\">\"hits\"</span>).Init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">homeHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    p := r.URL.Path[<span class=\"number\">1</span>:]</div><div class=\"line\">    hits.Add(p, <span class=\"number\">1</span>)</div><div class=\"line\">    stats.IncreaseTotalHit(<span class=\"number\">1</span>)</div><div class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"Hey! I love %s! hits: %v\\n\"</span>, p, hits.Get(p))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">errHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    stats.IncreaseErrorNums(<span class=\"number\">1</span>)</div><div class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"Error Nums: %v\\n\"</span>, stats.ErrorNums)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/err\"</span>, errHandler)</div><div class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, homeHandler)</div><div class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>按照如下步骤测试运行效果：</p>\n<ul>\n<li><code>go run expvarexample.go</code>运行例子代码</li>\n<li>在浏览器中访问<code>http://localhost:8080/ethan</code></li>\n<li>在浏览器中访问<code>http://localhost:8080/err</code></li>\n<li>在浏览器中访问<code>http://localhost:8080/debug/vars</code>，得到如下结果：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"cmdline\": [\"/var/folders/jf/65ft181j33j_d75ktgv67bsc0000gn/T/go-build467453980/command-line-arguments/_obj/exe/expvarsample\"],</div><div class=\"line\">    \"hits\": &#123;</div><div class=\"line\">        \"ethan\": 1,</div><div class=\"line\">        \"favicon.ico\": 2</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"memstats\": &#123; ... &#125;,</div><div class=\"line\">    \"now\": \"\\\"2016-04-19 20:17:40\\\"\",</div><div class=\"line\">    \"stats\": &#123;</div><div class=\"line\">        \"TotalHit\":3,</div><div class=\"line\">        \"ErrorNums\":1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://github.com/divan/expvarmon\" target=\"_blank\" rel=\"external\">expvarmon</a>是一个帮助查看<code>expvar</code>暴露运行指标的工具，用法如下：</p>\n<ul>\n<li>安装：<code>go get github.com/divan/expvarmon</code></li>\n<li>运行：<code>expvarmon -ports=&quot;8080&quot; -vars=&quot;hits.ethan,stats.TotalHit,stats.ErrorNums,now&quot;</code></li>\n<li>效果如下：<img src=\"/2016/04/20/experiences-about-develop-dlog/expvarmon_screen.png\" alt=\"expvarmon screen\" title=\"expvarmon screen\">\n</li>\n</ul>\n<p><code>dlog</code>使用<code>expvar</code>向程序外部（比如监控程序）暴露运行指标，目前<code>dlog</code>中定义的运行指标包括：</p>\n<ul>\n<li><code>writtenRecords</code>: 成功写到AWS Kinesis的<code>msg</code>数量</li>\n<li><code>writtenBatches</code>: 成功调用AWS Kinesis批量写数据API的次数</li>\n<li><code>failedRecords</code>: 写到AWS Kinesis失败的<code>msg</code>数量</li>\n<li><code>tooBigMesssages</code>: 编码后体积过大(加上partitionKeySize大于1MB)的<code>msg</code>数量</li>\n</ul>\n<p>未来还需要根据运维的需求对运行指标进行调整，当前的用法也有一些问题，后期需要重构。</p>\n<h2 id=\"如何在单元测试中实现Setup和TearDown\"><a href=\"#如何在单元测试中实现Setup和TearDown\" class=\"headerlink\" title=\"如何在单元测试中实现Setup和TearDown\"></a>如何在单元测试中实现<code>Setup</code>和<code>TearDown</code></h2><p>Go语言提供一种<strong>轻量级</strong>的单元测试框架（无需第三方工具或者程序包）。通过使用<code>go test</code>命令和<code>testing</code> package，可以非常快速的实现单元测试。先借用官方文档中的<a href=\"http://docs.studygolang.com/doc/code.html#Testing\" target=\"_blank\" rel=\"external\">例子</a>回顾一下Go单元测试框架的用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$GOPATH/src/github.com/user/stringutil/reverse_test.go</span></div><div class=\"line\"><span class=\"keyword\">package</span> stringutil</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestReverse</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    cases := []<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">        in, want <span class=\"keyword\">string</span></div><div class=\"line\">    &#125;&#123;</div><div class=\"line\">        &#123;<span class=\"string\">\"Hello, world\"</span>, <span class=\"string\">\"dlrow ,olleH\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"Hello, 世界\"</span>, <span class=\"string\">\"界世 ,olleH\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>&#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> _, c := <span class=\"keyword\">range</span> cases &#123;</div><div class=\"line\">        got := Reverse(c.in)</div><div class=\"line\">        <span class=\"keyword\">if</span> got != c.want &#123;</div><div class=\"line\">            t.Errorf(<span class=\"string\">\"Reverse(%q) == %q, want %q\"</span>, c.in, got, c.want)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行测试只需要简单的输入命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"keyword\">go</span> test github.com/user/stringutil</div><div class=\"line\">ok  \tgithub.com/user/stringutil <span class=\"number\">0.165s</span></div></pre></td></tr></table></figure>\n<p>很多情况下，要执行单元测试，我们需要依赖一些外部资源，比如已完成初始化数据的数据库、公有云上的一些IaaS服务等。这些依赖资源，我们希望在单元测试执行前，能够自动的被初始化；单元测试完成后，能够自动的被清理。<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a> package就提供这样的支持。通过<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a>，你可以构建一个测试集<code>struct</code>，建立测试集的<code>setup</code>(初始化)/<code>teardown</code>(清理)方法，和最终实现测试用例逻辑的方法。而运行测试，仍然只需要一句简单的<code>go test</code>。</p>\n<p>以下是使用<a href=\"https://github.com/stretchr/testify/suite\" target=\"_blank\" rel=\"external\">testify/suite</a>实现测试集的常见模式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> suite</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"github.com/stretchr/testify/assert\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> SuiteTester <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Include our basic suite logic.</span></div><div class=\"line\">    Suite</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Other properties</span></div><div class=\"line\">    propertyN <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// start of the testing suite, before any tests are run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">SetupSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// end of the testing suite, after all tests have been run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TearDownSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupTest method will be run before every test in the suite.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">SetupTest</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownTest method will be run after every test in the suite.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TearDownTest</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a test method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TestOne</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// another test method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(suite *SuiteTester)</span> <span class=\"title\">TestTwo</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TestRunSuite will be run by the 'go test' command, so within it, we</span></div><div class=\"line\"><span class=\"comment\">// can run our suite using the Run(*testing.T, TestingSuite) function.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRunSuite</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    suiteTester := <span class=\"built_in\">new</span>(SuiteTester)</div><div class=\"line\">    Run(t, suiteTester)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>dlog</code>中为了测试<code>Logger.Log</code>方法能否正常工作，按照上面的模式编写了相应的测试代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> dlog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> WriteLogSuiteTester <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    suite.Suite</div><div class=\"line\"></div><div class=\"line\">    options     *Options</div><div class=\"line\">    seachLogger *Logger</div><div class=\"line\">    clickLogger *Logger</div><div class=\"line\">    streamNames []<span class=\"keyword\">string</span> <span class=\"comment\">// save the created AWS Kinesis Streams, which will be removed in TearDownSuite()</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The SetupSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// start of the testing suite, before any tests are run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">SetupSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create stream 1</span></div><div class=\"line\">    err = s.seachLogger.kinesis.CreateStream(s.seachLogger.streamName, testingShardCount)</div><div class=\"line\">    s.Nil(err)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create stream 2</span></div><div class=\"line\">    err = s.clickLogger.kinesis.CreateStream(s.clickLogger.streamName, testingShardCount)</div><div class=\"line\">    s.Nil(err)</div><div class=\"line\"></div><div class=\"line\">    s.streamNames = []<span class=\"keyword\">string</span>&#123;s.seachLogger.streamName, s.clickLogger.streamName&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123; <span class=\"comment\">// waiting created stream's status to be active</span></div><div class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)</div><div class=\"line\">        resp1, err1 := s.seachLogger.kinesis.DescribeStream(s.seachLogger.streamName)</div><div class=\"line\">        s.Nil(err1)</div><div class=\"line\"></div><div class=\"line\">        resp2, err2 := s.seachLogger.kinesis.DescribeStream(s.clickLogger.streamName)</div><div class=\"line\">        s.Nil(err2)</div><div class=\"line\"></div><div class=\"line\">        status1 := strings.ToLower(<span class=\"keyword\">string</span>(resp1.StreamStatus))</div><div class=\"line\">        status2 := strings.ToLower(<span class=\"keyword\">string</span>(resp2.StreamStatus))</div><div class=\"line\">        <span class=\"keyword\">if</span> status1 == <span class=\"string\">\"active\"</span> &amp;&amp; status2 == <span class=\"string\">\"active\"</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The TearDownSuite method will be run by testify once, at the very</span></div><div class=\"line\"><span class=\"comment\">// end of the testing suite, after all tests have been run.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">TearDownSuite</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> s.streamNames == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(s.streamNames) == <span class=\"number\">0</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> _, streamName := <span class=\"keyword\">range</span> s.streamNames &#123;</div><div class=\"line\">        err := s.seachLogger.kinesis.DeleteStream(streamName)</div><div class=\"line\">        s.Nil(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *WriteLogSuiteTester)</span> <span class=\"title\">TestWriteLog</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">// Recover if panicking to make sure TearDownSuite will be executed</span></div><div class=\"line\">        <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            s.Fail(fmt.Sprint(r))</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRunWriteLogSuite</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    suiteTester := <span class=\"built_in\">new</span>(WriteLogSuiteTester)</div><div class=\"line\">    suite.Run(t, suiteTester)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>很多场景下，测试程序自动创建依赖的资源需要运维部门的授权，所以实现前有必要先和运维部门沟通。</li>\n<li>云环境下，出于安全上的考虑，需要对创建、删除测试资源的账户管理严格管理<ul>\n<li>账户信息不能写在可以公开访问的测试代码、配置文件中</li>\n<li>只给账户分配必要资源的最小权限</li>\n<li>为账户能够创建的资源设定配额</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现kinesisMock\"><a href=\"#如何实现kinesisMock\" class=\"headerlink\" title=\"如何实现kinesisMock\"></a>如何实现<code>kinesisMock</code></h2><p>上一节我们提到在测试执行前初始化依赖资源，现实场景中，并不是任何情况下都能够获得依赖的测试资源，或者测试资源也会出现不可用的情况。通过Mock技术，可以减少测试代码对其它资源（或模块）的依赖。</p>\n<p><code>dlog</code>的测试代码中，首先定义了一个<code>KinesisInterface</code>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> KinesisInterface <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    PutRecords(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry) (resp *kinesis.PutRecordsResponse, err error)</div><div class=\"line\">    CreateStream(name <span class=\"keyword\">string</span>, shardCount <span class=\"keyword\">int</span>) error</div><div class=\"line\">    DescribeStream(name <span class=\"keyword\">string</span>) (resp *kinesis.StreamDescription, err error)</div><div class=\"line\">    DeleteStream(name <span class=\"keyword\">string</span>) error</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>KinesisInterface</code>包含了<code>dlog</code>用到的<a href=\"https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/kinesis/kinesis</a>的所有方法。因为Go语言<code>interface</code>实现<strong>非侵入式</strong>的特点，<a href=\"https://github.com/AdRoll/goamz/blob/master/kinesis/kinesis.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/kinesis/kinesis</a>自动实现了<code>KinesisInterface</code>，我们再定义一个<code>kinesisMock</code>实现<code>KinesisInterface</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> kinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Mapping from steam name to batches of batches</span></div><div class=\"line\">    storage <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][][]kinesis.PutRecordsRequestEntry</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// simulate lantency that sync to Kinesis</span></div><div class=\"line\">    putRecordLatency time.Duration</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// created streams' names</span></div><div class=\"line\">    streamNames []<span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// lock to solve concurrent call</span></div><div class=\"line\">    lock sync.RWMutex</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newKinesisMock</span><span class=\"params\">(putRecordsLatency time.Duration)</span> *<span class=\"title\">kinesisMock</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;kinesisMock&#123;</div><div class=\"line\">        storage:          <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][][]kinesis.PutRecordsRequestEntry),</div><div class=\"line\">        putRecordLatency: putRecordsLatency,</div><div class=\"line\">        streamNames:      <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">CreateStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>, shardCount <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">DescribeStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"params\">(resp *kinesis.StreamDescription, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">DeleteStream</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后，把业务代码中所有类型<code>kinesis</code>的变量，替换成<code>KinesisInterface</code>类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    kinesis    KinesisInterface</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码中，在构造<code>Logger</code>时传入<code>kinesisMock</code>，而不是真实的<code>kinesis</code>，这样就做到了“狸猫换太子”。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestLoggingToMockKinesis</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">    assert := assert.New(t)</div><div class=\"line\"></div><div class=\"line\">    l, e := NewLogger(&amp;impression&#123;&#125;, &amp;Options&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        UseMockKinesis: <span class=\"literal\">true</span>,</div><div class=\"line\">        MockKinesis:    newKinesisMock(<span class=\"number\">0</span>),</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"如何模拟AWS-Kinesis响应慢或者不可用\"><a href=\"#如何模拟AWS-Kinesis响应慢或者不可用\" class=\"headerlink\" title=\"如何模拟AWS Kinesis响应慢或者不可用\"></a>如何模拟AWS Kinesis响应慢或者不可用</h2><p><code>kinesisMock</code>完全是我们“虚构”出来的一个<code>kinesis</code>，在它的基础上，我们完全可以模拟响应慢或者不可用的情况。</p>\n<p>上一节中，不知道大家注意到没有，<code>kinesisMock</code>有个属性叫<code>putRecordLatency</code>，用来模拟调用<code>PutRecords</code>方法的延迟时间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> kinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// simulate lantency that sync to Kinesis</span></div><div class=\"line\">    putRecordLatency time.Duration</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *kinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    time.Sleep(mock.putRecordLatency) <span class=\"comment\">// 模拟延迟</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>模拟不可用的<code>kinesis</code>则重新定义了一个<code>brokenKinesisMock</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> brokenKinesisMock <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    *kinesisMock</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newBrokenKinesisMock</span><span class=\"params\">()</span> *<span class=\"title\">brokenKinesisMock</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;brokenKinesisMock&#123;</div><div class=\"line\">        kinesisMock: newKinesisMock(<span class=\"number\">0</span>),</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mock *brokenKinesisMock)</span> <span class=\"title\">PutRecords</span><span class=\"params\">(streamName <span class=\"keyword\">string</span>, records []kinesis.PutRecordsRequestEntry)</span> <span class=\"params\">(resp *kinesis.PutRecordsResponse, err error)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"Kinesis is broken\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>kinesisMock</code>是<code>brokenKinesisMock</code>的嵌入<code>struct</code>，<code>brokenKinesisMock</code>会自动拥有<code>kinesisMock</code>的所有公开方法，这样也就实现了<code>KinesisInterface</code>。</p>\n<h2 id=\"提交到代码库中的测试代码是否可以保留log-Print\"><a href=\"#提交到代码库中的测试代码是否可以保留log-Print\" class=\"headerlink\" title=\"提交到代码库中的测试代码是否可以保留log.Print\"></a>提交到代码库中的测试代码是否可以保留<code>log.Print</code></h2><p>结论是“不可以”，原因总结如下：</p>\n<ul>\n<li>测试代码中的<code>log.Print</code>，一般用于调试代码，或者在<code>stdout</code>打印出一些信息帮助判断测试失败原因。不论哪种目的，这样的代码目的都仅仅是为了辅助开发，而不应该出现在最终交付的产品代码中。</li>\n<li><code>go test</code>命令会在控制台输出失败的测试方法，如果加上<code>-v</code>标志会打印出所有测试方法的执行结果，<code>log.Print</code>会影响执行结果的展示效果。团队合作开发，如果每个人都在测试代码中加上自己的<code>log.Print</code>，那么控制台打印出来的测试结果就没法看了。</li>\n</ul>\n<h1 id=\"踩过的一些坑\"><a href=\"#踩过的一些坑\" class=\"headerlink\" title=\"踩过的一些坑\"></a>踩过的一些坑</h1><ul>\n<li><a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_CreateStream.html\" target=\"_blank\" rel=\"external\">AWS Kinesis API - CreateStream</a>是异步创建Stream，而且耗时10+秒，才能完成一个Stream的创建。开始以为是同步创建，结果执行测试逻辑的时候总是出错。</li>\n<li><a href=\"https://github.com/AdRoll/goamz/blob/master/aws/regions.go\" target=\"_blank\" rel=\"external\">github.com/AdRoll/goamz/aws/regions.go</a>中缺少中国区AWS Kinesis的URL地址，调用中国区AWS Kinesis会出错。</li>\n<li>Travis CI会Kill掉执行时间超过1分钟的CI过程，而不是如它文档中介绍的“10分钟”</li>\n</ul>\n<h1 id=\"未来可以优化的地方\"><a href=\"#未来可以优化的地方\" class=\"headerlink\" title=\"未来可以优化的地方\"></a>未来可以优化的地方</h1><ul>\n<li>发送失败的错误事件机制</li>\n<li>实现Kinesis服务不可用或者响应慢的场景下<code>dlog</code>的容错处理</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://docs.studygolang.com/doc/effective_go.html\" target=\"_blank\" rel=\"external\">Effective Go</a></li>\n<li><a href=\"https://aws.amazon.com/cn/documentation/kinesis/\" target=\"_blank\" rel=\"external\">Amazon Kinesis Documentation</a></li>\n<li><a href=\"http://blog.golang.org/advanced-go-concurrency-patterns\" target=\"_blank\" rel=\"external\">Advanced Go Concurrency Patterns</a></li>\n<li><a href=\"https://github.com/afex/hystrix-go\" target=\"_blank\" rel=\"external\">hystrix-go</a></li>\n</ul>\n<h1 id=\"招聘消息\"><a href=\"#招聘消息\" class=\"headerlink\" title=\"招聘消息\"></a>招聘消息</h1><p>我所在的<a href=\"http://www.augmn.com\" target=\"_blank\" rel=\"external\">奥阁门科技有限公司</a>正在招聘后端、运维工程师，想加入的朋友、或者有朋友可以推荐的都可以联系我(ethancai@qq.com)。</p>\n<img src=\"/2016/04/20/experiences-about-develop-dlog/2016-04-21_07-12-24.png\" alt=\"办公环境1\" title=\"办公环境1\">\n<img src=\"/2016/04/20/experiences-about-develop-dlog/2016-04-21_07-12-40.png\" alt=\"办公环境2\" title=\"办公环境2\">\n<p><strong>后端工程师 / Backend Engineer</strong></p>\n<p>职责</p>\n<ul>\n<li>研讨和设计产品功能特性；</li>\n<li>设计研发系统后端的一个或多个独立服务（micro-service）模块；</li>\n<li>设计研发业务运营管理系统；</li>\n<li>Code Review。</li>\n</ul>\n<p>要求</p>\n<ul>\n<li>有良好的编程习惯和代码风格；</li>\n<li>精通至少一种后台开发语言，包括但不限于Go、Node.js、C++、Python；</li>\n<li>对RESTful、RPC等架构有深刻理解和运用经验；</li>\n<li>有丰富的web service、web app开发经验；使用过著名的开源应用框架，并完整阅读过源代码；</li>\n<li>对Mysql、Redis、MongoDB或同类数据存储技术有丰富的使用经验；</li>\n<li>有提交代码到著名开源库或创建过开源项目者优先；</li>\n<li>能熟练查阅英文技术文档；</li>\n<li>有开放、坦诚的沟通心态，乐于分享；</li>\n<li>5年以上工作经验，3年以上后台系统开发经验。</li>\n</ul>\n<p><strong>高级系统运维工程师 / Senior Ops Engineer</strong></p>\n<p>职责</p>\n<ul>\n<li>负责日常业务系统基础实施（AWS）、网络及各子系统的管理维护。</li>\n<li>负责设计并部署相关应用平台，并提出平台的实施、运行报告。</li>\n<li>负责配合开发搭建测试平台，协助开发设计、推行、实施和持续改进。</li>\n<li>负责相关故障、疑难问题排查处理，编制汇总故障、问题，定期提交汇总报告。</li>\n<li>负责网络监控和应急反应，以确保网络系统有7*24小时的持续运作能力。</li>\n<li>负责日常系统维护，及监控，提供IT方面的服务和支持，保证系统的稳定。</li>\n</ul>\n<p>要求</p>\n<ul>\n<li>深入理解Linux/Unix操作系统并能熟练使用，了解Linux系统内核，有相关操作系统调优经验优先；</li>\n<li>熟悉计算机网络基础知识，了解TCP/IP、HTTP等网络协议；</li>\n<li>熟悉系统服务的管理和维护，例如：Nginx、DNS服务器、NTP服务等；</li>\n<li>熟悉一种或者多种脚本语言，例如：Shell、Python、Perl 、Ruby等；</li>\n<li>熟练掌握Linux管理相关命令行工具，例如：grep、awk、sed、tmux、vim等；</li>\n<li>对数据库系统（MySQL）运维管理有一定的了解；</li>\n<li>熟悉常见分布式系统系统架构部署管理，熟悉基础设施管理、并具有较强的故障排查和解决问题的能力；</li>\n<li>具有 2 年以上中大型互联网系统或亚马逊AWS管理经验者优先；</li>\n<li>有DevOps经验者优先；</li>\n<li>学习能力和沟通能力较强，具有良好的团队协作精神；</li>\n<li>工作中需要胆大心细，具备探索创新精神；</li>\n<li>具有良好的文档编写能力；</li>\n<li>具有一定的英文技术文档阅读能力。</li>\n</ul>\n"},{"title":"1 - Install PHP | Study PHP","date":"2017-05-17T12:00:00.000Z","_content":"\n# Environment\n\n- macOS Sierra Version 10.12.4\n- Xcode: `xcode-select --install`\n- `Homebrew`\n\n# Install PHP\n\n安装PHP：\n\n```sh\n# 快速安装php，参考 https://github.com/Homebrew/homebrew-php\n> brew install brew-php-switcher\n> brew install php56\n\n> which php\n/usr/local/bin/php\n\n> which php-fpm\nlrwxr-xr-x  1 leeco  admin    32B May 17 15:08 /usr/local/bin/php -> ../Cellar/php56/5.6.30_6/bin/php\n```\n\n配置PHP：\n\n```sh\n# 配置 /private/etc/php.ini\n> sudo vim /usr/local/etc/php/5.6/php.ini\n# date.timezone = Asia/Shanghai\n\n> php -i | grep timezone\nDefault timezone => Asia/Shanghai\ndate.timezone => Asia/Shanghai => Asia/Shanghai\n```\n\n安装 PEAR 和 PECL:\n\n```sh\n# 参考 https://jason.pureconcepts.net/2012/10/install-pear-pecl-mac-os-x/\n> curl -O http://pear.php.net/go-pear.phar\n> sudo php -d detect_unicode=0 go-pear.phar\n# Press return\n\n# 安装 intl 扩展，参考 http://note.rpsh.net/posts/2015/10/07/installing-php-intl-extension-os-x-el-capitan/\n> sudo pear channel-update pear.php.net\n> sudo pecl channel-update pecl.php.net\n> sudo pear upgrade-all\n```\n\n## 如果要安装多个版本的PHP\n\n```sh\n# 用于在不同版本的php之间切换，参考 https://github.com/philcook/brew-php-switcher\n> brew unlink php56\n> brew install php71\n\n> brew-php-switcher 56 -s # 切回 php 5.6\n```\n\n# Install Composer\n\n```sh\n> brew install composer\n\n> composer\n```\n\n{% asset_img study-php-and-symfony-on-mac-os-a5831.png %}\n\n# Install PHP Extension\n\n## Install `intl`\n\n安装\n\n```sh\n> brew install autoconf\n> brew install icu4c\n> brew install php56-intl   # /usr/local/etc/php/5.6/conf.d/ext-intl.ini was created\n```\n\n检查是否安装成功：\n\n```\n> php -m | grep intl # 正常会包含 intl\n```\n\n## Install `OPcache`\n\n```sh\n> brew install php56-opcache\n\n> brew info php56-opcache\n...\nTo finish installing opcache for PHP 5.6:\n  * /usr/local/etc/php/5.6/conf.d/ext-opcache.ini was created,\n    do not forget to remove it upon extension removal.\n  * Validate installation via one of the following methods:\n...\n\n> php -m | grep OPcache  # 检查 OPcache 是否已生效\n```\n\n# Install `Xdebug`\n\n安装：\n\n```sh\n> brew install php56-xdebug\n...\nTo finish installing xdebug for PHP 5.6:\n  * /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini was created,\n    do not forget to remove it upon extension removal.\n  * Validate installation via one of the following methods:\n...\n```\n\nThe Xdebug extension will be enabled per default after the installation, additional configuration of the extension should be done by adding a custom ini-file to `/usr/local/etc/php/<php-version>/conf.d/`.\n\n配置：\n\n```\n> sudo echo 'xdebug.remote_enable=1\nxdebug.remote_host=127.0.0.1\nxdebug.remote_port=9000\nxdebug.profiler_enable=1\nxdebug.profiler_output_dir=\"/tmp/xdebug-profiler-output\"' >> /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini\n```\n\n安装`xdebug-osx`（`xdebug`开关工具）：\n\n```sh\n> brew install xdebug-osx\n...\nSignature:\n  xdebug-toggle <on | off> [--no-server-restart]\n\nUsage:\n  xdebug-toggle         # outputs the current status\n  xdebug-toggle on      # enables xdebug\n  xdebug-toggle off     # disables xdebug\n\nOptions:\n  --no-server-restart   # toggles xdebug without restarting apache or php-fpm\n...\n```\n\n# Use PHPStorm as IDE\n\n## Config Language & Frameworks\n\n打开`Preferences > Languages & Frameworks > PHP`\n\n{% asset_img study-php-and-symfony-on-mac-os-0c6a2.png %}\n\n添加CLI Intepreter\n\n{% asset_img study-php-and-symfony-on-mac-os-2aa39.png %}\n\n\n## Config `Xdebug`\n\n打开`Preferences > Languages & Frameworks > PHP > Debug`\n\n{% asset_img study-php-and-symfony-on-mac-os-33b82.png %}\n\n如何配置参考[Configuring Xdebug in PhpStorm](https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html)\n\n## 验证\n\n创建一个PHP项目，新建一个`php`文件，创建执行配置：\n\n{% asset_img study-php-and-symfony-on-mac-os-6c7bd.png %}\n\n打上断点，以`Debug`方式运行：\n\n{% asset_img study-php-and-symfony-on-mac-os-aec25.png %}\n\n# 参考\n\n- [macOS 10.12 Sierra Apache Setup: MySQL, APC & More...](https://getgrav.org/blog/macos-sierra-apache-mysql-vhost-apc)\n- [Cannot find libz when install php56](https://github.com/Homebrew/homebrew-php/issues/1946)\n- [How to install Xdebug - Xdebug Documents](https://xdebug.org/docs/install)\n- [Xdebug Installation Guide](https://confluence.jetbrains.com/display/PhpStorm/Xdebug+Installation+Guide)\n- [PHPStorm Help - Configuring Xdebug](https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html)\n","source":"_posts/study-php-and-symfony-on-mac-os.md","raw":"---\ntitle: 1 - Install PHP | Study PHP\ntags:\n  - php\ncategories:\n  - 软件开发\ndate: 2017-05-17 20:00:00\n---\n\n# Environment\n\n- macOS Sierra Version 10.12.4\n- Xcode: `xcode-select --install`\n- `Homebrew`\n\n# Install PHP\n\n安装PHP：\n\n```sh\n# 快速安装php，参考 https://github.com/Homebrew/homebrew-php\n> brew install brew-php-switcher\n> brew install php56\n\n> which php\n/usr/local/bin/php\n\n> which php-fpm\nlrwxr-xr-x  1 leeco  admin    32B May 17 15:08 /usr/local/bin/php -> ../Cellar/php56/5.6.30_6/bin/php\n```\n\n配置PHP：\n\n```sh\n# 配置 /private/etc/php.ini\n> sudo vim /usr/local/etc/php/5.6/php.ini\n# date.timezone = Asia/Shanghai\n\n> php -i | grep timezone\nDefault timezone => Asia/Shanghai\ndate.timezone => Asia/Shanghai => Asia/Shanghai\n```\n\n安装 PEAR 和 PECL:\n\n```sh\n# 参考 https://jason.pureconcepts.net/2012/10/install-pear-pecl-mac-os-x/\n> curl -O http://pear.php.net/go-pear.phar\n> sudo php -d detect_unicode=0 go-pear.phar\n# Press return\n\n# 安装 intl 扩展，参考 http://note.rpsh.net/posts/2015/10/07/installing-php-intl-extension-os-x-el-capitan/\n> sudo pear channel-update pear.php.net\n> sudo pecl channel-update pecl.php.net\n> sudo pear upgrade-all\n```\n\n## 如果要安装多个版本的PHP\n\n```sh\n# 用于在不同版本的php之间切换，参考 https://github.com/philcook/brew-php-switcher\n> brew unlink php56\n> brew install php71\n\n> brew-php-switcher 56 -s # 切回 php 5.6\n```\n\n# Install Composer\n\n```sh\n> brew install composer\n\n> composer\n```\n\n{% asset_img study-php-and-symfony-on-mac-os-a5831.png %}\n\n# Install PHP Extension\n\n## Install `intl`\n\n安装\n\n```sh\n> brew install autoconf\n> brew install icu4c\n> brew install php56-intl   # /usr/local/etc/php/5.6/conf.d/ext-intl.ini was created\n```\n\n检查是否安装成功：\n\n```\n> php -m | grep intl # 正常会包含 intl\n```\n\n## Install `OPcache`\n\n```sh\n> brew install php56-opcache\n\n> brew info php56-opcache\n...\nTo finish installing opcache for PHP 5.6:\n  * /usr/local/etc/php/5.6/conf.d/ext-opcache.ini was created,\n    do not forget to remove it upon extension removal.\n  * Validate installation via one of the following methods:\n...\n\n> php -m | grep OPcache  # 检查 OPcache 是否已生效\n```\n\n# Install `Xdebug`\n\n安装：\n\n```sh\n> brew install php56-xdebug\n...\nTo finish installing xdebug for PHP 5.6:\n  * /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini was created,\n    do not forget to remove it upon extension removal.\n  * Validate installation via one of the following methods:\n...\n```\n\nThe Xdebug extension will be enabled per default after the installation, additional configuration of the extension should be done by adding a custom ini-file to `/usr/local/etc/php/<php-version>/conf.d/`.\n\n配置：\n\n```\n> sudo echo 'xdebug.remote_enable=1\nxdebug.remote_host=127.0.0.1\nxdebug.remote_port=9000\nxdebug.profiler_enable=1\nxdebug.profiler_output_dir=\"/tmp/xdebug-profiler-output\"' >> /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini\n```\n\n安装`xdebug-osx`（`xdebug`开关工具）：\n\n```sh\n> brew install xdebug-osx\n...\nSignature:\n  xdebug-toggle <on | off> [--no-server-restart]\n\nUsage:\n  xdebug-toggle         # outputs the current status\n  xdebug-toggle on      # enables xdebug\n  xdebug-toggle off     # disables xdebug\n\nOptions:\n  --no-server-restart   # toggles xdebug without restarting apache or php-fpm\n...\n```\n\n# Use PHPStorm as IDE\n\n## Config Language & Frameworks\n\n打开`Preferences > Languages & Frameworks > PHP`\n\n{% asset_img study-php-and-symfony-on-mac-os-0c6a2.png %}\n\n添加CLI Intepreter\n\n{% asset_img study-php-and-symfony-on-mac-os-2aa39.png %}\n\n\n## Config `Xdebug`\n\n打开`Preferences > Languages & Frameworks > PHP > Debug`\n\n{% asset_img study-php-and-symfony-on-mac-os-33b82.png %}\n\n如何配置参考[Configuring Xdebug in PhpStorm](https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html)\n\n## 验证\n\n创建一个PHP项目，新建一个`php`文件，创建执行配置：\n\n{% asset_img study-php-and-symfony-on-mac-os-6c7bd.png %}\n\n打上断点，以`Debug`方式运行：\n\n{% asset_img study-php-and-symfony-on-mac-os-aec25.png %}\n\n# 参考\n\n- [macOS 10.12 Sierra Apache Setup: MySQL, APC & More...](https://getgrav.org/blog/macos-sierra-apache-mysql-vhost-apc)\n- [Cannot find libz when install php56](https://github.com/Homebrew/homebrew-php/issues/1946)\n- [How to install Xdebug - Xdebug Documents](https://xdebug.org/docs/install)\n- [Xdebug Installation Guide](https://confluence.jetbrains.com/display/PhpStorm/Xdebug+Installation+Guide)\n- [PHPStorm Help - Configuring Xdebug](https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html)\n","slug":"study-php-and-symfony-on-mac-os","published":1,"updated":"2017-06-13T09:43:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50oneoz0011v7bfw889kr3f","content":"<h1 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h1><ul>\n<li>macOS Sierra Version 10.12.4</li>\n<li>Xcode: <code>xcode-select --install</code></li>\n<li><code>Homebrew</code></li>\n</ul>\n<h1 id=\"Install-PHP\"><a href=\"#Install-PHP\" class=\"headerlink\" title=\"Install PHP\"></a>Install PHP</h1><p>安装PHP：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 快速安装php，参考 https://github.com/Homebrew/homebrew-php</span></div><div class=\"line\">&gt; brew install brew-php-switcher</div><div class=\"line\">&gt; brew install php56</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">which</span> php</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/php</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">which</span> php-fpm</div><div class=\"line\">lrwxr-xr-x  1 leeco  admin    32B May 17 15:08 /usr/<span class=\"built_in\">local</span>/bin/php -&gt; ../Cellar/php56/5.6.30_6/bin/php</div></pre></td></tr></table></figure>\n<p>配置PHP：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 配置 /private/etc/php.ini</span></div><div class=\"line\">&gt; sudo vim /usr/<span class=\"built_in\">local</span>/etc/php/5.6/php.ini</div><div class=\"line\"><span class=\"comment\"># date.timezone = Asia/Shanghai</span></div><div class=\"line\"></div><div class=\"line\">&gt; php -i | grep timezone</div><div class=\"line\">Default timezone =&gt; Asia/Shanghai</div><div class=\"line\">date.timezone =&gt; Asia/Shanghai =&gt; Asia/Shanghai</div></pre></td></tr></table></figure>\n<p>安装 PEAR 和 PECL:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 参考 https://jason.pureconcepts.net/2012/10/install-pear-pecl-mac-os-x/</span></div><div class=\"line\">&gt; curl -O http://pear.php.net/go-pear.phar</div><div class=\"line\">&gt; sudo php -d detect_unicode=0 go-pear.phar</div><div class=\"line\"><span class=\"comment\"># Press return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装 intl 扩展，参考 http://note.rpsh.net/posts/2015/10/07/installing-php-intl-extension-os-x-el-capitan/</span></div><div class=\"line\">&gt; sudo pear channel-update pear.php.net</div><div class=\"line\">&gt; sudo pecl channel-update pecl.php.net</div><div class=\"line\">&gt; sudo pear upgrade-all</div></pre></td></tr></table></figure>\n<h2 id=\"如果要安装多个版本的PHP\"><a href=\"#如果要安装多个版本的PHP\" class=\"headerlink\" title=\"如果要安装多个版本的PHP\"></a>如果要安装多个版本的PHP</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 用于在不同版本的php之间切换，参考 https://github.com/philcook/brew-php-switcher</span></div><div class=\"line\">&gt; brew unlink php56</div><div class=\"line\">&gt; brew install php71</div><div class=\"line\"></div><div class=\"line\">&gt; brew-php-switcher 56 -s <span class=\"comment\"># 切回 php 5.6</span></div></pre></td></tr></table></figure>\n<h1 id=\"Install-Composer\"><a href=\"#Install-Composer\" class=\"headerlink\" title=\"Install Composer\"></a>Install Composer</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install composer</div><div class=\"line\"></div><div class=\"line\">&gt; composer</div></pre></td></tr></table></figure>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-a5831.png\" alt=\"study-php-and-symfony-on-mac-os-a5831.png\" title=\"\">\n<h1 id=\"Install-PHP-Extension\"><a href=\"#Install-PHP-Extension\" class=\"headerlink\" title=\"Install PHP Extension\"></a>Install PHP Extension</h1><h2 id=\"Install-intl\"><a href=\"#Install-intl\" class=\"headerlink\" title=\"Install intl\"></a>Install <code>intl</code></h2><p>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install autoconf</div><div class=\"line\">&gt; brew install icu4c</div><div class=\"line\">&gt; brew install php56-intl   <span class=\"comment\"># /usr/local/etc/php/5.6/conf.d/ext-intl.ini was created</span></div></pre></td></tr></table></figure>\n<p>检查是否安装成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; php -m | grep intl # 正常会包含 intl</div></pre></td></tr></table></figure>\n<h2 id=\"Install-OPcache\"><a href=\"#Install-OPcache\" class=\"headerlink\" title=\"Install OPcache\"></a>Install <code>OPcache</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install php56-opcache</div><div class=\"line\"></div><div class=\"line\">&gt; brew info php56-opcache</div><div class=\"line\">...</div><div class=\"line\">To finish installing opcache <span class=\"keyword\">for</span> PHP 5.6:</div><div class=\"line\">  * /usr/<span class=\"built_in\">local</span>/etc/php/5.6/conf.d/ext-opcache.ini was created,</div><div class=\"line\">    <span class=\"keyword\">do</span> not forget to remove it upon extension removal.</div><div class=\"line\">  * Validate installation via one of the following methods:</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&gt; php -m | grep OPcache  <span class=\"comment\"># 检查 OPcache 是否已生效</span></div></pre></td></tr></table></figure>\n<h1 id=\"Install-Xdebug\"><a href=\"#Install-Xdebug\" class=\"headerlink\" title=\"Install Xdebug\"></a>Install <code>Xdebug</code></h1><p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install php56-xdebug</div><div class=\"line\">...</div><div class=\"line\">To finish installing xdebug <span class=\"keyword\">for</span> PHP 5.6:</div><div class=\"line\">  * /usr/<span class=\"built_in\">local</span>/etc/php/5.6/conf.d/ext-xdebug.ini was created,</div><div class=\"line\">    <span class=\"keyword\">do</span> not forget to remove it upon extension removal.</div><div class=\"line\">  * Validate installation via one of the following methods:</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>The Xdebug extension will be enabled per default after the installation, additional configuration of the extension should be done by adding a custom ini-file to <code>/usr/local/etc/php/&lt;php-version&gt;/conf.d/</code>.</p>\n<p>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sudo echo &apos;xdebug.remote_enable=1</div><div class=\"line\">xdebug.remote_host=127.0.0.1</div><div class=\"line\">xdebug.remote_port=9000</div><div class=\"line\">xdebug.profiler_enable=1</div><div class=\"line\">xdebug.profiler_output_dir=&quot;/tmp/xdebug-profiler-output&quot;&apos; &gt;&gt; /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini</div></pre></td></tr></table></figure>\n<p>安装<code>xdebug-osx</code>（<code>xdebug</code>开关工具）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install xdebug-osx</div><div class=\"line\">...</div><div class=\"line\">Signature:</div><div class=\"line\">  xdebug-toggle &lt;on | off&gt; [--no-server-restart]</div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">  xdebug-toggle         <span class=\"comment\"># outputs the current status</span></div><div class=\"line\">  xdebug-toggle on      <span class=\"comment\"># enables xdebug</span></div><div class=\"line\">  xdebug-toggle off     <span class=\"comment\"># disables xdebug</span></div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\">  --no-server-restart   <span class=\"comment\"># toggles xdebug without restarting apache or php-fpm</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"Use-PHPStorm-as-IDE\"><a href=\"#Use-PHPStorm-as-IDE\" class=\"headerlink\" title=\"Use PHPStorm as IDE\"></a>Use PHPStorm as IDE</h1><h2 id=\"Config-Language-amp-Frameworks\"><a href=\"#Config-Language-amp-Frameworks\" class=\"headerlink\" title=\"Config Language &amp; Frameworks\"></a>Config Language &amp; Frameworks</h2><p>打开<code>Preferences &gt; Languages &amp; Frameworks &gt; PHP</code></p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-0c6a2.png\" alt=\"study-php-and-symfony-on-mac-os-0c6a2.png\" title=\"\">\n<p>添加CLI Intepreter</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-2aa39.png\" alt=\"study-php-and-symfony-on-mac-os-2aa39.png\" title=\"\">\n<h2 id=\"Config-Xdebug\"><a href=\"#Config-Xdebug\" class=\"headerlink\" title=\"Config Xdebug\"></a>Config <code>Xdebug</code></h2><p>打开<code>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Debug</code></p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-33b82.png\" alt=\"study-php-and-symfony-on-mac-os-33b82.png\" title=\"\">\n<p>如何配置参考<a href=\"https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html\" target=\"_blank\" rel=\"external\">Configuring Xdebug in PhpStorm</a></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>创建一个PHP项目，新建一个<code>php</code>文件，创建执行配置：</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-6c7bd.png\" alt=\"study-php-and-symfony-on-mac-os-6c7bd.png\" title=\"\">\n<p>打上断点，以<code>Debug</code>方式运行：</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-aec25.png\" alt=\"study-php-and-symfony-on-mac-os-aec25.png\" title=\"\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://getgrav.org/blog/macos-sierra-apache-mysql-vhost-apc\" target=\"_blank\" rel=\"external\">macOS 10.12 Sierra Apache Setup: MySQL, APC &amp; More…</a></li>\n<li><a href=\"https://github.com/Homebrew/homebrew-php/issues/1946\" target=\"_blank\" rel=\"external\">Cannot find libz when install php56</a></li>\n<li><a href=\"https://xdebug.org/docs/install\" target=\"_blank\" rel=\"external\">How to install Xdebug - Xdebug Documents</a></li>\n<li><a href=\"https://confluence.jetbrains.com/display/PhpStorm/Xdebug+Installation+Guide\" target=\"_blank\" rel=\"external\">Xdebug Installation Guide</a></li>\n<li><a href=\"https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html\" target=\"_blank\" rel=\"external\">PHPStorm Help - Configuring Xdebug</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h1><ul>\n<li>macOS Sierra Version 10.12.4</li>\n<li>Xcode: <code>xcode-select --install</code></li>\n<li><code>Homebrew</code></li>\n</ul>\n<h1 id=\"Install-PHP\"><a href=\"#Install-PHP\" class=\"headerlink\" title=\"Install PHP\"></a>Install PHP</h1><p>安装PHP：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 快速安装php，参考 https://github.com/Homebrew/homebrew-php</span></div><div class=\"line\">&gt; brew install brew-php-switcher</div><div class=\"line\">&gt; brew install php56</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">which</span> php</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/php</div><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"built_in\">which</span> php-fpm</div><div class=\"line\">lrwxr-xr-x  1 leeco  admin    32B May 17 15:08 /usr/<span class=\"built_in\">local</span>/bin/php -&gt; ../Cellar/php56/5.6.30_6/bin/php</div></pre></td></tr></table></figure>\n<p>配置PHP：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 配置 /private/etc/php.ini</span></div><div class=\"line\">&gt; sudo vim /usr/<span class=\"built_in\">local</span>/etc/php/5.6/php.ini</div><div class=\"line\"><span class=\"comment\"># date.timezone = Asia/Shanghai</span></div><div class=\"line\"></div><div class=\"line\">&gt; php -i | grep timezone</div><div class=\"line\">Default timezone =&gt; Asia/Shanghai</div><div class=\"line\">date.timezone =&gt; Asia/Shanghai =&gt; Asia/Shanghai</div></pre></td></tr></table></figure>\n<p>安装 PEAR 和 PECL:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 参考 https://jason.pureconcepts.net/2012/10/install-pear-pecl-mac-os-x/</span></div><div class=\"line\">&gt; curl -O http://pear.php.net/go-pear.phar</div><div class=\"line\">&gt; sudo php -d detect_unicode=0 go-pear.phar</div><div class=\"line\"><span class=\"comment\"># Press return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装 intl 扩展，参考 http://note.rpsh.net/posts/2015/10/07/installing-php-intl-extension-os-x-el-capitan/</span></div><div class=\"line\">&gt; sudo pear channel-update pear.php.net</div><div class=\"line\">&gt; sudo pecl channel-update pecl.php.net</div><div class=\"line\">&gt; sudo pear upgrade-all</div></pre></td></tr></table></figure>\n<h2 id=\"如果要安装多个版本的PHP\"><a href=\"#如果要安装多个版本的PHP\" class=\"headerlink\" title=\"如果要安装多个版本的PHP\"></a>如果要安装多个版本的PHP</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 用于在不同版本的php之间切换，参考 https://github.com/philcook/brew-php-switcher</span></div><div class=\"line\">&gt; brew unlink php56</div><div class=\"line\">&gt; brew install php71</div><div class=\"line\"></div><div class=\"line\">&gt; brew-php-switcher 56 -s <span class=\"comment\"># 切回 php 5.6</span></div></pre></td></tr></table></figure>\n<h1 id=\"Install-Composer\"><a href=\"#Install-Composer\" class=\"headerlink\" title=\"Install Composer\"></a>Install Composer</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install composer</div><div class=\"line\"></div><div class=\"line\">&gt; composer</div></pre></td></tr></table></figure>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-a5831.png\" alt=\"study-php-and-symfony-on-mac-os-a5831.png\" title=\"\">\n<h1 id=\"Install-PHP-Extension\"><a href=\"#Install-PHP-Extension\" class=\"headerlink\" title=\"Install PHP Extension\"></a>Install PHP Extension</h1><h2 id=\"Install-intl\"><a href=\"#Install-intl\" class=\"headerlink\" title=\"Install intl\"></a>Install <code>intl</code></h2><p>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install autoconf</div><div class=\"line\">&gt; brew install icu4c</div><div class=\"line\">&gt; brew install php56-intl   <span class=\"comment\"># /usr/local/etc/php/5.6/conf.d/ext-intl.ini was created</span></div></pre></td></tr></table></figure>\n<p>检查是否安装成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; php -m | grep intl # 正常会包含 intl</div></pre></td></tr></table></figure>\n<h2 id=\"Install-OPcache\"><a href=\"#Install-OPcache\" class=\"headerlink\" title=\"Install OPcache\"></a>Install <code>OPcache</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install php56-opcache</div><div class=\"line\"></div><div class=\"line\">&gt; brew info php56-opcache</div><div class=\"line\">...</div><div class=\"line\">To finish installing opcache <span class=\"keyword\">for</span> PHP 5.6:</div><div class=\"line\">  * /usr/<span class=\"built_in\">local</span>/etc/php/5.6/conf.d/ext-opcache.ini was created,</div><div class=\"line\">    <span class=\"keyword\">do</span> not forget to remove it upon extension removal.</div><div class=\"line\">  * Validate installation via one of the following methods:</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&gt; php -m | grep OPcache  <span class=\"comment\"># 检查 OPcache 是否已生效</span></div></pre></td></tr></table></figure>\n<h1 id=\"Install-Xdebug\"><a href=\"#Install-Xdebug\" class=\"headerlink\" title=\"Install Xdebug\"></a>Install <code>Xdebug</code></h1><p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install php56-xdebug</div><div class=\"line\">...</div><div class=\"line\">To finish installing xdebug <span class=\"keyword\">for</span> PHP 5.6:</div><div class=\"line\">  * /usr/<span class=\"built_in\">local</span>/etc/php/5.6/conf.d/ext-xdebug.ini was created,</div><div class=\"line\">    <span class=\"keyword\">do</span> not forget to remove it upon extension removal.</div><div class=\"line\">  * Validate installation via one of the following methods:</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>The Xdebug extension will be enabled per default after the installation, additional configuration of the extension should be done by adding a custom ini-file to <code>/usr/local/etc/php/&lt;php-version&gt;/conf.d/</code>.</p>\n<p>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sudo echo &apos;xdebug.remote_enable=1</div><div class=\"line\">xdebug.remote_host=127.0.0.1</div><div class=\"line\">xdebug.remote_port=9000</div><div class=\"line\">xdebug.profiler_enable=1</div><div class=\"line\">xdebug.profiler_output_dir=&quot;/tmp/xdebug-profiler-output&quot;&apos; &gt;&gt; /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini</div></pre></td></tr></table></figure>\n<p>安装<code>xdebug-osx</code>（<code>xdebug</code>开关工具）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; brew install xdebug-osx</div><div class=\"line\">...</div><div class=\"line\">Signature:</div><div class=\"line\">  xdebug-toggle &lt;on | off&gt; [--no-server-restart]</div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">  xdebug-toggle         <span class=\"comment\"># outputs the current status</span></div><div class=\"line\">  xdebug-toggle on      <span class=\"comment\"># enables xdebug</span></div><div class=\"line\">  xdebug-toggle off     <span class=\"comment\"># disables xdebug</span></div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\">  --no-server-restart   <span class=\"comment\"># toggles xdebug without restarting apache or php-fpm</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"Use-PHPStorm-as-IDE\"><a href=\"#Use-PHPStorm-as-IDE\" class=\"headerlink\" title=\"Use PHPStorm as IDE\"></a>Use PHPStorm as IDE</h1><h2 id=\"Config-Language-amp-Frameworks\"><a href=\"#Config-Language-amp-Frameworks\" class=\"headerlink\" title=\"Config Language &amp; Frameworks\"></a>Config Language &amp; Frameworks</h2><p>打开<code>Preferences &gt; Languages &amp; Frameworks &gt; PHP</code></p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-0c6a2.png\" alt=\"study-php-and-symfony-on-mac-os-0c6a2.png\" title=\"\">\n<p>添加CLI Intepreter</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-2aa39.png\" alt=\"study-php-and-symfony-on-mac-os-2aa39.png\" title=\"\">\n<h2 id=\"Config-Xdebug\"><a href=\"#Config-Xdebug\" class=\"headerlink\" title=\"Config Xdebug\"></a>Config <code>Xdebug</code></h2><p>打开<code>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Debug</code></p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-33b82.png\" alt=\"study-php-and-symfony-on-mac-os-33b82.png\" title=\"\">\n<p>如何配置参考<a href=\"https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html\" target=\"_blank\" rel=\"external\">Configuring Xdebug in PhpStorm</a></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>创建一个PHP项目，新建一个<code>php</code>文件，创建执行配置：</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-6c7bd.png\" alt=\"study-php-and-symfony-on-mac-os-6c7bd.png\" title=\"\">\n<p>打上断点，以<code>Debug</code>方式运行：</p>\n<img src=\"/2017/05/17/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-aec25.png\" alt=\"study-php-and-symfony-on-mac-os-aec25.png\" title=\"\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://getgrav.org/blog/macos-sierra-apache-mysql-vhost-apc\" target=\"_blank\" rel=\"external\">macOS 10.12 Sierra Apache Setup: MySQL, APC &amp; More…</a></li>\n<li><a href=\"https://github.com/Homebrew/homebrew-php/issues/1946\" target=\"_blank\" rel=\"external\">Cannot find libz when install php56</a></li>\n<li><a href=\"https://xdebug.org/docs/install\" target=\"_blank\" rel=\"external\">How to install Xdebug - Xdebug Documents</a></li>\n<li><a href=\"https://confluence.jetbrains.com/display/PhpStorm/Xdebug+Installation+Guide\" target=\"_blank\" rel=\"external\">Xdebug Installation Guide</a></li>\n<li><a href=\"https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html\" target=\"_blank\" rel=\"external\">PHPStorm Help - Configuring Xdebug</a></li>\n</ul>\n"},{"title":"需求分析：填补产品设计到技术实现之间的“信息断层”","date":"2016-03-26T13:13:28.000Z","_content":"\n    “体育运动有规则，而对格斗来说，是没有规则的。所以为了迎接格斗，你应该训练身体的所有部位。”\n    ——李小龙\n\n# 前言\n\n我参加工作是2006年，去的第一家公司是四维图新。那时在技术部从事软件开发工作，功能需求是由技术部的需求组提供的。业务部门要做什么东西，会先给需求组提需求，然后需求组将业务需求整理好，以需求单的形式提供给各个系统开发组。那时候，大家开会说“产品”，指的是公司出版的地图数据，而不是技术部门开发的各个系统、软件工具。学习的内容也是CMMI（软件能力成熟度模型）、RUP（统一软件开发过程）、MSF（微软解决方案框架结构）、UML。\n\n2011年我加入艺龙旅行网，那时艺龙有这么两个部门，一个是网站产品组，一个是业务流程改进组。网站产品负责给面向消费者的预订网站提需求，而业务流程改进组负责给内部呼叫中心使用的系统、面向酒店的业务系统提需求。这两个组后来合并成一个产品团队。我在艺龙负责Ebooking产品的开发和运维工作，和产品经理打了3年的交道，期间自己学习了产品经理的相关知识并且担任一段时间的产品经理。\n\n在艺龙期间以及后来的工作中，我看到一些团队的产品经理很优秀，开发人员技术也很强，但是有时候一个小的需求变更导致技术上的大调整，整个产品开发过程“鸡飞狗跳”，反倒有时候不如以前和一些经验丰富的需求分析师合作时候，产品开发过程更顺畅。\n\n# “产品设计”和“需求分析”比较\n\n在传统软件开发企业和互联网企业都工作过的软件工程师，会发现“传统”需求分析师、“互联网”产品经理这两种角色工作内容有着一些明显的区别。\n\n我们通过下面一个测试来了解一下大家所认为的这两个角色的工作内容。下面给出一些概念，如果你认为更接近产品设计，就在产品设计列打“x”，反之在需求分析列下打“x”。\n\n| 名词                            | 产品设计 | 需求分析 |\n|:--------------------------------|:---------|:---------|\n| 商业模式                        |          |          |\n| 用户体验                        |          |          |\n| 用户心智                        |          |          |\n| 用户习惯                        |          |          |\n| 用户愿景                        |          |          |\n| 用户需求驱动                    |          |          |\n| 业务需求驱动                    |          |          |\n| 渉众                            |          |          |\n| 用户角色                        |          |          |\n| 业务执行者                      |          |          |\n| 业务工人                        |          |          |\n| 以用户价值为中心                |          |          |\n| 以业务需求为中心                |          |          |\n| 甲方、乙方                      |          |          |\n| 数据分析                        |          |          |\n| 信息建模                        |          |          |\n| 信息架构                        |          |          |\n| 面向对象方法                    |          |          |\n| UML流程图、状态图、时序图、类图 |          |          |\n| E-R关系图                       |          |          |\n| 需求文档                        |          |          |\n| 产品原型                        |          |          |\n| Rational                        |          |          |\n| Axure RP                        |          |          |\n| Sketch                          |          |          |\n| UI、UE                          |          |          |\n| 视觉设计                        |          |          |\n| 交互设计                        |          |          |\n| 业务用例                        |          |          |\n| 推广策略                        |          |          |\n\n\n以上概念基本可以分为“关注点”、“考虑问题的模式和方法”、“工作内容”、“常用工具”、“工作交付物”这么几类。相信大部分人选择的接近下面这个答案：\n\n| 名词                            | 产品设计 | 需求分析 |\n|:--------------------------------|:---------|:---------|\n| 商业模式                        | x        |          |\n| 用户体验                        | x        |          |\n| 用户心智                        | x        |          |\n| 用户习惯                        | x        |          |\n| 用户愿景                        |          | x        |\n| 用户需求驱动                    | x        |          |\n| 业务需求驱动                    |          | x        |\n| 渉众                            |          | x        |\n| 用户角色                        | x        |          |\n| 业务执行者                      |          | x        |\n| 业务工人                        |          | x        |\n| 以用户价值为中心                | x        |          |\n| 以业务需求为中心                |          | x        |\n| 甲方、乙方                      |          | x        |\n| 数据分析                        | x        | x        |\n| 信息建模                        |          | x        |\n| 信息架构                        | x        |          |\n| 面向对象方法                    |          | x        |\n| UML流程图、状态图、时序图、类图 |          | x        |\n| E-R关系图                       |          | x        |\n| 需求文档                        |          | x        |\n| 产品原型                        | x        |          |\n| Rational                        |          | x        |\n| Axure RP                        | x        |          |\n| Sketch                          | x        |          |\n| UI、UE                          | x        |          |\n| 视觉设计                        | x        |          |\n| 交互设计                        | x        |          |\n| 业务用例                        |          | x        |\n| 推广策略                        | x        |          |\n\n不知道大家做完这个测试后，是不是觉得做产品设计比做需求分析牛逼多了。很多产品经理的书籍中都会将“产品设计”描述的高大上：\n\n- 产品设计是用户价值驱动，需求分析是业务需求驱动。\n- 所谓设计，就是通过创造与交流来认识我们生活在其中的世界。好的认识和发现，会让我们感到喜悦和骄傲。\n- 互联网产品设计绝不是编写产品交互说明书，也不是创造优美的界面，本质是创造一连串的体验，使用户能感知到产品的文化、价值和内涵，从而引发集群效应、创造社会价值。\n\n以上的话说的都对，绝对正确。在乔老爷子的引领下，如今很多公司重视产品设计，这是好事。但是于此同时产生另外一种做法：不重视需求分析，甚至直接忽略。老板、产品经理这么做可以理解，工程师如果也这么附和，就是做事不过大脑。\n\n# 需求分析是否有继续存在的价值\n\n产品设计要取代需求分析，只可能是下面两种情况：\n\n- 产品设计涵盖了需求分析的所有工作内容\n- 属于需求分析但是不属于产品设计的工作内容已不再重要，可以不用去做\n\n第一种情况，需求分析中的业务建模、画E-R关系图、UML流程图、时序图、状态图，在大多数公司中，是由需求分析师或者工程师来做，不属于产品设计的工作范畴。产品设计显然不涵盖需求分析的所有工作内容。\n\n第二种情况，面对复杂业务场景，通过业务建模、画E-R关系图、UML流程图、时序图、状态图等手段做需求分析，是前辈软件工程师总结出来宝贵方法和经验。产品经理一般会将整理后的产品需求通过各种方式（口述、文档、UI/UE设计等）传递给工程团队，但是这些信息一般都是站在业务边界或系统边界描述的产品功能需求，和工程实现存在**信息断层**。产品需求如何映射到代码实现，需要一个系统化的需求分析、设计过程，产品设计并不解决过去几十年软件开发行业发明各种软件需求分析方法所解决的问题。任何脑袋没有烧掉的公司都不会说软件需求分析工作不重要、不需要做。\n\n# 需求分析应继续得到坚持和重视\n\n如果只关注产品设计，更多的时候，你会认为设计出来的界面很美观，交互也很舒服，该说的需求都告诉工程团队了，但是工程开发阶段，出现各种问题：概念不明确、架构无法设计、逻辑混乱、后期变更困难。\n\n如果只关注需求分析，更多的时候，你会发现不知道如何提产品需求，产品开发出来了，认为做很牛逼，但是客户觉得不好用，产品不好卖。\n\n所有公司都希望做出成功的产品。但是未经仔细思考，就忽略软件需求分析方法，不是一个经得起推敲的做法。只有产品设计、需求分析都做好了，产品才能成功。\n\n# 参考\n\n- [UMLChina](http://www.umlchina.com/)\n- [李小龙截拳道](http://v.youku.com/v_show/id_XMTIzMzczNg==.html)\n","source":"_posts/product-design-vs-requirement-analysis.md","raw":"---\ntitle: 需求分析：填补产品设计到技术实现之间的“信息断层”\ndate: 2016-03-26 21:13:28\ncategories:\n- 大产品\ntags:\n- 产品设计\n- 需求分析\n---\n\n    “体育运动有规则，而对格斗来说，是没有规则的。所以为了迎接格斗，你应该训练身体的所有部位。”\n    ——李小龙\n\n# 前言\n\n我参加工作是2006年，去的第一家公司是四维图新。那时在技术部从事软件开发工作，功能需求是由技术部的需求组提供的。业务部门要做什么东西，会先给需求组提需求，然后需求组将业务需求整理好，以需求单的形式提供给各个系统开发组。那时候，大家开会说“产品”，指的是公司出版的地图数据，而不是技术部门开发的各个系统、软件工具。学习的内容也是CMMI（软件能力成熟度模型）、RUP（统一软件开发过程）、MSF（微软解决方案框架结构）、UML。\n\n2011年我加入艺龙旅行网，那时艺龙有这么两个部门，一个是网站产品组，一个是业务流程改进组。网站产品负责给面向消费者的预订网站提需求，而业务流程改进组负责给内部呼叫中心使用的系统、面向酒店的业务系统提需求。这两个组后来合并成一个产品团队。我在艺龙负责Ebooking产品的开发和运维工作，和产品经理打了3年的交道，期间自己学习了产品经理的相关知识并且担任一段时间的产品经理。\n\n在艺龙期间以及后来的工作中，我看到一些团队的产品经理很优秀，开发人员技术也很强，但是有时候一个小的需求变更导致技术上的大调整，整个产品开发过程“鸡飞狗跳”，反倒有时候不如以前和一些经验丰富的需求分析师合作时候，产品开发过程更顺畅。\n\n# “产品设计”和“需求分析”比较\n\n在传统软件开发企业和互联网企业都工作过的软件工程师，会发现“传统”需求分析师、“互联网”产品经理这两种角色工作内容有着一些明显的区别。\n\n我们通过下面一个测试来了解一下大家所认为的这两个角色的工作内容。下面给出一些概念，如果你认为更接近产品设计，就在产品设计列打“x”，反之在需求分析列下打“x”。\n\n| 名词                            | 产品设计 | 需求分析 |\n|:--------------------------------|:---------|:---------|\n| 商业模式                        |          |          |\n| 用户体验                        |          |          |\n| 用户心智                        |          |          |\n| 用户习惯                        |          |          |\n| 用户愿景                        |          |          |\n| 用户需求驱动                    |          |          |\n| 业务需求驱动                    |          |          |\n| 渉众                            |          |          |\n| 用户角色                        |          |          |\n| 业务执行者                      |          |          |\n| 业务工人                        |          |          |\n| 以用户价值为中心                |          |          |\n| 以业务需求为中心                |          |          |\n| 甲方、乙方                      |          |          |\n| 数据分析                        |          |          |\n| 信息建模                        |          |          |\n| 信息架构                        |          |          |\n| 面向对象方法                    |          |          |\n| UML流程图、状态图、时序图、类图 |          |          |\n| E-R关系图                       |          |          |\n| 需求文档                        |          |          |\n| 产品原型                        |          |          |\n| Rational                        |          |          |\n| Axure RP                        |          |          |\n| Sketch                          |          |          |\n| UI、UE                          |          |          |\n| 视觉设计                        |          |          |\n| 交互设计                        |          |          |\n| 业务用例                        |          |          |\n| 推广策略                        |          |          |\n\n\n以上概念基本可以分为“关注点”、“考虑问题的模式和方法”、“工作内容”、“常用工具”、“工作交付物”这么几类。相信大部分人选择的接近下面这个答案：\n\n| 名词                            | 产品设计 | 需求分析 |\n|:--------------------------------|:---------|:---------|\n| 商业模式                        | x        |          |\n| 用户体验                        | x        |          |\n| 用户心智                        | x        |          |\n| 用户习惯                        | x        |          |\n| 用户愿景                        |          | x        |\n| 用户需求驱动                    | x        |          |\n| 业务需求驱动                    |          | x        |\n| 渉众                            |          | x        |\n| 用户角色                        | x        |          |\n| 业务执行者                      |          | x        |\n| 业务工人                        |          | x        |\n| 以用户价值为中心                | x        |          |\n| 以业务需求为中心                |          | x        |\n| 甲方、乙方                      |          | x        |\n| 数据分析                        | x        | x        |\n| 信息建模                        |          | x        |\n| 信息架构                        | x        |          |\n| 面向对象方法                    |          | x        |\n| UML流程图、状态图、时序图、类图 |          | x        |\n| E-R关系图                       |          | x        |\n| 需求文档                        |          | x        |\n| 产品原型                        | x        |          |\n| Rational                        |          | x        |\n| Axure RP                        | x        |          |\n| Sketch                          | x        |          |\n| UI、UE                          | x        |          |\n| 视觉设计                        | x        |          |\n| 交互设计                        | x        |          |\n| 业务用例                        |          | x        |\n| 推广策略                        | x        |          |\n\n不知道大家做完这个测试后，是不是觉得做产品设计比做需求分析牛逼多了。很多产品经理的书籍中都会将“产品设计”描述的高大上：\n\n- 产品设计是用户价值驱动，需求分析是业务需求驱动。\n- 所谓设计，就是通过创造与交流来认识我们生活在其中的世界。好的认识和发现，会让我们感到喜悦和骄傲。\n- 互联网产品设计绝不是编写产品交互说明书，也不是创造优美的界面，本质是创造一连串的体验，使用户能感知到产品的文化、价值和内涵，从而引发集群效应、创造社会价值。\n\n以上的话说的都对，绝对正确。在乔老爷子的引领下，如今很多公司重视产品设计，这是好事。但是于此同时产生另外一种做法：不重视需求分析，甚至直接忽略。老板、产品经理这么做可以理解，工程师如果也这么附和，就是做事不过大脑。\n\n# 需求分析是否有继续存在的价值\n\n产品设计要取代需求分析，只可能是下面两种情况：\n\n- 产品设计涵盖了需求分析的所有工作内容\n- 属于需求分析但是不属于产品设计的工作内容已不再重要，可以不用去做\n\n第一种情况，需求分析中的业务建模、画E-R关系图、UML流程图、时序图、状态图，在大多数公司中，是由需求分析师或者工程师来做，不属于产品设计的工作范畴。产品设计显然不涵盖需求分析的所有工作内容。\n\n第二种情况，面对复杂业务场景，通过业务建模、画E-R关系图、UML流程图、时序图、状态图等手段做需求分析，是前辈软件工程师总结出来宝贵方法和经验。产品经理一般会将整理后的产品需求通过各种方式（口述、文档、UI/UE设计等）传递给工程团队，但是这些信息一般都是站在业务边界或系统边界描述的产品功能需求，和工程实现存在**信息断层**。产品需求如何映射到代码实现，需要一个系统化的需求分析、设计过程，产品设计并不解决过去几十年软件开发行业发明各种软件需求分析方法所解决的问题。任何脑袋没有烧掉的公司都不会说软件需求分析工作不重要、不需要做。\n\n# 需求分析应继续得到坚持和重视\n\n如果只关注产品设计，更多的时候，你会认为设计出来的界面很美观，交互也很舒服，该说的需求都告诉工程团队了，但是工程开发阶段，出现各种问题：概念不明确、架构无法设计、逻辑混乱、后期变更困难。\n\n如果只关注需求分析，更多的时候，你会发现不知道如何提产品需求，产品开发出来了，认为做很牛逼，但是客户觉得不好用，产品不好卖。\n\n所有公司都希望做出成功的产品。但是未经仔细思考，就忽略软件需求分析方法，不是一个经得起推敲的做法。只有产品设计、需求分析都做好了，产品才能成功。\n\n# 参考\n\n- [UMLChina](http://www.umlchina.com/)\n- [李小龙截拳道](http://v.youku.com/v_show/id_XMTIzMzczNg==.html)\n","slug":"product-design-vs-requirement-analysis","published":1,"updated":"2016-11-19T16:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50onep20014v7bfyks3jztt","content":"<pre><code>“体育运动有规则，而对格斗来说，是没有规则的。所以为了迎接格斗，你应该训练身体的所有部位。”\n——李小龙\n</code></pre><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我参加工作是2006年，去的第一家公司是四维图新。那时在技术部从事软件开发工作，功能需求是由技术部的需求组提供的。业务部门要做什么东西，会先给需求组提需求，然后需求组将业务需求整理好，以需求单的形式提供给各个系统开发组。那时候，大家开会说“产品”，指的是公司出版的地图数据，而不是技术部门开发的各个系统、软件工具。学习的内容也是CMMI（软件能力成熟度模型）、RUP（统一软件开发过程）、MSF（微软解决方案框架结构）、UML。</p>\n<p>2011年我加入艺龙旅行网，那时艺龙有这么两个部门，一个是网站产品组，一个是业务流程改进组。网站产品负责给面向消费者的预订网站提需求，而业务流程改进组负责给内部呼叫中心使用的系统、面向酒店的业务系统提需求。这两个组后来合并成一个产品团队。我在艺龙负责Ebooking产品的开发和运维工作，和产品经理打了3年的交道，期间自己学习了产品经理的相关知识并且担任一段时间的产品经理。</p>\n<p>在艺龙期间以及后来的工作中，我看到一些团队的产品经理很优秀，开发人员技术也很强，但是有时候一个小的需求变更导致技术上的大调整，整个产品开发过程“鸡飞狗跳”，反倒有时候不如以前和一些经验丰富的需求分析师合作时候，产品开发过程更顺畅。</p>\n<h1 id=\"“产品设计”和“需求分析”比较\"><a href=\"#“产品设计”和“需求分析”比较\" class=\"headerlink\" title=\"“产品设计”和“需求分析”比较\"></a>“产品设计”和“需求分析”比较</h1><p>在传统软件开发企业和互联网企业都工作过的软件工程师，会发现“传统”需求分析师、“互联网”产品经理这两种角色工作内容有着一些明显的区别。</p>\n<p>我们通过下面一个测试来了解一下大家所认为的这两个角色的工作内容。下面给出一些概念，如果你认为更接近产品设计，就在产品设计列打“x”，反之在需求分析列下打“x”。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名词</th>\n<th style=\"text-align:left\">产品设计</th>\n<th style=\"text-align:left\">需求分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">商业模式</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户体验</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户心智</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户习惯</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户愿景</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">渉众</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户角色</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务执行者</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务工人</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以用户价值为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以业务需求为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">甲方、乙方</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据分析</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息建模</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息架构</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">面向对象方法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UML流程图、状态图、时序图、类图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E-R关系图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">需求文档</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">产品原型</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rational</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Axure RP</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sketch</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UI、UE</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">视觉设计</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交互设计</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务用例</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">推广策略</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>以上概念基本可以分为“关注点”、“考虑问题的模式和方法”、“工作内容”、“常用工具”、“工作交付物”这么几类。相信大部分人选择的接近下面这个答案：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名词</th>\n<th style=\"text-align:left\">产品设计</th>\n<th style=\"text-align:left\">需求分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">商业模式</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户体验</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户心智</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户习惯</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户愿景</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户需求驱动</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">渉众</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户角色</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务执行者</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务工人</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以用户价值为中心</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以业务需求为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">甲方、乙方</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据分析</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息建模</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息架构</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">面向对象方法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UML流程图、状态图、时序图、类图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E-R关系图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">需求文档</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">产品原型</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rational</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Axure RP</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sketch</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UI、UE</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">视觉设计</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交互设计</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务用例</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">推广策略</td>\n<td style=\"text-align:left\">x</td>\n</tr>\n</tbody>\n</table>\n<p>不知道大家做完这个测试后，是不是觉得做产品设计比做需求分析牛逼多了。很多产品经理的书籍中都会将“产品设计”描述的高大上：</p>\n<ul>\n<li>产品设计是用户价值驱动，需求分析是业务需求驱动。</li>\n<li>所谓设计，就是通过创造与交流来认识我们生活在其中的世界。好的认识和发现，会让我们感到喜悦和骄傲。</li>\n<li>互联网产品设计绝不是编写产品交互说明书，也不是创造优美的界面，本质是创造一连串的体验，使用户能感知到产品的文化、价值和内涵，从而引发集群效应、创造社会价值。</li>\n</ul>\n<p>以上的话说的都对，绝对正确。在乔老爷子的引领下，如今很多公司重视产品设计，这是好事。但是于此同时产生另外一种做法：不重视需求分析，甚至直接忽略。老板、产品经理这么做可以理解，工程师如果也这么附和，就是做事不过大脑。</p>\n<h1 id=\"需求分析是否有继续存在的价值\"><a href=\"#需求分析是否有继续存在的价值\" class=\"headerlink\" title=\"需求分析是否有继续存在的价值\"></a>需求分析是否有继续存在的价值</h1><p>产品设计要取代需求分析，只可能是下面两种情况：</p>\n<ul>\n<li>产品设计涵盖了需求分析的所有工作内容</li>\n<li>属于需求分析但是不属于产品设计的工作内容已不再重要，可以不用去做</li>\n</ul>\n<p>第一种情况，需求分析中的业务建模、画E-R关系图、UML流程图、时序图、状态图，在大多数公司中，是由需求分析师或者工程师来做，不属于产品设计的工作范畴。产品设计显然不涵盖需求分析的所有工作内容。</p>\n<p>第二种情况，面对复杂业务场景，通过业务建模、画E-R关系图、UML流程图、时序图、状态图等手段做需求分析，是前辈软件工程师总结出来宝贵方法和经验。产品经理一般会将整理后的产品需求通过各种方式（口述、文档、UI/UE设计等）传递给工程团队，但是这些信息一般都是站在业务边界或系统边界描述的产品功能需求，和工程实现存在<strong>信息断层</strong>。产品需求如何映射到代码实现，需要一个系统化的需求分析、设计过程，产品设计并不解决过去几十年软件开发行业发明各种软件需求分析方法所解决的问题。任何脑袋没有烧掉的公司都不会说软件需求分析工作不重要、不需要做。</p>\n<h1 id=\"需求分析应继续得到坚持和重视\"><a href=\"#需求分析应继续得到坚持和重视\" class=\"headerlink\" title=\"需求分析应继续得到坚持和重视\"></a>需求分析应继续得到坚持和重视</h1><p>如果只关注产品设计，更多的时候，你会认为设计出来的界面很美观，交互也很舒服，该说的需求都告诉工程团队了，但是工程开发阶段，出现各种问题：概念不明确、架构无法设计、逻辑混乱、后期变更困难。</p>\n<p>如果只关注需求分析，更多的时候，你会发现不知道如何提产品需求，产品开发出来了，认为做很牛逼，但是客户觉得不好用，产品不好卖。</p>\n<p>所有公司都希望做出成功的产品。但是未经仔细思考，就忽略软件需求分析方法，不是一个经得起推敲的做法。只有产品设计、需求分析都做好了，产品才能成功。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.umlchina.com/\" target=\"_blank\" rel=\"external\">UMLChina</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XMTIzMzczNg==.html\" target=\"_blank\" rel=\"external\">李小龙截拳道</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>“体育运动有规则，而对格斗来说，是没有规则的。所以为了迎接格斗，你应该训练身体的所有部位。”\n——李小龙\n</code></pre><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我参加工作是2006年，去的第一家公司是四维图新。那时在技术部从事软件开发工作，功能需求是由技术部的需求组提供的。业务部门要做什么东西，会先给需求组提需求，然后需求组将业务需求整理好，以需求单的形式提供给各个系统开发组。那时候，大家开会说“产品”，指的是公司出版的地图数据，而不是技术部门开发的各个系统、软件工具。学习的内容也是CMMI（软件能力成熟度模型）、RUP（统一软件开发过程）、MSF（微软解决方案框架结构）、UML。</p>\n<p>2011年我加入艺龙旅行网，那时艺龙有这么两个部门，一个是网站产品组，一个是业务流程改进组。网站产品负责给面向消费者的预订网站提需求，而业务流程改进组负责给内部呼叫中心使用的系统、面向酒店的业务系统提需求。这两个组后来合并成一个产品团队。我在艺龙负责Ebooking产品的开发和运维工作，和产品经理打了3年的交道，期间自己学习了产品经理的相关知识并且担任一段时间的产品经理。</p>\n<p>在艺龙期间以及后来的工作中，我看到一些团队的产品经理很优秀，开发人员技术也很强，但是有时候一个小的需求变更导致技术上的大调整，整个产品开发过程“鸡飞狗跳”，反倒有时候不如以前和一些经验丰富的需求分析师合作时候，产品开发过程更顺畅。</p>\n<h1 id=\"“产品设计”和“需求分析”比较\"><a href=\"#“产品设计”和“需求分析”比较\" class=\"headerlink\" title=\"“产品设计”和“需求分析”比较\"></a>“产品设计”和“需求分析”比较</h1><p>在传统软件开发企业和互联网企业都工作过的软件工程师，会发现“传统”需求分析师、“互联网”产品经理这两种角色工作内容有着一些明显的区别。</p>\n<p>我们通过下面一个测试来了解一下大家所认为的这两个角色的工作内容。下面给出一些概念，如果你认为更接近产品设计，就在产品设计列打“x”，反之在需求分析列下打“x”。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名词</th>\n<th style=\"text-align:left\">产品设计</th>\n<th style=\"text-align:left\">需求分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">商业模式</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户体验</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户心智</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户习惯</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户愿景</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">渉众</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户角色</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务执行者</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务工人</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以用户价值为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以业务需求为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">甲方、乙方</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据分析</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息建模</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息架构</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">面向对象方法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UML流程图、状态图、时序图、类图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E-R关系图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">需求文档</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">产品原型</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rational</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Axure RP</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sketch</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UI、UE</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">视觉设计</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交互设计</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务用例</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">推广策略</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>以上概念基本可以分为“关注点”、“考虑问题的模式和方法”、“工作内容”、“常用工具”、“工作交付物”这么几类。相信大部分人选择的接近下面这个答案：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名词</th>\n<th style=\"text-align:left\">产品设计</th>\n<th style=\"text-align:left\">需求分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">商业模式</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户体验</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户心智</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户习惯</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户愿景</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户需求驱动</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务需求驱动</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">渉众</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户角色</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务执行者</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务工人</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以用户价值为中心</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">以业务需求为中心</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">甲方、乙方</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据分析</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息建模</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">信息架构</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">面向对象方法</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UML流程图、状态图、时序图、类图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E-R关系图</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">需求文档</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">产品原型</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rational</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Axure RP</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sketch</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UI、UE</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">视觉设计</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交互设计</td>\n<td style=\"text-align:left\">x</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">业务用例</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">推广策略</td>\n<td style=\"text-align:left\">x</td>\n</tr>\n</tbody>\n</table>\n<p>不知道大家做完这个测试后，是不是觉得做产品设计比做需求分析牛逼多了。很多产品经理的书籍中都会将“产品设计”描述的高大上：</p>\n<ul>\n<li>产品设计是用户价值驱动，需求分析是业务需求驱动。</li>\n<li>所谓设计，就是通过创造与交流来认识我们生活在其中的世界。好的认识和发现，会让我们感到喜悦和骄傲。</li>\n<li>互联网产品设计绝不是编写产品交互说明书，也不是创造优美的界面，本质是创造一连串的体验，使用户能感知到产品的文化、价值和内涵，从而引发集群效应、创造社会价值。</li>\n</ul>\n<p>以上的话说的都对，绝对正确。在乔老爷子的引领下，如今很多公司重视产品设计，这是好事。但是于此同时产生另外一种做法：不重视需求分析，甚至直接忽略。老板、产品经理这么做可以理解，工程师如果也这么附和，就是做事不过大脑。</p>\n<h1 id=\"需求分析是否有继续存在的价值\"><a href=\"#需求分析是否有继续存在的价值\" class=\"headerlink\" title=\"需求分析是否有继续存在的价值\"></a>需求分析是否有继续存在的价值</h1><p>产品设计要取代需求分析，只可能是下面两种情况：</p>\n<ul>\n<li>产品设计涵盖了需求分析的所有工作内容</li>\n<li>属于需求分析但是不属于产品设计的工作内容已不再重要，可以不用去做</li>\n</ul>\n<p>第一种情况，需求分析中的业务建模、画E-R关系图、UML流程图、时序图、状态图，在大多数公司中，是由需求分析师或者工程师来做，不属于产品设计的工作范畴。产品设计显然不涵盖需求分析的所有工作内容。</p>\n<p>第二种情况，面对复杂业务场景，通过业务建模、画E-R关系图、UML流程图、时序图、状态图等手段做需求分析，是前辈软件工程师总结出来宝贵方法和经验。产品经理一般会将整理后的产品需求通过各种方式（口述、文档、UI/UE设计等）传递给工程团队，但是这些信息一般都是站在业务边界或系统边界描述的产品功能需求，和工程实现存在<strong>信息断层</strong>。产品需求如何映射到代码实现，需要一个系统化的需求分析、设计过程，产品设计并不解决过去几十年软件开发行业发明各种软件需求分析方法所解决的问题。任何脑袋没有烧掉的公司都不会说软件需求分析工作不重要、不需要做。</p>\n<h1 id=\"需求分析应继续得到坚持和重视\"><a href=\"#需求分析应继续得到坚持和重视\" class=\"headerlink\" title=\"需求分析应继续得到坚持和重视\"></a>需求分析应继续得到坚持和重视</h1><p>如果只关注产品设计，更多的时候，你会认为设计出来的界面很美观，交互也很舒服，该说的需求都告诉工程团队了，但是工程开发阶段，出现各种问题：概念不明确、架构无法设计、逻辑混乱、后期变更困难。</p>\n<p>如果只关注需求分析，更多的时候，你会发现不知道如何提产品需求，产品开发出来了，认为做很牛逼，但是客户觉得不好用，产品不好卖。</p>\n<p>所有公司都希望做出成功的产品。但是未经仔细思考，就忽略软件需求分析方法，不是一个经得起推敲的做法。只有产品设计、需求分析都做好了，产品才能成功。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.umlchina.com/\" target=\"_blank\" rel=\"external\">UMLChina</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XMTIzMzczNg==.html\" target=\"_blank\" rel=\"external\">李小龙截拳道</a></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/elastic-basic-concepts/Brueghel-tower-of-babel.jpg","slug":"Brueghel-tower-of-babel.jpg","post":"cj50oneoj000jv7bfgj80m51m","modified":1,"renderable":0},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-aec25.png","slug":"study-php-and-symfony-on-mac-os-aec25.png","post":"cj50oneoz0011v7bfw889kr3f","modified":1,"renderable":0},{"_id":"source/_posts/experiences-about-develop-dlog/2016-04-21_07-12-40.png","slug":"2016-04-21_07-12-40.png","post":"cj50oneow000yv7bfckpk025j","modified":1,"renderable":0},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-33b82.png","slug":"study-php-and-symfony-on-mac-os-33b82.png","post":"cj50oneoz0011v7bfw889kr3f","modified":1,"renderable":0},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-6c7bd.png","slug":"study-php-and-symfony-on-mac-os-6c7bd.png","post":"cj50oneoz0011v7bfw889kr3f","modified":1,"renderable":0},{"_id":"source/_posts/cracking-the-coding-skill/cracking_the_coding_skills.png","slug":"cracking_the_coding_skills.png","post":"cj50oneo10008v7bf2lz8xxby","modified":1,"renderable":0},{"_id":"source/_posts/configure-smallest-elasticsearch-cluster/es-cluster.jpg","post":"cj50oneoe000fv7bfq5z6bsbg","slug":"es-cluster.jpg","modified":1,"renderable":1},{"_id":"source/_posts/install-oracle-jdk-on-ubuntu-14-04/oracle-jdk8-on-Ubuntu.png","post":"cj50oneol000mv7bf8x9ewffa","slug":"oracle-jdk8-on-Ubuntu.png","modified":1,"renderable":1},{"_id":"source/_posts/make-php-development-VM-using-Vagrant/make-php-development-VM-using-Vagrant-13489.png","post":"cj50oneoo000pv7bfwnucund9","slug":"make-php-development-VM-using-Vagrant-13489.png","modified":1,"renderable":1},{"_id":"source/_posts/install-elasticsearch-on-ubuntu-14-04/logo-elastic.png","post":"cj50oneou000vv7bfdk2p3ars","slug":"logo-elastic.png","modified":1,"renderable":1},{"_id":"source/_posts/elastic-basic-concepts/logo-elastic.png","post":"cj50oneoj000jv7bfgj80m51m","slug":"logo-elastic.png","modified":1,"renderable":1},{"_id":"source/_posts/experiences-about-develop-dlog/2016-04-21_07-12-24.png","slug":"2016-04-21_07-12-24.png","post":"cj50oneow000yv7bfckpk025j","modified":1,"renderable":0},{"_id":"source/_posts/experiences-about-develop-dlog/channel.png","post":"cj50oneow000yv7bfckpk025j","slug":"channel.png","modified":1,"renderable":1},{"_id":"source/_posts/experiences-about-develop-dlog/expvarmon_screen.png","post":"cj50oneow000yv7bfckpk025j","slug":"expvarmon_screen.png","modified":1,"renderable":1},{"_id":"source/_posts/experiences-about-develop-dlog/use_channel.png","post":"cj50oneow000yv7bfckpk025j","slug":"use_channel.png","modified":1,"renderable":1},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-0c6a2.png","post":"cj50oneoz0011v7bfw889kr3f","slug":"study-php-and-symfony-on-mac-os-0c6a2.png","modified":1,"renderable":1},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-2aa39.png","post":"cj50oneoz0011v7bfw889kr3f","slug":"study-php-and-symfony-on-mac-os-2aa39.png","modified":1,"renderable":1},{"_id":"source/_posts/study-php-and-symfony-on-mac-os/study-php-and-symfony-on-mac-os-a5831.png","slug":"study-php-and-symfony-on-mac-os-a5831.png","post":"cj50oneoz0011v7bfw889kr3f","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj50oneo10008v7bf2lz8xxby","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneoe000ev7bfb20iin8e"},{"post_id":"cj50onenl0001v7bfw01ewohk","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneoi000iv7bfiemhm48p"},{"post_id":"cj50oneo50009v7bfg0kdy2qp","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneol000lv7bfjowelx60"},{"post_id":"cj50oneob000dv7bfyxnwm6js","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneoo000ov7bfvph2fao4"},{"post_id":"cj50onens0003v7bfhywta6du","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneoq000rv7bfn3afi00n"},{"post_id":"cj50oneoe000fv7bfq5z6bsbg","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneos000tv7bft9wxssjx"},{"post_id":"cj50oneoj000jv7bfgj80m51m","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50oneow000xv7bf8fwetfkn"},{"post_id":"cj50onenz0007v7bfrr6asldh","category_id":"cj50oneog000gv7bfqnlz18e8","_id":"cj50oneoz000zv7bfqo0m48vt"},{"post_id":"cj50oneol000mv7bf8x9ewffa","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep20013v7bf7z6jrz42"},{"post_id":"cj50oneoo000pv7bfwnucund9","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep30015v7bfl25jmosd"},{"post_id":"cj50oneoq000sv7bf44rkzffm","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep40018v7bfky64j1iq"},{"post_id":"cj50oneou000vv7bfdk2p3ars","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep40019v7bf9j8heese"},{"post_id":"cj50oneow000yv7bfckpk025j","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep5001bv7bfmt3065ob"},{"post_id":"cj50oneoz0011v7bfw889kr3f","category_id":"cj50onenx0005v7bf42ejp6dw","_id":"cj50onep5001dv7bfbxswsiup"},{"post_id":"cj50onep20014v7bfyks3jztt","category_id":"cj50onep40017v7bfo7i8ba3c","_id":"cj50onep6001gv7bftoxybz62"}],"PostTag":[{"post_id":"cj50onenl0001v7bfw01ewohk","tag_id":"cj50onenz0006v7bf3h73krad","_id":"cj50oneoa000cv7bfym1sh5hd"},{"post_id":"cj50onens0003v7bfhywta6du","tag_id":"cj50oneo8000bv7bfnljuzofc","_id":"cj50oneol000kv7bf0ukzoyfw"},{"post_id":"cj50onenz0007v7bfrr6asldh","tag_id":"cj50oneoi000hv7bfmhs48tir","_id":"cj50oneoq000qv7bfzt7f5hij"},{"post_id":"cj50oneo10008v7bf2lz8xxby","tag_id":"cj50oneoo000nv7bfqz3w8xrr","_id":"cj50oneow000wv7bf9tw46d6q"},{"post_id":"cj50oneo50009v7bfg0kdy2qp","tag_id":"cj50oneo8000bv7bfnljuzofc","_id":"cj50onep20012v7bfxr9b077u"},{"post_id":"cj50oneob000dv7bfyxnwm6js","tag_id":"cj50oneoz0010v7bfvob3p1qj","_id":"cj50onep5001cv7bfdplg2h84"},{"post_id":"cj50oneob000dv7bfyxnwm6js","tag_id":"cj50onep30016v7bflnycqf5u","_id":"cj50onep5001ev7bf110hpng0"},{"post_id":"cj50oneoe000fv7bfq5z6bsbg","tag_id":"cj50onep4001av7bfddpagkgf","_id":"cj50onep7001hv7bfmbsp9q83"},{"post_id":"cj50oneoj000jv7bfgj80m51m","tag_id":"cj50onep4001av7bfddpagkgf","_id":"cj50onep9001jv7bfqgzhxmp2"},{"post_id":"cj50oneol000mv7bf8x9ewffa","tag_id":"cj50onep7001iv7bf25d9srfw","_id":"cj50onepc001mv7bfmw6kk1ts"},{"post_id":"cj50oneol000mv7bf8x9ewffa","tag_id":"cj50onep4001av7bfddpagkgf","_id":"cj50onepc001nv7bfnuv97eqc"},{"post_id":"cj50oneoo000pv7bfwnucund9","tag_id":"cj50onepa001lv7bfp791rbho","_id":"cj50onepd001pv7bffs0eo2tp"},{"post_id":"cj50oneoq000sv7bf44rkzffm","tag_id":"cj50onepc001ov7bfrjvl0h41","_id":"cj50onepe001rv7bflnpc0qaz"},{"post_id":"cj50oneou000vv7bfdk2p3ars","tag_id":"cj50onep7001iv7bf25d9srfw","_id":"cj50onepm001uv7bfkku72j2p"},{"post_id":"cj50oneou000vv7bfdk2p3ars","tag_id":"cj50onep4001av7bfddpagkgf","_id":"cj50onepm001vv7bfr8vpia5u"},{"post_id":"cj50oneow000yv7bfckpk025j","tag_id":"cj50onepe001tv7bfbt8k71aj","_id":"cj50onepo001yv7bfgl29kicd"},{"post_id":"cj50oneow000yv7bfckpk025j","tag_id":"cj50oneoz0010v7bfvob3p1qj","_id":"cj50onepo001zv7bf7usggsy2"},{"post_id":"cj50oneoz0011v7bfw889kr3f","tag_id":"cj50onepa001lv7bfp791rbho","_id":"cj50onepp0021v7bfkvho4jdn"},{"post_id":"cj50onep20014v7bfyks3jztt","tag_id":"cj50onepo0020v7bft7326im5","_id":"cj50onepp0023v7bftmln4cbq"},{"post_id":"cj50onep20014v7bfyks3jztt","tag_id":"cj50onepp0022v7bfq1to1l2u","_id":"cj50onepp0024v7bf4w5aa7li"}],"Tag":[{"name":"docker","_id":"cj50onenz0006v7bf3h73krad"},{"name":"mongodb","_id":"cj50oneo8000bv7bfnljuzofc"},{"name":"阅读","_id":"cj50oneoi000hv7bfmhs48tir"},{"name":"coding","_id":"cj50oneoo000nv7bfqz3w8xrr"},{"name":"golang","_id":"cj50oneoz0010v7bfvob3p1qj"},{"name":"json","_id":"cj50onep30016v7bflnycqf5u"},{"name":"elasticsearch","_id":"cj50onep4001av7bfddpagkgf"},{"name":"jdk","_id":"cj50onep7001iv7bf25d9srfw"},{"name":"php","_id":"cj50onepa001lv7bfp791rbho"},{"name":"API设计","_id":"cj50onepc001ov7bfrjvl0h41"},{"name":"data log","_id":"cj50onepe001tv7bfbt8k71aj"},{"name":"产品设计","_id":"cj50onepo0020v7bft7326im5"},{"name":"需求分析","_id":"cj50onepp0022v7bfq1to1l2u"}]}}